<pre class='metadata'>
Title: WebGPU Shading Language
Shortname: WGSL
Level: 1
Status: w3c/ED
Group: webgpu
URL: https://gpuweb.github.io/gpuweb/wgsl/
Ignored Vars: i, e, e1, e2, e3, N, M, v, Stride, Offset, Align, Extent, S, T, T1

!Participate: <a href="https://github.com/gpuweb/gpuweb/issues/new?labels=wgsl">File an issue</a> (<a href="https://github.com/gpuweb/gpuweb/issues?q=is%3Aissue+is%3Aopen+label%3Awgsl">open issues</a>)

Editor: David Neto, Google https://www.google.com, dneto@google.com
Editor: Myles C. Maxfield, Apple Inc., mmaxfield@apple.com, w3cid 77180
Former Editor: dan sinclair, Google https://www.google.com, dsinclair@google.com
Abstract: Shading language for WebGPU.
Markup Shorthands: markdown yes
Markup Shorthands: biblio yes
Markup Shorthands: idl no
</pre>

<style>
tr:nth-child(2n) {
  background-color: #b0b0b050;
}
thead {
  background-color: #b0b0b050;
  font-weight: bold;
}
.nowrap {
  white-space:nowrap;
}
.small {
  font-size: smaller;
}
</style>

<pre class=biblio>
{
  "WebGPU": {
    "authors": [
      "Dzmitry Malyshau",
      "Justin Fan",
      "Kai Ninomiya"
    ],
    "href": "https://gpuweb.github.io/gpuweb/",
    "title": "WebGPU",
    "status": "Editor's Draft",
    "publisher": "W3C",
    "deliveredBy": [
      "https://github.com/gpuweb/gpuweb"
    ]
  },
  "VulkanMemoryModel": {
    "authors": [
      "Jeff Bolz",
      "Alan Baker",
      "Tobias Hector",
      "David Neto",
      "Robert Simpson",
      "Brian Sumner"
    ],
    "href": "https://www.khronos.org/registry/vulkan/specs/1.2-extensions/html/vkspec.html#memory-model",
    "title": "Vulkan Memory Model",
    "publisher": "Khronos Group"
  }
}
</pre>

# Introduction # {#intro}

WebGPU Shader Language ([SHORTNAME]) is the shader language for [[!WebGPU]].
That is, an application using the WebGPU API uses [SHORTNAME] to express the programs, known as shaders,
that run on the GPU.

<div class='example wgsl global-scope'>
  <xmp highlight='rust'>
    [[stage(fragment)]]
    fn main() -> [[location(0)]] vec4<f32> {
        return vec4<f32>(0.4, 0.4, 0.8, 1.0);
    }
  </xmp>
</div>


## Goals ## {#goals}

 * Trivially convertable to SPIR-V
 * Constructs are defined as normative references to their SPIR-V counterparts
 * All features in [SHORTNAME] are directly translatable to SPIR-V. (No polymorphism, no general pointers, no overloads, etc)
 * Features and semantics are exactly the ones of SPIR-V
 * Each item in this spec *must* provide the mapping to SPIR-V for the construct

## Technical Overview ## {#technical-overview}

WebGPU issues a unit of work to the GPU in the form of a [[WebGPU#gpu-command|GPU command]].
[SHORTNAME] is concerned with two kinds of GPU commands:
* a <dfn noexport>draw command</dfn> executes a [=GPURenderPipeline|render pipeline=]
    in the context of [=pipeline input|inputs=], [=pipeline output|outputs=], and attached [=resources=].
* a <dfn noexport>dispatch command</dfn> executes a [=GPUComputePipeline|compute pipeline=]
    in the context of [=pipeline input|inputs=] and attached [=resources=].

Both kinds of pipelines use shaders written in [SHORTNAME].

A <dfn noexport>shader</dfn> is the portion of a [SHORTNAME] program that executes a [=shader stage=] in a pipeline.
A shader comprises:
* An [=entry point=] [=function/function=].
* The transitive closure of all called functions, starting with the entry point.
    This set includes both [=user-defined function|user-defined=] and [=built-in function|built-in=] functions.
    (For a more rigorous definition, see "[=functions in a shader stage=]".)
* The set of variables and constants [=statically accessed=] by all those functions.
* The set of types used to define or analyze all those functions, variables, and constants.

When executing a shader stage, the implementation:
* Binds [=resources=] to variables in the shader's [=resource interface of a shader|resource interface=],
    making the contents of those resources available to the shader during execution.
* Allocates storage for other [=module scope|module-scope=] variables,
    and populates that storage with the specified initial values.
* Populates the formal parameters of the entry point, if they exist, with the stage's pipeline inputs.
* Connects the entry point return value, if one exists, to the stage's pipeline outputs.
* Then it invokes the entry point.

A [SHORTNAME] program is organized into:
* Functions, which specify execution behaviour.
* Statements, which are declarations or units of executable behaviour.
* Literals, which are text representations for pure mathematical values.
* Constants, each providing a name for a value computed at a specific time.
* Variables, each providing a name for storage for holding a value.
* Expressions, each of which combines a set of values to produce a result value.
* Types, each of which describes:
    * A set of values.
    * Constraints on supported expressions.
    * The semantics of those expressions.

[SHORTNAME] is an imperative language: behaviour is specified as a sequence of statements to execute.
Statements:
* Declare constants or variables
* Modify the contents of variables
* Modify execution order using structured programming constructs:
    * Selective execution: if/else/elseif, switch
    * Repetition: loop, for
    * Escaping a nested execution construct: break, continue
    * Refactoring: function call and return
    * Discard (fragment shaders only): terminating the invocation and throwing away the output
* Evaluate expressions to compute values as part of the above behaviours.

[SHORTNAME] is statically typed: each value computed by a particular expression is in a specific type,
determined only by examining the program source.

[SHORTNAME] has types to describe booleans, numbers, vectors, matrices, and aggregations
of these in the form of arrays and structures.
Additional types describe memory.

[SHORTNAME] has texture and sampler types.
Together with their associated built-in functions, these support functionality
commonly used for graphics rendering, and commonly provided by GPUs.

The work of a shader stage is partitioned into one or more <dfn noexport>invocations</dfn>,
each of which executes the entry point, but under slightly different conditions.
Invocations in a shader stage share access to certain variables:
* All invocations in the stage share the resources in the shader interface.
* In a [=compute shader stage|compute shader=], invocations in the same
     [=compute shader stage/workgroup=] share
     variables in the [=storage classes/workgroup=] [=storage class=].
     Invocations in different workgroups do not share those variables.

However, the invocations act on different sets of pipeline inputs, including built-in inputs
that provide an identifying value to distinguish an invocation from its peers.
Also, each invocation has its own independent storage space in the form
of variables in the [=storage classes/private=] and [=storage classes/function=] storage classes.

Invocations within a shader stage execute concurrently, and may often execute in parallel.
The shader author is responsible for ensuring the dynamic behaviour of the invocations
in a shader stage:
* Meet the uniformity requirements of certain primitive operations, including texture sampling and control barriers.
* Coordinate potentially conflicting accesses to shared variables, to avoid race conditions.

[SHORTNAME] sometimes permits several possible behaviours for a given feature.
This is a portability hazard, as different implementations may exhibit the different behaviours.
The design of [SHORTNAME] aims to minimize such cases, but is constrained by feasibility,
and goals for achieving high performance across a broad range of devices.

## Notation ## {#notation}

The <dfn noexport>floor expression</dfn> is defined over real numbers |x|:

* &lfloor;|x|&rfloor; = |k|, where |k| is the unique integer such that |k| &le; |x| &lt; |k|+1

The <dfn noexport>ceiling expression</dfn> is defined over real numbers |x|:

* &lceil;|x|&rceil; = |k|, where |k| is the unique integer such that |k|-1 &lt; |x| &le; |k|

The <dfn noexport>roundUp</dfn> function is defined for positive integers |k| and |n| as:

* roundUp(|k|, |n|) = &lceil;|n| &div; |k|&rceil; &times; |k|

The <dfn noexport>transpose</dfn> of an |n|-column |m|-row matrix |A| is the |m|-column |n|-row matrix
|A|<sup>T</sup> formed by copying the rows of |A| as the columns of |A|<sup>T</sup>:

* transpose(|A|) = |A|<sup>T</sup>
* transpose(|A|)<sub>|i|,|j|</sub> = |A|<sub>|j|,|i|</sub>

The transpose of a column vector is defined by interpreting the column vector as a 1-row matrix.
Similarly, the transpose of a row vector is defined by interpreting the row vector as a 1-column matrix.

# Shader Lifecycle # {#program-lifecycle}

There are four key events in the lifecycle of a [SHORTNAME] program and the shaders it may contain.
The first two correspond to the WebGPU API methods used to prepare a [SHORTNAME] program
for execution.
The last two are the start and end of execution of a shader.

The events are:

1. <dfn noexport>Shader module creation</dfn>
    * This occurs when the 
        [[WebGPU#dom-gpudevice-createshadermodule|WebGPU createShaderModule]] method
        is called.
        The source text for a [SHORTNAME] program is provided at this time.
2. <dfn noexport>Pipeline creation</dfn>
    * This occurs when the
        [[WebGPU#dom-gpudevice-createcomputepipeline|WebGPU createComputePipeline]] method
        or the
        [[WebGPU#dom-gpudevice-createrenderputepipeline|WebGPU createRenderPipeline]] method
        is invoked.
        These methods use one or more previously created shader modules, together with other
        configuration information.
3. <dfn noexport>Shader execution start</dfn>
    * This occurs when a [=draw command|draw=] or [=dispatch command=] is issued to the GPU,
        begins executing the pipeline,
        and invokes the [=shader stage=] [=entry point=] function.
4. <dfn noexport>Shader execution end</dfn>
    * This occurs when all work in the shader completes:
        * all its [=invocations=] terminate
        * and all accesses to [=resources=] complete
        * outputs, if any, are passed to downstream pipeline stages.

The events are ordered due to:
*  data dependencies: shader execution requires a pipeline, and a pipeline requires a shader module.
*  causality: the shader must start executing before it can finish executing.

## Kinds of errors ## {#kinds-of-errors}

A <dfn export>program error</dfn> is a failure to satisfy the requirements of this specification.

There are three kinds of errors, corresponding to the shader lifecycle:

* A <dfn export>shader-creation error</dfn>
    is an error feasibly detectable at [=shader module creation=] time.
    Detection must rely only on the [SHORTNAME] program source text
    and other information available to the `createShaderModule` API method.

* A <dfn export>pipeline-creation error</dfn>
    is an error feasibly detectable at [=pipeline creation=] time.
    Detection must rely only on the [SHORTNAME] program source text
    and other information available to the particular pipeline creation API method.

* A <dfn export>dynamic error</dfn> is an error occurring during shader execution.
    These errors may or may not be detectable.

Note: For example, a race condition may not be detectable.

Each requirement in this specification corresponds to a single kind of error.
Generally, a requirement corresponds to the earliest error kind at which its violation could be feasibly detected.
When unclear, the corresponding error kind is explicitly specified.

The WebGPU specification describes the consequences of each kind of error.

TODO: Update the WebGPU spec, referring back to the three kinds of errors defined here.

# Textual structure TODO # {#textual-structure}

TODO: This is a stub.

A [SHORTNAME] program is text.
This specification does not prescribe a particular encoding for that text.
However, UTF-8 is always a valid encoding for a [SHORTNAME] program.

Note: The intent of promoting UTF-8 like this is to simplify interchange of [SHORTNAME] programs
and to encourage interoperability among tools.

## Comments ## {#comments}

Comments begin with `//` and continue to the end of the current line. There are no multi-line comments.

TODO: What indicates the end of a line?  (E.g. A line ends at the next linefeed or at the end of the program)

## Tokens TODO ## {#tokens}

## Literals TODO ## {#literals}

<table class='data'>
  <thead>
    <tr><th>Token<th>Definition
  </thead>
  <tr><td>`DECIMAL_FLOAT_LITERAL`<td>`(-?[0-9]*.[0-9]+ | -?[0-9]+.[0-9]*)((e|E)(+|-)?[0-9]+)?`
  <tr><td>`HEX_FLOAT_LITERAL`<td>`-?0x([0-9a-fA-F]*.?[0-9a-fA-F]+ | [0-9a-fA-F]+.[0-9a-fA-F]*)(p|P)(+|-)?[0-9]+`
  <tr><td>`INT_LITERAL`<td>`-?0x[0-9a-fA-F]+ | 0 | -?[1-9][0-9]*`
  <tr><td>`UINT_LITERAL`<td>`0x[0-9a-fA-F]+u | 0u | [1-9][0-9]*u`
</table>

Note: literals are parsed greedily. This means that for statements like `a -5`
      this will *not* parse as `a` `minus` `5` but instead as `a` `-5` which
      may be unexpected. A space must be inserted after the `-` if the first
      expression is desired.

<pre class='def'>
const_literal
  : INT_LITERAL
  | UINT_LITERAL
  | FLOAT_LITERAL
  | TRUE
  | FALSE
</pre>

<pre class='def'>
FLOAT_LITERAL
  : DECIMAL_FLOAT_LITERAL
  | HEX_FLOAT_LITERAL
</pre>


## Keywords TODO ## {#keywords}

TODO: *Stub*

See [[#keyword-summary]] for a list of keywords.

## Identifiers TODO ## {#identifiers}

<table class='data'>
  <thead>
    <tr><th>Token<th>Definition
  </thead>
  <tr><td>`IDENT`<td>`[a-zA-Z][0-9a-zA-Z_]*`
</table>

An identifier must not have the same spelling as a keyword or as a reserved keyword.

## Attributes ## {#attributes}

An <dfn noexport>attribute</dfn> modifies an object or type.
[SHORTNAME] provides a unified syntax for applying attributes.
Attributes are used for a variety of purposes such as specifying the interface with the API.
Generally speaking, from the language's point-of-view, attributes can be
ignored for the purposes of type and semantic checking.

An attribute must not be specified more than once per object or type.

<pre class='def'>
attribute_list
  : ATTR_LEFT (attribute COMMA)* attribute ATTR_RIGHT

attribute
  : IDENT PAREN_LEFT literal_or_ident PAREN_RIGHT
  | IDENT

literal_or_ident
  : FLOAT_LITERAL
  | INT_LITERAL
  | UINT_LITERAL
  | IDENT
</pre>

<table class='data'>
  <caption>Attributes defined in [SHORTNAME]</caption>
  <thead>
    <tr><th>Attribute<th>Valid Values<th>Description
  </thead>

   <tr><td><dfn noexport dfn-for="attribute">`access`</dfn>
    <td>`read`, `write`, or `read_write`
    <td>Must only be applied to a type used as a store type for a variable in
    the [=storage classes/storage=] storage class or a variable of [storage
    texture](#texture-storage) type.

    Specifies the access qualification of a storage [=resource=] variable.

  <tr><td><dfn noexport dfn-for="attribute">`align`</dfn>
    <td>positive i32 literal
    <td>Must only be applied to a member of a [=structure=] type.

    Must be a power of 2.

    See memory layout [alignment and size](#alignment-and-size).

  <tr><td><dfn noexport dfn-for="attribute">`binding`
    <td>non-negative i32 literal
    <td>Must only be applied to a [=resource=] variable.

    Specifies the binding number of the resource in a bind [=attribute/group=].
    See [[#resource-interface]].

  <tr><td><dfn noexport dfn-for="attribute">`block`</dfn>
    <td>*None*
    <td>Must only be applied to a [=structure=] type.

    Indicates this structure type represents the contents of a buffer
    resource occupying a single binding slot in the [=resource interface of a
    shader|shader's resource interface=].

    The `block` attribute must be applied to a structure type used as the
    [=store type=] of a [=uniform buffer=] or [=storage buffer=] variable.

    A structure type with the block attribute must not be:
    * the element type of an [=array=] type
    * the member type in another structure

  <tr><td><dfn noexport dfn-for="attribute">`builtin`
    <td>a builtin variable identifier
    <td>Must only be applied to an entry point function parameter, entry point
    return type, or member of a [=structure=].

    Declares a builtin variable.
    See [[#builtin-variables]].

  <tr><td><dfn noexport dfn-for="attribute">`group`
    <td>non-negative i32 literal
    <td>Must only be applied to a [=resource=] variable.

    Specifies the binding group of the resource.
    See [[#resource-interface]].

  <tr><td><dfn noexport dfn-for="attribute">`interpolate`
    <td>One or two parameters.

    The first parameter must be an [=interpolation type=].
    The second parameter, if present, must specify the [=interpolation sampling=].
    <td>Must only be applied to an entry point function parameter, entry point
    return type, or member of a [=structure=] type.
    Must only be applied to declarations of scalars or vectors of floating-point type.
    Must not be used with the [=compute=] shader stage.
    If the first parameter is `flat`, the second parameter must not be specified.

    Specifies how the user-defined IO must be interpolated.
    The attribute is only significant on user-defined [=vertex=] outputs
    and [=fragment=] inputs.
    See [[#interpolation]].

  <tr><td><dfn noexport dfn-for="attribute">`invariant`
    <td>*None*
    <td>Must only be applied to the `position` built-in variable.

    When applied to the `position` [=built-in output variable=] of a vertex
    shader, the computation of the result is invariant across different
    programs and different invocations of the same entry point.
    That is, if the data and control flow match for two `position` outputs in
    different entry points, then the result values are guaranteed to be the
    same.
    There is no affect on a `position` [=built-in input variable=].

    Note: this attribute maps to the `Invariant` decoration in SPIR-V, the
    `invariant` attribute in Metal shading language, the `precise` qualifier in
    HLSL, the `invariant` qualifier in GLSL.

  <tr><td><dfn noexport dfn-for="attribute">`location`
    <td>non-negative i32 literal
    <td>Must only be applied to an entry point function parameter, entry point
    return type, or member of a [=structure=] type.
    Must only be applied to declarations of [=numeric scalar=] or [=numeric
    vector=] type.
    Must not be used with the [=compute=] shader stage.

    Specifies a part of the user-defined IO of an entry point.
    See [[#input-output-locations]].

  <tr><td><dfn noexport dfn-for="attribute">`override`
    <td>An optional, non-negative i32 literal
    <td>Must only be applied to module scope constant declaration of [=scalar=] type.

    Specifies a [=pipeline-overridable=] constant.
    In the WebGPU API, pipeline overridable constants are specified by the identifier
    of the constant the attribute is applied to.
    If the optional parameter is specified, the pipeline overridable constant
    is referred to by the numeric id specified instead.

  <tr><td><dfn noexport dfn-for="attribute">`size`</dfn>
    <td>positive i32 literal
    <td>Must only be applied to a member of a [=structure=] type.

    The number of bytes reserved in the struct for this member.

  <tr><td><dfn noexport dfn-for="attribute">`stage`</dfn>
    <td>`compute`, `vertex`, or `fragment`
    <td>Must only be applied to a function declaration.

    Declares an entry point by specifying its pipeline stage.

  <tr><td><dfn noexport dfn-for="attribute">`stride`</dfn>
    <td>positive i32 literal
    <td>Must only be applied to an [=array=] type.

    The number of bytes from the start of one element of the array to the
    start of the next element.

  <tr><td><dfn noexport dfn-for="attribute">`workgroup_size`</dfn>
    <td>One, two or three parameters.

    Each parameter is either a positive i32 literal or the name of a
    [=pipeline-overridable=] constant of i32 type.
    <td>Must only be applied to a [=compute shader stage=] function declaration.

    Specifies the x, y, and z dimensions of the [=workgroup grid=] for the compute shader.

    The first parameter specifies the x dimension.
    The second parameter, if provided, specifies the y dimension, otherwise is assumed to be 1.
    The third parameter, if provided, specifies the z dimension, otherwise is assumed to be 1.
    Each dimension must be at least 1 and at most an upper bound specified by the WebGPU API.

</table>


## Directives TODO ## {#directives}

A <dfn noexport>directive</dfn> is a token sequence which modifies how a [SHORTNAME]
program is processed by a WebGPU implementation.
See [[#enable-directive-section]].

## Declaration and scope ## {#declaration-and-scope}

A <dfn noexport>declaration</dfn> associates an identifier with one of
the following kinds of objects:
* a type
* a value
* a variable
* a function
* a formal parameter

In other words, a declaration introduces a <dfn noexport>name</dfn> for an object.

The <dfn noexport>scope</dfn> of a declaration is the set of
program locations where a use of the declared identifier potentially denotes
its associated object.
We say the identifier is <dfn noexport>in scope</dfn>
(of the declaration) at those source locations.

Each kind of declaration has its own rule for determining its scope.
In general the scope is a span of text beginning immediately after the end of the
declaration.

Certain objects are provided by the WebGPU implementation,
and are treated as if they have already been declared at the start of a [SHORTNAME] program.
We say such objects are <dfn noexport>predeclared</dfn>.
Their scope is the entire [SHORTNAME] program.
Examples of predeclared objects are:
* [=built-in functions=], and
* built-in types.

A declaration must not introduce a name when that identifier is
already in scope with the same end scope as another instance of that name.
When an identifier is used in scope of one or more declarations for that name,
the identifier will denote the object of the declaration appearing closest to
that use.
We say the identifier use <dfn noexport>resolves</dfn> to that declaration.

Note: A declaration always precedes its identifier's scope.
Therefore, the nearest in scope declaration of an identifier always precedes the
use of the identifier.

<div class='example' heading='Valid and invalid declarations'>
  <xmp>
    // Invalid, cannot reuse built-in function names.
    var<private> modf : f32 = 0.0;

    // Valid, foo_1 is in scope until the end of the program.
    var<private> foo : f32 = 0.0; // foo_1

    // Valid, bar_1 is in scope until the end of the program.
    var<private> bar : u32 = 0u; // bar_1

    // Valid, my_func_1 is in scope until the end of the program.
    // Valid, foo_2 is in scope until the end of the function.
    fn my_func(foo : f32) { // my_func_1, foo_2
      // Any reference to 'foo' resolves to the function parameter.

      // Invalid, the scope of foo_3 ends at the of the function.
      var foo : f32; // foo_3

      // Valid, bar_2 is in scope until the end of the function.
      var bar : u32; // bar_2
      // References to 'bar' resolve to bar_2
      {
        // Valid, bar_3 is in scope until the end of the compound statement.
        var bar : u32; // bar_3
        // References to 'bar' resolve to bar_3

        // Invalid, bar_4 has the same end scope as bar_3.
        var bar : i32; // bar_4

        // Valid, i_1 is in scope until the end of the for loop
        for (var i : i32 = 0; i < 10; i = i + 1) { // i_1
          // Invalid, i_2 has the same end scope as i_1.
          var i : i32 = 1; // i_2.
        }
      }

      // Invalid, bar_5 has the same end scope as bar_2.
      var bar : u32; // bar_5
    }

    // Invalid, bar_6 has the same end scope as bar_1.
    var<private> bar : u32 = 1u; // bar_6

    // Invalid, my_func_2 has the same end scope as my_func_1.
    fn my_func() { } // my_func_2

    // Valid, my_foo_1 is in scope until the end of the program.
    fn my_foo(
      // Valid, my_foo_2 is in scope until the end of the function.
      my_foo : i32 // my_foo_2
    ) { }
  </xmp>
</div>

There are multiple levels of scoping depending on how and where things are
declared.

When an identifier is used, it must be in scope for some declaration, or as part of a directive.

A declaration is at <dfn noexport>module scope</dfn> if the declaration appears outside
the text of any other declaration.

Note: Only a [=function declaration=] can contain other declarations.

# Types # {#types}

Programs calculate values.

In [SHORTNAME], a <dfn noexport>type</dfn> is set of values, and each value belongs to exactly one type.
A value's type determines the syntax and semantics of operations that can be performed on that value.

For example, the mathematical number 1 corresponds to three distinct values in [SHORTNAME]:
* the 32-bit signed integer value `1`,
* the 32-bit unsigned integer value `1u`, and
* the 32-bit floating point value `1.0`.

[SHORTNAME] treats these as different because their machine representation and operations differ.

A type is either [=predeclared=], or created in WGSL source via a [=declaration=].

We distinguish between the *concept* of a type and the *syntax* in [SHORTNAME] to denote that type.
In many cases the spelling of a type in this specification is the same as its [SHORTNAME] syntax.
For example:
* the set of 32-bit unsigned integer values is spelled `u32` in this specification,
    and also in a [SHORTNAME] program.
* the spelling is different for structure types, or types containing structures.

Some [SHORTNAME] types are only used for analyzing a source program and
for determining the program's runtime behaviour.
This specification will describe such types, but they do not appear in [SHORTNAME] source text.

Note: [SHORTNAME] [=reference types=] are not written in [SHORTNAME] programs. See TODO forward reference to ptr/ref.

## Type Checking ## {#type-checking-section}

A [SHORTNAME] value is computed by evaluating an expression.
An <dfn noexport>expression</dfn> is a segment of source text
parsed as one of the [SHORTNAME] grammar rules whose name ends with "`_expression`".
An expression *E* can contain <dfn noexport>subexpressions</dfn> which are expressions properly contained
in the outer expression *E*.

The particular value produced by an expression evaluation depends on:
* <dfn noexport>static context</dfn>:
    the source text surrounding the expression, and
* <dfn noexport>dynamic context</dfn>:
    the state of the invocation evaluating the expression,
    and the execution context in which the invocation is running.

The values that may result from evaluating a particular expression will always belong to a specific [SHORTNAME] type,
known as the <dfn noexport>static type</dfn> of the expression.
The rules of [SHORTNAME] are designed so that the static type of an expression depends only on the expression's static context.

Statements often use expressions, and may place requirements on the static types of those expressions.
For example:
* The condition expression of an `if` statement must be of type [=bool=].
* In a `let` declaration, the initializer must evaluate to the declared type of the constant.

<dfn noexport>Type checking</dfn> a successfully parsed [SHORTNAME] program is the process of mapping
each expression to its static type,
and determining if the type requirements of each statement are satisfied.

A <dfn noexport>type assertion</dfn> is a mapping from some [SHORTNAME] source expression to a [SHORTNAME] type.
The notation

> *e* : *T*

is a type assertion meaning *T* is the static type of [SHORTNAME] expression *e*.

Note: A type assertion is a statement of fact about the text of a program.
It is not a runtime check.

Finding static types for expressions can be performed by recursively applying type rules.
A <dfn noexport>type rule</dfn> has two parts:
* A conclusion, stated as a type assertion for an expression.
    The expression in the type assertion is specified schematically,
    using *italicized* names to denote subexpressions
    or other syntactically-determined parameters.
* Preconditions, consisting of:
    * Type assertions for subexpressions, when there are subexpressions.
    * Conditions on the other schematic parameters, if any.
    * How the expression is used in a statement.
    * Optionally, other static context.

A <dfn noexport>type rule applies to an expression</dfn> when:
* The rule's conclusion matches a valid parse of the expression, and
* The rule's preconditions are satisfied.

TODO: write an example such as `1+2`, or `3 - a`, where `a` is in-scope of a let declaration with `i32` type.

The type rules are designed so that if parsing succeeds, at most one type rule will apply to each expression.
If a type rule applies to an expression, then the conclusion is asserted, and therefore determines the static type of the expression.

A [SHORTNAME] source program is <dfn noexport>well-typed</dfn> when:
* The static type can be determined for each expression in the program by applying the type rules, and
* The type requirements for each statement are satisfied.

Otherwise there is a <dfn noexport>type error</dfn> and the source program is not a valid [SHORTNAME] program.

[SHORTNAME] is a <dfn noexport>statically typed language</dfn>
because type checking a [SHORTNAME] program will either succeed or
discover a type error, while only having to inspect the program source text.

TODO(dneto): Lazy-decay is a tie-breaking rule. The above description can accomodate it by
using priority-levels on potentially-matching type rules.

### Type rule tables ### {#typing-tables-section}

The [SHORTNAME] [=type rules=] are organized into <dfn noexport>type rule tables</dfn>,
with one row per type rule.

The <dfn noexport>semantics of an expression</dfn> is the effect of evaluating that expression,
and is primarily the production of a result value.
The *Description* column of the type rule that applies to an expression will specify the expression's semantics.
The semantics usually depends on the values of the type rule parameters, including
the assumed values of any subexpressions.
Sometimes the semantics of an expression includes effects other than producing
a result value, such as the non-result-value effects of its subexpressions.

TODO: example: non-result-value effect is any side effect of a function call subexpression.

For convenience, the type tables use the following shorthands:

<table class='data'>
  <tr><td>*Scalar*<td>[=scalar=] types: one of bool, i32, u32, f32
  <tr><td>*Int*<td>i32 or u32
  <tr><td>*Integral*<td>*Int* or [[#vector-types]] with an *Int* component
  <tr><td>*SignedIntegral*<td>i32 or [[#vector-types]] with an i32 component
  <tr><td>*Floating*<td>f32 or [[#vector-types]] with an f32 component
  <tr><td>*Arity(T)*<td>number of components in [[#vector-types]] *T*
</table>

TODO(dneto): Do we still need all these shorthands?

## Plain Types ## {#plain-types-section}

[=Plain types=] are the types for representing boolean values, numbers, vectors,
matrices, or aggregations of such values.

A <dfn>plain type</dfn> is either a [=scalar=] type, an [=atomic type|atomic=] type, or a [=composite=] type.

Note: Plain types in [SHORTNAME] are similar to Plain-Old-Data types in C++, but also include atomic types.

### Boolean Type ### {#bool-type}

The <dfn dfn noexport>bool</dfn> type contains the values `true` and `false`.

### Integer Types ### {#integer-types}

The <dfn dfn noexport>u32</dfn> type is the set of 32-bit unsigned integers.

The <dfn noexport>i32</dfn> type is the set of 32-bit signed integers.
It uses a two's complementation representation, with the sign bit in the most significant bit position.

### Floating Point Type ### {#floating-point-types}

The <dfn noexport>f32</dfn> type is the set of 32-bit floating point values of the IEEE 754 binary32 (single precision) format.
See [[#floating-point-evaluation]] for details.

### Scalar Types ### {#scalar-types}

The <dfn dfn noexport>scalar</dfn> types are [=bool=], [=i32=], [=u32=], and [=f32=].

The <dfn dfn noexport>numeric scalar</dfn> types are [=i32=], [=u32=], and [=f32=].

### Vector Types ### {#vector-types}

A <dfn noexport>vector</dfn> is a grouped sequence of 2, 3, or 4 [=scalar=] components.

<table class='data'>
  <thead>
    <tr><th>Type<th>Description
  </thead>
  <tr><td>vec*N*<*T*><td>Vector of *N* elements of type *T*.
                          *N* must be in {2, 3, 4} and *T*
                          must be one of the [=scalar=] types.
                          We say *T* is the <dfn noexport>component type</dfn> of the vector.
</table>

A vector is a <dfn dfn>numeric vector</dfn> if its component type is a [=numeric scalar=].

Key use cases of a vector include:

* to express both a direction and a magnitude.
* to express a position in space.
* to express a color in some color space.
    For example, the components could be intensities of red, green, and blue,
    while the fourth component could be an alpha (opacity) value.

Many operations on vectors act component-wise, i.e. the result vector is
formed by operating on each component independently.

<div class='example wgsl' heading='Vector'>
  <xmp highlight='rust'>
    vec2<f32>  // is a vector of two f32s.
  </xmp>
</div>

### Matrix Types ### {#matrix-types}

A <dfn noexport>matrix</dfn> is a grouped sequence of 2, 3, or 4 floating point vectors.

<table class='data'>
  <thead>
    <tr><th>Type<th>Description
  </thead>
  <tr algorithm="matrix type">
    <td>mat|N|x|M|&lt;f32&gt;
    <td>Matrix of |N| columns and |M| rows, where |N| and |M| are both in {2, 3, 4}.
        Equivalently, it can be viewed as |N| column vectors of type vec|M|&lt;f32&gt;.
</table>

The key use case for a matrix is to embody a linear transformation.
In this interpretation, the vectors of a matrix are treated as column vectors.

The product operator (`*`) is used to either:

* scale the transformation by a scalar magnitude.
* apply the transformation to a vector.
* combine the transformation with another matrix.

See [[#arithmetic-expr]].

<div class='example wgsl' heading='Matrix'>
  <xmp highlight='rust'>
    mat2x3<f32>  // This is a 2 column, 3 row matrix of 32-bit floats.
                 // Equivalently, it is 2 column vectors of type vec3<f32>.
  </xmp>
</div>

### Atomic Types ### {#atomic-types}

An <dfn noexport>atomic type</dfn> encapsulates a [=scalar=] type such that:
* atomic objects provide certain guarantees to concurrent observers, and
* the only valid operations on atomic objects are the [[#atomic-builtin-functions|atomic builtin functions]].

<table class='data'>
  <thead>
    <tr><th>Type<th>Description
  </thead>
  <tr algorithm="atomic type"><td>atomic&lt;|T|&gt;
    <td>Atomic of type |T|. |T| must be either [=u32=] or [=i32=].
</table>

An expression must not evaluate to an atomic type.

Atomic types may only be instantiated by variables in the [=storage
classes/workgroup=] storage class or `read_write` [=attribute/access=] variables in the
[=storage classes/storage=] storage class.

An <dfn noexport>atomic modification</dfn> is any operation on an atomic object which sets the content of the object.
The operation counts as a modification even if the new value is the same as the object's existing value.

In [SHORTNAME], atomic modifications are mutually ordered, for each object.
That is, during execution of a shader stage, for each atomic object *A*, all
agents observe the same order of modification operations applied to *A*.
The ordering for distinct atomic objects may not be related in any way; no
causality is implied.
Note that variables in [=storage classes/workgroup=] storage are shared within a
[=compute shader stage/workgroup=], but are not shared between different
workgroups.

TODO: Add links the eventual memory model descriptions.

<pre class='example storage atomic' heading='Mapping atomics in a storage variable to SPIR-V'>
  <xmp>
    [[block]] struct S {
      a : atomic<i32>;
      b : atomic<u32>;
    };

    [[group(0), binding(0)]]
    var<storage> x : [[access(read_write)]] S;

    // Maps to the following SPIR-V:
    // - When atomic types are members of a struct, the Volatile decoration
    //   is annotated on the member.
    // OpDecorate %S Block
    // OpMemberDecorate %S 0 Volatile
    // OpMemberDecorate %S 1 Volatile
    // ...
    // %i32 = OpTypeInt 32 1
    // %u32 = OpTypeInt 32 0
    // %S = OpTypeStruct %i32 %u32
    // %ptr_storage_S = OpTypePointer StorageBuffer %S
    // %x = OpVariable %ptr_storage_S StorageBuffer
  </xmp>
</pre>

<pre class='example workgroup atomic' heading='Mapping atomics in a workgroup variable to SPIR-V'>
  <xmp>
    var<workgroup> x : atomic<u32>;

    // Maps to the following SPIR-V:
    // - When atomic types are directly instantiated by a variable,  the Volatile
    //   decoration is annotated on the OpVariable.
    // OpDecorate %x Volatile
    // ...
    // %u32 = OpTypeInt 32 0
    // %ptr_workgroup_u32 = OpTypePointer Workgroup %S
    // %x = OpVariable %ptr_workgroup_u32 Workgroup
  </xmp>
</pre>


### Array Types ### {#array-types}

An <dfn noexport>array</dfn> is an indexable grouping of element values.

<table class='data'>
  <thead>
    <tr><th>Type<th>Description
  </thead>
  <tr><td algorithm="sized array type">array<|E|,|N|><td>An |N|-element array of elements of type |E|.<br>
                    |N| must be 1 or larger.
  <tr><td algorithm="runtime-sized array type">array<|E|><td>A <dfn noexport>runtime-sized</dfn> array of elements of type |E|,
                       also known as a runtime array.
                       These may only appear in specific contexts.<br>
</table>


The first element in an array is at index 0, and each successive element is at the next integer index.
See [[#array-access-expr]].

An array element type must be one of:
* a [=scalar=] type
* a vector type
* a matrix type
* an [=atomic type|atomic=] type
* an array type
* a [=structure=] type

[SHORTNAME] defines the following attributes that can be applied to array types:
* [=attribute/stride=]

Restrictions on runtime-sized arrays:
* The last member of the structure type defining the [=store type=]
    for a variable in the [=storage classes/storage=] storage class may be a runtime-sized array.
* A runtime-sized array must not be used as the store type or contained within
    a store type in any other cases.
* An expression must not evaluate to a runtime-sized array type.

Issue: (dneto): Complete description of `Array<E,N>`

### Structure Types ### {#struct-types}

A <dfn noexport>structure</dfn> is a grouping of named member values.

<table class='data'>
  <thead>
    <tr><th>Type<th>Description
  </thead>
  <tr algorithm="structure type">
      <td>struct&lt;|T|<sub>1</sub>,...,|T|<sub>N</sub>&gt;
      <td>An ordered tuple of *N* members of types
          |T|<sub>n</sub> through |T|<sub>N</sub>, with |N| being an integer greater than 0.
          A structure type declaration specifies an identifier name for each member.
          Two members of the same structure type must not have the same name.
</table>

A structure member type must be one of:
* a [=scalar=] type
* a vector type
* a matrix type
* an [=atomic type|atomic=] type
* an array type
* a [=structure=] type

Note: The structure member type restriction and the array element type restriction are
mutually reinforcing.
Combined, they imply that a pointer may not appear in any level
of nesting within either an array or structure.
Similarly, the same limitations apply to textures and samplers.

<div class='example wgsl global-scope' heading="Structure">
  <xmp highlight='rust'>
    // A structure with two members.
    struct Data {
      a : i32;
      b : vec2<f32>;
    };
  </xmp>
</div>

<pre class='def'>
struct_decl
  : attribute_list* STRUCT IDENT struct_body_decl
</pre>

<pre class='def'>
struct_body_decl
  : BRACE_LEFT struct_member* BRACE_RIGHT

struct_member
  : attribute_list* variable_ident_decl SEMICOLON
</pre>

[SHORTNAME] defines the following attributes that can be applied to structure types:
 * [=attribute/block=]

[SHORTNAME] defines the following attributes that can be applied to structure members:
 * [=attribute/builtin=]
 * [=attribute/location=]
 * [=attribute/stride=]
 * [=attribute/align=]
 * [=attribute/size=]

Note: Layout attributes may be required if the structure type is used
to define a [=uniform buffer=] or a [=storage buffer=]. See [[#memory-layouts]].

<div class='example wgsl global-scope' heading='Structure WGSL'>
  <xmp>
    struct my_struct {
      a : f32;
      b : vec4<f32>;
    };
  </xmp>
</div>

<div class='example spirv' heading='Structure SPIR-V'>
  <xmp>
                  OpName %my_struct "my_struct"
                  OpMemberName %my_struct 0 "a"
                  OpMemberDecorate %my_struct 0 Offset 0
                  OpMemberName %my_struct 1 "b"
                  OpMemberDecorate %my_struct 1 Offset 4
     %my_struct = OpTypeStruct %float %v4float
  </xmp>
</div>

<div class='example wgsl global-scope' heading='Structure WGSL'>
  <xmp>
    // Runtime Array
    type RTArr = [[stride(16)]] array<vec4<f32>>;
    [[block]] struct S {
      a : f32;
      b : f32;
      data : RTArr;
    };
  </xmp>
</div>

<div class='example spirv' heading='Structure SPIR-V'>
  <xmp>
                  OpName %my_struct "my_struct"
                  OpMemberName %my_struct 0 "a"
                  OpMemberDecorate %my_struct 0 Offset 0
                  OpMemberName %my_struct 1 "b"
                  OpMemberDecorate %my_struct 1 Offset 4
                  OpMemberName %my_struct 2 "data"
                  OpMemberDecorate %my_struct 2 Offset 16
                  OpDecorate %rt_arr ArrayStride 16
        %rt_arr = OpTypeRuntimeArray %v4float
     %my_struct = OpTypeStruct %float %v4float %rt_arr
  </xmp>
</div>

### Composite Types ### {#composite-types}

A type is <dfn noexport>composite</dfn> if it has internal structure
expressed as a composition of other types.
The internal parts do not overlap, and are called <dfn noexport>components</dfn>.

The composite types are:

* [=vector=] type
* [=matrix=] type
* [=array=] type
* [=structure=] type

### Atomic-Free Types ### {#atomic-free-types}

A [=plain type=] is <dfn>atomic-free</dfn> if it is one of:
* a [=scalar=] type
* a [=vector=] type
* a [=matrix=] type
* an [=array=] type, if its element type is atomic-free
* a [=structure=] type, if all its members are atomic-free.

## Memory ## {#memory}

In [SHORTNAME], a value of [=storable=] type may be stored in memory, for later retrieval.
This section describes the structure of memory, and how [SHORTNAME] types are used to
describe the contents of memory.

In general [SHORTNAME] follows the [[!VulkanMemoryModel|Vulkan Memory Model]].

### Memory Locations ### {#memory-locations-section}

Memory consists of a set of distinct <dfn noexport>memory locations</dfn>.
Each memory location is 8-bits
in size. An operation affecting memory interacts with a set of one or more
memory locations.

Two sets of memory locations <dfn noexport>overlap</dfn> if the intersection of
their sets of memory locations is non-empty. Each variable declaration has a
set of memory locations that does not overlap with the sets of memory locations of
any other variable declaration. Memory operations on structures and arrays may
access padding between elements, but must not access padding at the end of the
structure or array.

### Storable Types ### {#storable-types}

A type is <dfn dfn noexport>storable</dfn> if it is one of:

* a [=scalar=] type
* a [=vector=] type
* a [=matrix=] type
* an [=atomic type|atomic=] type
* an [=array=] type, if its element type is storable.
* a [=structure=] type, if each of member is storable.
* a [=texture=] type
* a [=sampler=] type

Note: [=Atomic-free=] [=plain types=] are storable.

### IO-shareable Types ### {#io-shareable-types}

The following types are <dfn dfn noexport>IO-shareable</dfn>:

* [=scalar=] types
* [=numeric vector=] types
* [[#matrix-types]]
* [[#array-types]] if its element type is IO-shareable, and the array is not [=runtime-sized=]
* [[#struct-types]] if all its members are IO-shareable

The following kinds of values must be of IO-shareable type:

* Values read from or written to built-in variables.
* Values accepted as inputs from an upstream pipeline stage.
* Values written as output for downstream processing in the pipeline, or to an output attachment.

Note: Only built-in pipeline inputs may have a boolean type.
A user input or output data attribute must not be of [=bool=] type or contain a [=bool=] type.
See [[#pipeline-inputs-outputs]].

### Host-shareable Types ### {#host-shareable-types}

Host-shareable types are used to describe the contents of buffers which are shared between
the host and the GPU, or copied between host and GPU without format translation.
When used for this purpose, the type must be additionally decorated with layout attributes
as described in [[#memory-layouts]].
We will see in [[#module-scope-variables]] that the [=store type=] of [=uniform buffer=] and [=storage buffer=]
variables must be host-shareable.

A type is <dfn dfn noexport>host-shareable</dfn> if it is one of:

* a [=numeric scalar=] type
* a [=numeric vector=] type
* a [=matrix=] type
* an [=atomic type|atomic=] type
* an [=array=] type, if its element type is host-shareable
* a [=structure=] type, if all its members are host-shareable

[SHORTNAME] defines the following attributes that affect memory layouts:
 * [=attribute/stride=]
 * [=attribute/align=]
 * [=attribute/size=]

Note: An [=IO-shareable=] type *T* would also be host-shareable if *T* and its subtypes have
appropriate [=stride=] attributes, and if *T* is not [=bool=] and does not contain a [=bool=].
Additionally, a [=runtime-sized=] array is host-shareable but is not IO-shareable.

Note: Both IO-shareable and host-shareable types have concrete sizes, but counted differently.
IO-shareable types are sized by a location-count metric, see [[#input-output-locations]].
Host-shareable types are sized by a byte-count metric, see [[#memory-layouts]].

### Storage Classes ### {#storage-class}

Memory locations are partitioned into <dfn noexport>storage classes</dfn>.
Each storage class has unique properties determining
mutability, visibility, the values it may contain,
and how to use variables with it.

<table class='data'>
  <caption>Storage Classes</caption>
  <thead>
    <tr><th>Storage class
        <th>Readable by shader?<br>Writable by shader?
        <th>Sharing among invocations
        <th>Variable scope
        <th>Restrictions on stored values
        <th>Notes
  </thead>
  <tr><td><dfn noexport dfn-for="storage classes">function</dfn>
      <td>Read-write
      <td>Same invocation only
      <td>[=Function scope=]
      <td>[=Atomic-free=] [=plain type=]
      <td>
  <tr><td><dfn noexport dfn-for="storage classes">private</dfn>
      <td>Read-write
      <td>Same invocation only
      <td>[=Module scope=]
      <td>[=Atomic-free=] [=plain type=]
      <td>
  <tr><td><dfn noexport dfn-for="storage classes">workgroup</dfn>
      <td>Read-write
      <td>Invocations in the same [=compute shader stage|compute shader=] [=compute shader stage/workgroup=]
      <td>[=Module scope=]
      <td>[=Storable=] types, except for texture and [=sampler=] types
      <td>
  <tr><td><dfn noexport dfn-for="storage classes">uniform</dfn>
      <td>Read-only
      <td>Invocations in the same [=shader stage=]
      <td>[=Module scope=]
      <td>[=Atomic-free=] [=host-shareable=] types
      <td>For [=uniform buffer=] variables
  <tr><td><dfn noexport dfn-for="storage classes">storage</dfn>
      <td>Readable.<br>
          Also writable if the variable is not read-only.
      <td>Invocations in the same [=shader stage=]
      <td>[=Module scope=]
      <td>[=Host-shareable=]
      <td>For [=storage buffer=] variables
  <tr><td><dfn noexport dfn-for="storage classes">handle</dfn>
      <td>Read-only
      <td>Invocations in the same shader stage
      <td>[=Module scope=]
      <td>[=Sampler=] types or [=texture=] types
      <td>Used for sampler and texture variables<br>
          The token `handle` is reserved: it is never used in a [SHORTNAME] program.
</table>

Issue: The note about read-only [=storage classes/storage=] variables may change depending
on the outcome of https://github.com/gpuweb/gpuweb/issues/935

<pre class='def'>
storage_class
  : IN
  | OUT
  | FUNCTION
  | PRIVATE
  | WORKGROUP
  | UNIFORM
  | STORAGE
</pre>

<table class='data'>
  <thead>
    <tr><th>WGSL storage class<th>SPIR-V storage class
  </thead>
  <tr><td>uniform<td>Uniform
  <tr><td>workgroup<td>Workgroup
  <tr><td>handle<td>UniformConstant
  <tr><td>storage<td>StorageBuffer
  <tr><td>private<td>Private
  <tr><td>function<td>Function
</table>


### Memory Layout ### {#memory-layouts}

[=Uniform buffer=] and [=storage buffer=] variables are used to share
bulk data organized as a sequence of bytes in memory.
Buffers are shared between the CPU and the GPU, or between different shader stages
in a pipeline, or between different pipelines.

Because buffer data are shared without reformatting or translation,
buffer producers and consumers must agree on the <dfn noexport>memory layout</dfn>,
which is the description of how the bytes in a buffer are organized into typed [SHORTNAME] values.

The [=store type=] of a buffer variable must be [=host-shareable=], with fully elaborated memory layout, as described below.

Each buffer variable must be declared in either the [=storage classes/uniform=] or [=storage classes/storage=] storage classes.

The memory layout of a type is significant only when evaluating an expression with:
* a variable in the [=storage classes/uniform=] or [=storage classes/storage=] storage class, or
* a pointer into the [=storage classes/uniform=] or [=storage classes/storage=] storage class.

An 8-bit byte is the most basic unit of [=host-shareable=] memory.
The terms defined in this section express counts of 8-bit bytes.

We will use the following notation:
* <dfn noexport>AlignOf</dfn>(|T|) is the alignment of host-shareable type |T|.
* AlignOf(|S|, |M|) is the alignment of member |M| of the host-shareable structure |S|.
* <dfn noexport>SizeOf</dfn>(|T|) is the size of host-shareable type |T|.
* SizeOf(|S|, |M|) is the size of member |M| of the host-shareable structure |S|.
* <dfn noexport>StrideOf</dfn>(|A|) is the element stride of host-shareable array type |A|.
* <dfn noexport>OffsetOf</dfn>(|S|, |M|) is the offset of member |M| from the start of the host-shareable structure |S|.


#### Alignment and Size ####  {#alignment-and-size}

Each [=host-shareable=] data type has a default alignment and size value.
The alignment and size values for a given structure member can differ from the
defaults if the [=attribute/align=] and / or [=attribute/size=] decorations are used.

Alignment guarantees that a value's address in memory will be a multiple of the
specified value. This can enable more efficient hardware instructions to be used
to access the value or satisfy more restrictive hardware requirements on certain
storage classes (see [storage class constraints](#storage-class-constraints)).

Note: Each alignment value is always a power of two, by construction.

The size of a type or structure member is the number of contiguous bytes
reserved in host-shareable memory for the purpose of storing a value of the type
or structure member.
The size may include non-addressable padding at the end of the type.
Consequently, loads and stores of a value might access fewer memory locations
than the value's size.

Alignment and size for host-shareable types are defined recursively in the
following table:

<table class='data'>
  <caption>
    Default alignment and size for host-shareable types<br>
  </caption>
  <thead>
    <tr><th>Host-shareable type |T|
        <th>[=AlignOf=](|T|)
        <th>[=SizeOf=](|T|)
  </thead>
  <tr><td>[=i32=], [=u32=], or [=f32=]
      <td>4
      <td>4
  <tr><td>vec2&lt;|T|&gt;
      <td>8
      <td>8
  <tr><td>vec3&lt;|T|&gt;
      <td>16
      <td>12
  <tr><td>vec4&lt;|T|&gt;
      <td>16
      <td>16
  <tr><td>mat|N|x|M| (col-major)<br>
      <p class="small">(General form)</p>
      <td>[=AlignOf=](vec|M|)
      <td>[=SizeOf=](array&lt;vec|M|, |N|&gt;)
  <tr><td>mat2x2&lt;f32&gt;
      <td>8
      <td>16
  <tr><td>mat3x2&lt;f32&gt;
      <td>8
      <td>24
  <tr><td>mat4x2&lt;f32&gt;
      <td>8
      <td>32
  <tr><td>mat2x3&lt;f32&gt;
      <td>16
      <td>32
  <tr><td>mat3x3&lt;f32&gt;
      <td>16
      <td>48
  <tr><td>mat4x3&lt;f32&gt;
      <td>16
      <td>64
  <tr><td>mat2x4&lt;f32&gt;
      <td>16
      <td>32
  <tr><td>mat3x4&lt;f32&gt;
      <td>16
      <td>48
  <tr><td>mat4x4&lt;f32&gt;
      <td>16
      <td>64
  <tr><td>struct |S|
      <td>max([=AlignOf=](S, M<sub>1</sub>), ... , [=AlignOf=](S, M<sub>n</sub>))<br>
      <td>[=roundUp=]([=AlignOf=](|S|), [=OffsetOf=](|S|, |L|) + [=SizeOf=](|S|, |L|))<br><br>
          Where |L| is the last member of the structure
  <tr><td>array<|E|, |N|><br>
      <p class="small">(Implicit stride)</p>
      <td>[=AlignOf=](|E|)
      <td>|N| * [=roundUp=]([=AlignOf=](|E|), [=SizeOf=](|E|))
  <tr><td>array<|E|><br>
      <p class="small">(Implicit stride)</p>
      <td>[=AlignOf=](|E|)
      <td>N<sub>runtime</sub> * [=roundUp=]([=AlignOf=](|E|), [=SizeOf=](|E|))<br><br>
          Where N<sub>runtime</sub> is the runtime-determined number of elements of |T|
  <tr><td>[[[=stride=](|Q|)]]<br> array<|E|, |N|>
      <td>[=AlignOf=](|E|)
      <td>|N| * |Q|
  <tr><td>[[[=stride=](|Q|)]]<br> array<|E|>
      <td>[=AlignOf=](|E|)
      <td>N<sub>runtime</sub> * |Q|
  <tr><td>atomic<|T|>
      <td>[=AlignOf=](|T|)
      <td>[=SizeOf=](|T|)
</table>


#### Structure Layout Rules ####  {#structure-layout-rules}

Each structure member has a default size and alignment value. These values are
used to calculate each member's byte offset from the start of the structure.

Structure members will use their type's size and alignment, unless the
structure member is explicitly annotated with [=attribute/size=] and / or
[=attribute/align=].  decorations, in which case those member decorations take
precedence.

The first structure member always has a zero byte offset from the start of the
structure.

Subsequent members have the following byte offset from the start of the structure:
<p algorithm="structure member offset">
  [=OffsetOf=](|S|, M<sub>N</sub>) = [=roundUp=]([=AlignOf=](|S|, M<sub>N</sub>), [=OffsetOf=](|S|, M<sub>N-1</sub>) + [=SizeOf=](|S|, M<sub>N-1</sub>)<br>
  Where M<sub>N</sub> is the current member and M<sub>N-1</sub> is the previous member
</p>

Structure members must not overlap. If a structure member is decorated with the
[=attribute/size=] attribute, the value must be at least as large as the
default size of the member's type.

The alignment of a structure is equal to the largest alignment of all of its
members:
<p algorithm="structure alignment">
  [=AlignOf=](|S|) = max([=AlignOf=](|S|, M<sub>1</sub>), ... , [=AlignOf=](|S|, M<sub>N</sub>))
</p>

The size of a structure is equal to the offset plus the size of its last member,
rounded to the next multiple of the structure's alignment:
<p algorithm="structure size">
  [=SizeOf=](|S|) = [=roundUp=]([=AlignOf=](|S|), [=OffsetOf=](|S|, |L|) + [=SizeOf=](|S|, |L|))<br>
  Where |L| is the last member of the structure
</p>

<div class='example wgsl' heading='Layout of structures using implicit member sizes, alignments and strides'>
  <xmp highlight='rust'>
    struct A {                                     //             align(8)  size(24)
        u : f32;                                   // offset(0)   align(4)  size(4)
        v : f32;                                   // offset(4)   align(4)  size(4)
        w : vec2<f32>;                             // offset(8)   align(8)  size(8)
        x : f32;                                   // offset(16)  align(4)  size(4)
        // -- implicit struct size padding --      // offset(20)            size(4)
    };

    [[block]] struct B {                           //             align(16) size(160)
        a : vec2<f32>;                             // offset(0)   align(8)  size(8)
        // -- implicit member alignment padding -- // offset(8)             size(8)
        b : vec3<f32>;                             // offset(16)  align(16) size(12)
        c : f32;                                   // offset(28)  align(4)  size(4)
        d : f32;                                   // offset(32)  align(4)  size(4)
        // -- implicit member alignment padding -- // offset(36)            size(12)
        e : A;                                     // offset(40)  align(8)  size(24)
        f : vec3<f32>;                             // offset(64)  align(16) size(12)
        // -- implicit member alignment padding -- // offset(76)            size(4)
        g : array<A, 3>;                           // offset(80)  align(8)  size(72) stride(24)
        h : i32;                                   // offset(152) align(4)  size(4)
        // -- implicit struct size padding --      // offset(156)           size(4)
    };

    [[group(0), binding(0)]]
    var<storage> storage_buffer : [[access(read_write)]] B;
  </xmp>
</div>

<div class='example wgsl' heading='Layout of structures with explicit member sizes, alignments and strides'>
  <xmp highlight='rust'>
    struct A {                                     //             align(8)  size(32)
        u : f32;                                   // offset(0)   align(4)  size(4)
        v : f32;                                   // offset(4)   align(4)  size(4)
        w : vec2<f32>;                             // offset(8)   align(8)  size(8)
       [[size(16)]] x: f32;                        // offset(16)  align(4)  size(16)
    };

    [[block]] struct B {                           //             align(16) size(208)
        a : vec2<f32>;                             // offset(0)   align(8)  size(8)
        // -- implicit member alignment padding -- // offset(8)             size(8)
        b : vec3<f32>;                             // offset(16)  align(16) size(12)
        c : f32;                                   // offset(28)  align(4)  size(4)
        d : f32;                                   // offset(32)  align(4)  size(4)
        // -- implicit member alignment padding -- // offset(36)            size(12)
        [[align(16)]] e : A;                       // offset(48)  align(16) size(32)
        f : vec3<f32>;                             // offset(80)  align(16) size(12)
        // -- implicit member alignment padding -- // offset(92)            size(4)
        g : [[stride(32)]] array<A, 3>;            // offset(96)  align(8)  size(96)
        h : i32;                                   // offset(192) align(4)  size(4)
        // -- implicit struct size padding --      // offset(196)           size(12)
    };

    [[group(0), binding(0)]]
    var<uniform> uniform_buffer : B;
  </xmp>
</div>

#### Array Layout Rules ####  {#array-layout-rules}

An array element stride is the number of bytes from the start of one array
element to the start of the next element.

The first array element always has a zero byte offset from the start of the
array.

If the array type is annotated with an explicit [=stride=] decoration then this
will be used as the array stride, otherwise the array uses an implicit stride
equal to the size of the array's element type, rounded up to the alignment of
the element type:

<p algorithm="array implicit element stride">
  [=StrideOf=](array<|T|[, |N|]>) = [=roundUp=]([=AlignOf=](T), [=SizeOf=](T))
</p>

In all cases, the array stride must be a multiple of the element alignment.

<div class='example wgsl' heading='Implicit / explicit array strides'>
  <xmp highlight='rust'>
    // Array with an implicit element stride of 16 bytes
    var implicit_stride : array<vec3<f32>, 8>;

    // Array with an explicit element stride of 32 bytes
    var explicit_stride : [[stride(32)]] array<vec3<f32>, 8>;
  </xmp>
</div>

Arrays decorated with the [=stride=] attribute must have a stride that is at
least the size of the element type, and be a multiple of the element type's
alignment value.

The array size is equal to the element stride multiplied by the number of
elements:
<p algorithm="array stride">
  [=SizeOf=](array<|T|, |N|>) = [=StrideOf=](array<|T|, |N|>) &times; |N|<br>
  [=SizeOf=](array<|T|>) = [=StrideOf=](array<|T|>) &times; N<sub>runtime</sub>
</p>

The array alignment is equal to the element alignment:
<p algorithm="array alignment">
  [=AlignOf=](array<|T|[, N]>) = [=AlignOf=](|T|)
</p>

For example, the layout for a `[[stride(S)]] array<T, 3>` type is equivalent to
the following structure:

<div class='example wgsl global-scope' heading='Structure equivalent of a three element array'>
  <xmp highlight='rust'>
    struct Array {
      [[size(S)]] element_0 : T;
      [[size(S)]] element_1 : T;
      [[size(S)]] element_2 : T;
    };
  </xmp>
</div>

#### Internal Layout of Values ####  {#internal-value-layout}

This section describes how the internals of a value are placed in the byte locations
of a buffer, given an assumed placement of the overall value.
These layouts depend on the value's type, the [=attribute/stride=] attribute on
array types, and the [=attribute/align=] and [=attribute/size=] attributes on
structure type members.

The data will appear identically regardless of storage class.

When a value |V| of type [=u32=] or [=i32=] is placed at byte offset |k| of a
host-shared buffer, then:
   * Byte |k| contains bits 0 through 7 of |V|
   * Byte |k|+1 contains bits 8 through 15 of |V|
   * Byte |k|+2 contains bits 16 through 23 of |V|
   * Byte |k|+3 contains bits 24 through 31 of |V|

Note: Recall that [=i32=] uses twos-complement representation, so the sign bit
is in bit position 31.

A value |V| of type [=f32=] is represented in IEEE 754 binary32 format.
It has one sign bit, 8 exponent bits, and 23 fraction bits.
When |V| is placed at byte offset |k| of host-shared buffer, then:
   * Byte |k| contains bits 0 through 7 of the fraction.
   * Byte |k|+1 contains bits 8 through 15 of the fraction.
   * Bits 0 through 6 of byte |k|+2 contain bits 16 through 23 of the fraction.
   * Bit 7 of byte |k|+2 contains bit 0 bit of the exponent.
   * Bits 0 through 6 of byte |k|+3 contain bits 1 through 7 of the exponent.
   * Bit 7 of byte |k|+3 contains the sign bit.

Note: The above rules imply that numeric values in host-shared buffers
are stored in little-endian format.

When a value |V| of vector type vec|N|&lt;|T|&gt; is placed at
byte offset |k| of a host-shared buffer, then:
   * |V|.x is placed at byte offset |k|
   * |V|.y is placed at byte offset |k|+4
   * If |N| &ge; 3, then |V|.z is placed at byte offset |k|+8
   * If |N| &ge; 4, then |V|.w is placed at byte offset |k|+12

When a matrix value |M| is placed at byte offset |k| of a host-shared memory buffer, then:
   * If |M| has 2 rows, then:
      * Column vector |i| of |M| is placed at byte offset |k| + 8 &times; |i|
   * If |M| has 3 or 4 rows, then:
      * Column vector |i| of |M| is placed at byte offset |k| + 16 &times; |i|

When a value of array type |A| is placed at byte offset |k| of a host-shared memory buffer,
then:
   * Element |i| of the array is placed at byte offset |k| + |i| &times; |Stride|(|A|)

When a value of structure type |S| is placed at byte offset |k| of a host-shared memory buffer,
then:
   * The |i|'<sup>th</sup> member of the structure value is placed at byte offset |k| + [=OffsetOf=](|S|,|i|)


#### Storage Class Constraints ####  {#storage-class-constraints}

The [=storage classes/storage=] and [=storage classes/uniform=] storage classes
have different buffer layout constraints which are described in this section.

All structure and array types directly or indirectly referenced by a variable
must obey the constraints of the variable's storage class.
Violations of a storage class constraint result in a compile-time error.

In this section we define <dfn noexport>RequiredAlignOf</dfn>(|S|, |C|) as the
required alignment of host-shareable type |S| when used by storage class |C|.

<table class='data'>
  <caption>
    Alignment requirements of a host-shareable type for
    [=storage classes/storage=] and [=storage classes/uniform=] storage classes
  </caption>
  <thead>
    <tr><th>Host-shareable type |S|
        <th>[=RequiredAlignOf=](|S|, [=storage classes/storage=])
        <th>[=RequiredAlignOf=](|S|, [=storage classes/uniform=])
  </thead>
  <tr><td>[=i32=], [=u32=], or [=f32=]
      <td>[=AlignOf=](|S|)
      <td>[=AlignOf=](|S|)
  <tr><td>vec|N|&lt;`T`&gt;
      <td>[=AlignOf=](|S|)
      <td>[=AlignOf=](|S|)
  <tr algorithm="alignment of a matrix with N columns and M rows">
      <td>mat|N|x|M|&lt;f32&gt;
      <td>[=AlignOf=](|S|)
      <td>[=AlignOf=](|S|)
  <tr algorithm="alignment of an array">
      <td>array<|T|,|N|>
      <td>[=AlignOf=](|T|)
      <td>[=roundUp=](16, [=AlignOf=](|T|))
  <tr algorithm="alignment of an runtime-sized array">
      <td>array<|T|>
      <td>[=AlignOf=](|T|)
      <td>[=roundUp=](16, [=AlignOf=](|T|))
  <tr algorithm="alignment of a structure">
      <td>struct&lt;T<sub>0</sub>, ..., T<sub>N</sub>&gt;
      <td>max([=AlignOf=](T<sub>0</sub>), ..., [=AlignOf=](T<sub>N</sub>))
      <td>[=roundUp=](16, max([=AlignOf=](T<sub>0</sub>), ..., [=AlignOf=](T<sub>N</sub>)))<br>
  <tr><td>atomic<|T|>
      <td>[=AlignOf=](|T|)
      <td>[=AlignOf=](|T|)
</table>

All structure members of type |T| must have a byte offset from the start of the
structure that is a multiple of the [=RequiredAlignOf=](|T|, |C|) for the storage
class |C|:

<p algorithm="structure member minimum alignment">
    [=OffsetOf=](|S|, |M|) = |k| &times; [=RequiredAlignOf=](|T|, C)<br>
    Where |k| is a non-negative integer and |M| is a member of structure |S| with type |T|
</p>

All arrays of element type |T| must have an element [=stride=] that is a
multiple of [=RequiredAlignOf=](|T|, |C|) for the storage class |C|:

<p algorithm="array element minimum alignment">
    [=StrideOf=](array<|T|[, |N|]>) = |k| &times; [=RequiredAlignOf=](|T|, C)<br>
    Where |k| is a non-negative integer
</p>


The [=storage classes/uniform=] storage class also requires that:

* Array elements are aligned to 16 byte boundaries.

Note: When underlying the target is a Vulkan device, we assume the device does
not support the `scalarBlockLayout` feature.
Therefore, a data value must not be placed in the padding at the end of a structure or matrix,
nor in the padding at the last element of an array.
Counting such padding as part of the size allows [SHORTNAME] to capture this constraint.

## Memory View Types ## {#memory-view-types}

In addition to calculating with [=plain types|plain=] values, a [SHORTNAME] program will
also often read values from memory or write values to memory.
Operations that read or write to memory are called <dfn noexport>memory accesses</dfn>.
Each memory access is performed via a [=memory view=].

A <dfn noexport>memory view</dfn> is a set of [=memory locations=] in a particular [=storage class=],
together with an interpretation of the contents of those locations as a [SHORTNAME] [=type=].


[SHORTNAME] has two kinds of types for representing memory views:
[=reference types=] and [=pointer types=].

<table class='data'>
  <thead>
    <tr><th>Constraint<th>Type<th>Description
  </thead>
  <tr algorithm="memory reference type">
    <td>|SC| is a [=storage class=],<br>|T| is a [=storable=] type
    <td>ref&lt;|SC|,|T|&gt;
    <td>The <dfn noexport>reference type</dfn>
        identified with the set of [=memory views=] for memory locations in |SC| holding values of type |T|.<br>
        In this context |T| is known as the <dfn noexport>store type</dfn>.<br>
        Reference types are not written [SHORTNAME] progam source; instead they are used to analyze a [SHORTNAME] program.
  <tr algorithm="pointer type">
    <td>|SC| is a [=storage class=],<br>|T| is a [=storable=] type
    <td>ptr&lt;|SC|,|T|&gt;
    <td>The <dfn noexport>pointer type</dfn> 
        identified with the set of [=memory views=] for memory locations in |SC| holding values of type |T|.<br>
        In this context |T| is known as the <dfn noexport>pointee type</dfn>.<br>
        Pointer types appear in [SHORTNAME] progam source.
</table>

<div class='example wgsl' heading='Pointer type (program fragment)'>
  <xmp highlight='rust'>
    fn my_function(
      // 'ptr<function,i32>' is the type of a pointer value that references storage
      // for keeping an 'i32' value, using memory locations in the 'function' storage
      // class.  Here 'i32' is the pointee type.
      ptr_int: ptr<function,i32>,

      // 'ptr<private,array<f32,50>>' is the type of a pointer value that refers to
      // storage for keeping an array of 50 elements of type 'f32', using memory
      // locations in the 'private' storage class.
      // Here the pointee type is 'array<f32,50>'.
      ptr_array: ptr<private, array<f32, 50>>
    ) { }
  </xmp>
</div>

Reference types and pointer types are both sets of memory views:
a particular memory view is associated with a unique reference value and also a unique pointer value:

<blockquote algorithm="pointer reference correspondence">
Each pointer value |p| of type ptr&lt;|SC|,|T|&gt; corresponds to a unique reference value |r| of type ref&lt;|SC|,|T|&gt;,
and vice versa,
where |p| and |r| describe the same memory view.
</blockquote>

In [SHORTNAME] a reference value always corresponds to the memory view
for some or all of the memory locations for some variable.
This defines the <dfn noexport>originating variable</dfn> for the reference value.
A pointer value always corresponds to a reference value, and so the originating variable
of a pointer is the same as the originating variable of the corresponding reference.

Note: The originating variable is a dynamic concept.
The originating variable for a formal parameter of a function depends on the
[=call site|call sites=] for the function.
Different call sites may supply pointers into different originating variables.

References and pointers are distinguished by how they are used:

* The type of a [=variable=] is a reference type.
* The [=address-of=] operation (unary `&`) converts a reference value to its corresponding pointer value.
* The [=indirection=] operation (unary `*`) converts a pointer value to its corresponding reference value.
* A const declaration can be of pointer type, but not of reference type.
* A [=formal parameter=] can be of pointer type, but not of reference type.
* An [=assignment statement=] updates the contents of memory via a reference:
    * The left-hand side of the assignment statement must be of reference type.
    * The right-hand side of the assignment statement must evaluate to the store type of the left-hand side.
* The <dfn noexport>Load Rule</dfn>: Inside a function, a reference is automatically dereferenced (read from) to satisfy type rules:
    * In a function, when a reference expression |r| with store type |T| is used in a statement or an expression, where
    * The only potentially matching type rules require |r| to have a value of type |T|, then
    * That type rule requirement is considered to have been met, and
    * The result of evaluating |r| in that context is the value (of type |T|) stored in the memory locations
        referenced by |r| at the time of evaluation.

Defining references in this way enables simple idiomatic use of variables:

<div class='example wgsl' heading='Reference types enable simple use of variables'>
  <xmp highlight='rust'>
    [[stage(compute)]]
    fn main() {
      // 'i' has reference type ref<function,i32>
      // The memory locations for 'i' store the i32 value 0.
      var i: i32 = 0;

      // 'i + 1' can only match a type rule where the 'i' subexpression is of type i32.
      // So the expression 'i + 1' has type i32, and at evaluation, the 'i' subexpression
      // evaluates to the i32 value stored in the memory locations for 'i' at the time
      // of evaluation.
      const one: i32 = i + 1;

      // Update the value in the locations referenced by 'i' so they hold the value 2.
      i = one + 1;

      // Update the value in the locations referenced by 'i' so they hold the value 5.
      // The evaluation of the right-hand-side occurs before the assignment takes effect.
      i = i + 3;
    }
  </xmp>
</div>

<div class='example wgsl' heading='Returning a reference returns the value loaded via the reference'>
  <xmp highlight='rust'>
    var<private> age: i32;
    fn get_age() -> i32 {
      // The type of the expression in the return statement must be 'i32' since it
      // must match the declared return type of the function.
      // The 'age' expression is of type ref<private,i32>.
      // Apply the Load Rule, since the store type of the reference matches the
      // required type of the expression, and no other type rule applies.
      // The evaluation of 'age' in this context is the i32 value loaded from the
      // memory locations referenced by 'age' at the time the return statement is
      // executed.
      return age;
    }

    fn caller() {
      age = 21;
      // The copy_age constant will get the i32 value 21.
      const copy_age: i32 = get_age();
    }
  </xmp>
</div>

Defining pointers in this way enables two key use cases:

* Using a const declaration with pointer type, to form a short name for part of the contents of a variable.
* Using a formal parameter of a function to refer to the storage of a variable that is accessible to the calling function.
    * The call to such a function must supply a pointer value for that operand.
        This often requires using the unary `&` operation to get a pointer to the variable's contents.

Note: The following examples use [SHORTNAME] features explained later in this specification.

<div class='example wgsl' heading='Using a pointer as a short name for part of a variable'>
  <xmp highlight='rust'>
    struct Particle {
      position: vec3<f32>;
      velocity: vec3<f32>;
    };
    [[block]] struct System {
      active_index: i32;
      timestep: f32;
      particles: array<Particle,100>;
    };
    [[group(0), binding(0)]] var<storage> system: [[access(read_write)]] System;

    [[stage(compute)]]
    fn main() {
      // Form a pointer to a specific Particle in storage memory.
      const active_particle: ptr<storage,Particle> =
          &system.particles[system.active_index];

      const delta_position: vec3<f32> = (*active_particle).velocity * system.timestep;
      const current_position: vec3<f32>  = (*active_particle).position;
      (*active_particle).position = delta_position + current_position;
    }
  </xmp>
</div>

<div class='example wgsl' heading='Using a pointer as a formal parameter'>
  <xmp highlight='rust'>
    fn add_one(x: ptr<function,i32>) {
      // Update the locations for 'x' to contain the next higher integer value,
      // (or to wrap around to the largest negative i32 value).
      // On the left-hand side, unary '*' converts the pointer to a reference that
      // can then be assigned to.
      // On the right-hand side:
      //    - Unary '*' converts the pointer to a reference
      //    - The only matching type rule is for addition (+) and requires '*x' to
      //      have type i32, which is the store type for '*x'.  So the Load Rule
      //      applies and '*x' evaluates to the value stored in the memory for '*x'
      //      at the time of evaluation, which is the i32 value for 0.
      //    - Add 1 to 0, to produce a final value of 1 for the right-hand side.
      // Store 1 into the memory for '*x'.
      *x = *x + 1;
    }

    [[stage(compute)]]
    fn main() {
      var i: i32 = 0;

      // Modify the contents of 'i' so it will contain 1.
      // Use unary '&' to get a pointer value for 'i'.
      // This is a clear signal that the called function has access to the storage
      // for 'i', and may modify it.
      add_one(&i);
      const one: i32 = i;  // 'one' has value 1.
    }
  </xmp>
</div>

### Forming reference and pointer values ### {#forming-references-and-pointers}

A reference value is formed in one of the following ways:

* The identifer [=resolves|resolving=] to an [=in scope|in-scope=] variable *v* denotes the reference value for *v*'s storage.
    * The resolved variable is the [=originating variable=] for the reference.
* Use the [=indirection=] (unary `*`) operation on a pointer.
    * The originating variable of the result is defined as the originating variable of the pointer.
* Use a <dfn noexport>composite reference component expression</dfn>.
    In each case the originating variable of the result is defined as the originating variable of the
    original reference.
    * Given a reference with a vector store type, appending a single-letter vector access phrase
        results in a reference to the named component of the vector.
        See [[#component-reference-from-vector-reference]].
    * Given a reference with a vector store type, appending an array index access phrase
        results in a reference to the indexed component of the vector.
        See [[#component-reference-from-vector-reference]].
    * Given a reference with a matrix store type, appending an array index access phrase
        results in a reference to the indexed column vector of the matrix.
        See [[#matrix-access-expr]].
    * Given a reference with an array store type, appending an array index access phrase
        results in a reference to the indexed element of the array.
        See [[#array-access-expr]].
    * Given a reference with a structure store type, appending a member access phrase
        results in a reference to the named member of the structure.
        See [[#struct-access-expr]].

<div class='example wgsl' heading='Component reference from a composite reference'>
  <xmp highlight='rust'>
    struct S {
        age: i32;
        weight: f32;
    };
    var<private> person : S;

    fn f() {
        var uv: vec2<f32>;
        // Evaluate the left-hand side of the assignment:
        //   Evaluate 'uv.x' to yield a reference:
        //   1. First evaluate 'uv', yielding a reference to the storage for
        //      the 'uv' variable. The result has type ref<function,vec2<f32>>.
        //   2. Then apply the '.x' vector access phrase, yielding a reference to
        //      the storage for the first component of the vector pointed at by the
        //      reference value from the previous step.
        //      The result has type ref<function,f32>.
        // Evaluating the right-hand side of the assignment yields the f32 value 1.0.
        // Store the f32 value 1.0 into the storage memory locations referenced by uv.x.
        uv.x = 1.0;

        // Evaluate the left-hand side of the assignment:
        //   Evaluate 'uv[1]' to yield a reference:
        //   1. First evaluate 'uv', yielding a reference to the storage for
        //      the 'uv' variable. The result has type ref<function,vec2<f32>>.
        //   2. Then apply the '[1]' array index phrase, yielding a reference to
        //      the storage for second component of the vector referenced from
        //      the previous step.  The result has type ref<function,f32>.
        // Evaluating the right-hand side of the assignment yields the f32 value 2.0.
        // Store the f32 value 2.0 into the storage memory locations referenced by uv[1].
        uv[1] = 2.0;

        var m: mat3x2<f32>;
        // When evaluating 'm[2]':
        // 1. First evaluate 'm', yielding a reference to the storage for
        //    the 'm' variable. The result has type ref<function,mat3x2<f32>>.
        // 2. Then apply the '[2]' array index phrase, yielding a reference to
        //    the storage for the third column vector pointed at by the reference
        //    value from the previous step.
        //    Therefore the 'm[2]' expression has type ref<function,vec2<f32>>.
        // The 'const' declaration is for type vec2<f32>, so the declaration
        // statement requires the initializer to be of type vec2<f32>.
        // The Load Rule applies (because no other type rule can apply), and
        // the evaluation of the initializer yields the vec2<f32> value loaded
        // from the memory locations referenced by 'm[2]' at the time the declaration
        // is executed.
        const p_m_col2: vec2<f32> = m[2];

        var A: array<i32,5>;
        // When evaluating 'A[4]'
        // 1. First evaluate 'A', yielding a reference to the storage for
        //    the 'A' variable. The result has type ptr<function,array<i32,5>>.
        // 2. Then apply the '[4]' array index phrase, yielding a reference to
        //    the storage for the fifth element of the array referenced by
        //    the reference value from the previous step.
        //    The result value has type ref<function,i32>.
        // The const declaration requires the right-hand-side to be of type i32.
        // The Load Rule applies (because no other type rule can apply), and
        // the evaluation of the initializer yields the i32 value loaded from
        // the memory locations referenced by 'A[5]' at the time the declaration
        // is executed.
        const A_4_value: i32 = A[4];

        // When evaluating 'person.weight'
        // 1. First evaluate 'person', yielding a reference to the storage for
        //    the 'person' variable declared at module scope.
        //    The result has type ref<private,S>.
        // 2. Then apply the '.weight' member access phrase, yielding a reference to
        //    the storage for the second member of the memory referenced by
        //    the reference value from the previous step.
        //    The result has type ref<private,f32>.
        // The const declaration requires the right-hand-side to be of type f32.
        // The Load Rule applies (because no other type rule can apply), and
        // the evaluation of the initializer yields the f32 value loaded from
        // the memory locations referenced by 'person.weight' at the time the
        // declaration is executed.
        const person_weight: f32 = person.weight;
    }
  </xmp>
</div>

A pointer value is formed in one of the following ways:

* Use the [=address-of=] (unary '&') operator on a reference.
    * The originating variable of the result is defined as the originating variable of the reference.
* If a function [=formal parameter=] has pointer type, then when the function is invoked
    at runtime the uses of the formal parameter denote the pointer value
    provided to the corresponding operand at the [=call site=] in the calling function.
    * The originating variable of the formal parameter (at runtime) is defined as
        the originating variable of the pointer operand at the call site.

<div class='example wgsl' heading='Pointer from a variable'>
  <xmp highlight='rust'>
    // Declare a variable in the private storage class, for storing an f32 value.
    var<private> x: f32;

    fn f() {
        // Declare a variable in the function storage class, for storing an i32 value.
        var y: i32;

        // The name 'x' resolves to the module-scope variable 'x',
        // and has reference type ref<private,f32>.
        // Applying the unary '&' operator converts the reference to a pointer.
        const x_ptr: ptr<private,f32> = &x;

        // The name 'y' resolves to the function-scope variable 'y',
        // and has reference type ref<private,i32>.
        // Applying the unary '&' operator converts the reference to a pointer.
        const y_ptr: ptr<function,i32> = &y;

        // A new variable, distinct from the variable declared at module scope.
        var x: u32;

        // Here, the name 'x' resolves to the function-scope variable 'x' declared in
        // the previous statement, and has type ref<function,u32>.
        // Applying the unary '&' operator converts the reference to a pointer.
        const inner_x_ptr: ptr<function,u32> = &x;
    }
  </xmp>
</div>


### Comparison with references and pointers in other languages ### {#pointers-other-languages}

This section is informative, not normative.

References and pointers in [SHORTNAME] are more restricted than in other languages.
In particular:

* In [SHORTNAME] a reference can't directly be declared as an alias to another reference or variable,
    either as a variable or as a formal parameter.
* In [SHORTNAME] pointers and references are not [=storable=].
    That is, the content of a [SHORTNAME] variable may not contain a pointer or a reference.
* In [SHORTNAME] a function must not return a pointer or reference.
* In [SHORTNAME] there is no way to convert between integer values and pointer values.
* In [SHORTNAME] there is no way to forcibly change the type of a pointer value into another pointer type.
    * A composite component reference expression is different:
        it takes a reference to a composite value and yields a reference to
        one of the components or elements inside the composite value.
        These are considered different references in [SHORTNAME], even though they may
        have the same machine address at a lower level of implementation abstraction.
* In [SHORTNAME] there is no way to forcibly change the type of a reference value into another reference type.
* In [SHORTNAME] there is no way to allocate new storage from a "heap".
* In [SHORTNAME] there is no way to explicitly destroy a variable.
    The storage for a [SHORTNAME] variable becomes inaccessible only when the variable goes out of scope.

Note: From the above rules, it is not possible to form a "dangling" pointer,
i.e. a pointer that does not reference the storage for a valid (or "live")
originating variable.

## Texture and Sampler Types ## {#texture-types}

A <dfn noexport>texel</dfn> is a scalar or vector used as the smallest independently accessible element of a [=texture=].
The word *texel* is short for *texture element*.

A <dfn noexport>texture</dfn> is a collection of texels supporting special operations useful for rendering.
In [SHORTNAME], those operations are invoked via texture builtin functions.
See [[#texture-builtin-functions]] for a complete list.

A [SHORTNAME] texture corresponds to a [[WebGPU#gputexture|WebGPU GPUTexture]].

A texture is either arrayed, or non-arrayed:

* A <dfn noexport>non-arrayed texture</dfn> is a grid of texels. Each texel has a unique grid coordinate.
* An <dfn noexport>arrayed texture</dfn> is a homegeneous array of grids of texels.
    In an arrayed texture, each texel is identified with its unique combination of array index and grid coordinate.

A texture has the following features:

: texel format
:: The data in each texel. See [[#texel-formats]]
:  dimensionality
:: The number of dimensions in the grid coordinates, and how the coordinates are interpreted.
    The number of dimensions is 1, 2, or 3.
    In some cases the third coordinate is decomposed so as to specify a cube face and a layer index.
: size
:: The extent of grid coordinates along each dimension
: mipmap levels
:: The mipmap level count is at least 1 for sampled textures, and equal to 1 for storage textures.<br>
    Mip level 0 contains a full size version of the texture.
    Each successive mip level contains a filtered version of the previous mip level
    at half the size (within rounding) of the previous mip level.<br>
    When sampling a texture, an explicit or implicitly-computed level-of-detail is used
    to select the mip levels from which to read texel data.  These are then combined via
    filtering to produce the sampled value.
: arrayed
:: whether the texture is arrayed
: <dfn noexport>array size</dfn>
:: the number of homogeneous grids, if the texture is arrayed

A texture's representation is typically optimized for rendering operations.
To achieve this, many details are hidden from the programmer, including data layouts, data types, and
internal operations that cannot be expressed directly in the shader language.

As a consequence, a shader does not have direct access to the texel storage within a texture variable.
Instead, use texture builtin functions as follows:

* Within the shader:
    * Declare a module-scope variable in the [=storage classes/handle=] storage class,
        where the [=store type=] is one of the texture types described in later sections.
    * Inside a function, call one of the texture builtin functions, and provide
        the texture variable as the first parameter.
* When constructing the WebGPU pipeline, the texture variable's store type and binding
    must be compatible with the corresponding bind group layout entry.

In this way, the set of supported operations for a texture type
is determined by the availability of texture builtin functions accepting that texture type
as the first parameter.

### Texel formats ### {#texel-formats}

In [SHORTNAME], certain texture types are parameterized by texel format.

A <dfn noexport>texel format</dfn> is characterized by:

: <dfn noexport>channels</dfn>
:: Each channel contains a scalar.
    A texel format has up to four channels: `r`, `g`, `b`, and `a`,
    normally corresponding to the concepts of red, green, blue, and alpha channels.
: <dfn noexport>channel format</dfn>
:: The number of bits in the channel, and how those bits are interpreted.

Each texel format in [SHORTNAME] corresponds to a [[WebGPU#enumdef-gputextureformat|WebGPU GPUTextureFormat]]
with the same name.

Only certain texel formats are used in [SHORTNAME] source code.
The channel formats used to define those texel formats are listed in the
<dfn dfn>Channel Formats</dfn> table.
The last column specfies the conversion from the stored channel bits to the value used in the shader.
This is also known as the <dfn noexport>channel transfer function</dfn>, or CTF.

<table class='data'>
  <caption>Channel Formats</caption>
  <thead>
    <tr><th>Channel format
        <th>Number of stored bits
        <th>Interpetation of stored bits
        <th>Shader type<td width="25%">Shader value
(Channel Transfer Function)
  </thead>
  <tr><td>8unorm<td>8<td>unsigned integer |v| &isinv; {0,...,255}<td>f32<td> |v| &div; 255
  <tr><td>8snorm<td>8<td>signed integer |v| &isinv; {-128,...,127}<td>f32<td> max(-1, |v| &div; 127)
  <tr><td>8uint<td>8<td>unsigned integer |v| &isinv; {0,...,255}<td>u32<td> |v| &div; 255
  <tr><td>8sint<td>8<td>signed integer |v| &isinv; {-128,...,127}<td>i32<td> max(-1, |v| &div; 127)
  <tr><td>16uint<td>16<td>unsigned integer |v| &isinv; {0,...,65535}<td>u32<td> |v|
  <tr><td>16sint<td>16<td>signed integer |v| &isinv; {-32768,...,32767}<td>i32<td> |v|
  <tr><td>16float<td>16<td>IEEE 754 16-bit floating point value |v|, with 1 sign bit, 5 exponent bits, 10 mantissa bits<td>f32<td>|v|
  <tr><td>32uint<td>32<td>32-bit unsigned integer value |v|<td>u32<td>|v|
  <tr><td>32sint<td>32<td>32-bit signed integer value |v|<td>i32<td>|v|
  <tr><td>32float<td>32<td>IEEE 754 32-bit floating point value |v|<td>f32<td>|v|
</table>

The texel formats listed in the
<dfn dfn lt="storage-texel-formats">Texel Formats for Storage Textures</dfn> table
correspond to the [[WebGPU#plain-color-formats|WebGPU plain color formats]]
which support the [[WebGPU#dom-gputextureusage-storage|WebGPU STORAGE]] usage.
These texel formats are used to parameterize the storage texture types defined
in [[#texture-storage]].

When the texel format does not have all four channels, then:

* When reading the texel:
    * If the texel format has no green channel, then the second component of the shader value is 0.
    * If the texel format has no blue channel, then the third component of the shader value is 0.
    * If the texel format has no alpha channel, then the fourth component of the shader value is 1.
* When writing the texel, shader value components for missing channels are ignored.

The last column in the table below uses the format-specific
[=channel transfer function=] from the [=channel formats=] table.

<table class='data'>
  <caption>Texel Formats for Storage Textures</caption>
  <thead>
    <tr><th>Texel format
        <th>Channel format
        <th>Channels in memory order
        <th width="50%">Corresponding shader value
  </thead>
  <tr><td>rgba8unorm<td>8unorm<td>r, g, b, a<td>vec4&lt;f32&gt;(CTF(r), CTF(g), CTF(b), CTF(a))
  <tr><td>rgba8snorm<td>8snorm<td>r, g, b, a<td>vec4&lt;f32&gt;(CTF(r), CTF(g), CTF(b), CTF(a))
  <tr><td>rgba8uint<td>8uint<td>r, g, b, a<td>vec4&lt;u32&gt;(CTF(r), CTF(g), CTF(b), CTF(a))
  <tr><td>rgba8sint<td>8sint<td>r, g, b, a<td>vec4&lt;i32&gt;(CTF(r), CTF(g), CTF(b), CTF(a))
  <tr><td>rgba16uint<td>16uint<td>r, g, b, a<td>vec4&lt;u32&gt;(CTF(r), CTF(g), CTF(b), CTF(a))
  <tr><td>rgba16sint<td>16sint<td>r, g, b, a<td>vec4&lt;i32&gt;(CTF(r), CTF(g), CTF(b), CTF(a))
  <tr><td>rgba16float<td>16float<td>r, g, b, a<td>vec4&lt;f32&gt;(CTF(r), CTF(g), CTF(b), CTF(a))
  <tr><td>r32uint<td>32uint<td>r<td>vec4&lt;u32&gt;(CTF(r), 0u, 0u, 1u)
  <tr><td>r32sint<td>32sint<td>r<td>vec4&lt;i32&gt;(CTF(r), 0, 0, 1)
  <tr><td>r32float<td>32float<td>r<td>vec4&lt;f32&gt;(CTF(r), 0.0, 0.0, 1.0)
  <tr><td>rg32uint<td>32uint<td>r, g<td>vec4&lt;u32&gt;(CTF(r), CTF(g), 0.0, 1.0)
  <tr><td>rg32sint<td>32sint<td>r, g<td>vec4&lt;i32&gt;(CTF(r), CTF(g), 0.0, 1.0)
  <tr><td>rg32float<td>32float<td>r, g<td>vec4&lt;f32&gt;(CTF(r), CTF(g), 0.0, 1.0)
  <tr><td>rgba32uint<td>32uint<td>r, g, b, a<td>vec4&lt;u32&gt;(CTF(r), CTF(g), CTF(b), CTF(a))
  <tr><td>rgba32sint<td>32sint<td>r, g, b, a<td>vec4&lt;i32&gt;(CTF(r), CTF(g), CTF(b), CTF(a))
  <tr><td>rgba32float<td>32float<td>r, g, b, a<td>vec4&lt;f32&gt;(CTF(r), CTF(g), CTF(b), CTF(a))
</table>

The following table lists the correspondence between WGSL texel formats and
[SPIR-V image formats](https://www.khronos.org/registry/spir-v/specs/unified1/SPIRV.html#_a_id_image_format_a_image_format).

<table class='data'>
  <caption>Mapping texel formats to SPIR-V</caption>
  <thead>
    <tr><th>Texel format
        <th>SPIR-V Image Format
        <th>SPIR-V Enabling Capability
  </thead>
  <tr><td>rgba8unorm<td>Rgba8<td>Shader
  <tr><td>rgba8snorm<td>Rgba8Snorm<td>Shader
  <tr><td>rgba8uint<td>Rgba8ui<td>Shader
  <tr><td>rgba8sint<td>Rgba8i<td>Shader
  <tr><td>rgba16uint<td>Rgba16ui<td>Shader
  <tr><td>rgba16sint<td>Rgba16i<td>Shader
  <tr><td>rgba16float<td>Rgba16f<td>Shader
  <tr><td>r32uint<td>R32ui<td>Shader
  <tr><td>r32sint<td>R32i<td>Shader
  <tr><td>r32float<td>R32f<td>Shader
  <tr><td>rg32uint<td>Rg32ui<td>StorageImageExtendedFormats
  <tr><td>rg32sint<td>Rg32i<td>StorageImageExtendedFormats
  <tr><td>rg32float<td>Rg32f<td>StorageImageExtendedFormats
  <tr><td>rgba32uint<td>Rgba32ui<td>Shader
  <tr><td>rgba32sint<td>Rgba32i<td>Shader
  <tr><td>rgba32float<td>Rgba32f<td>Shader
</table>

### Sampled Texture Types ### {#sampled-texture-type}

<pre class='def'>
`texture_1d<type>`
  %1 = OpTypeImage %type 1D 0 0 0 1 Unknown

`texture_2d<type>`
  %1 = OpTypeImage %type 2D 0 0 0 1 Unknown

`texture_2d_array<type>`
  %1 = OpTypeImage %type 2D 0 1 0 1 Unknown

`texture_3d<type>`
  %1 = OpTypeImage %type 3D 0 0 0 1 Unknown

`texture_cube<type>`
  %1 = OpTypeImage %type Cube 0 0 0 1 Unknown

`texture_cube_array<type>`
  %1 = OpTypeImage %type Cube 0 1 0 1 Unknown
</pre>
* type must be `f32`, `i32` or `u32`
* The parameterized type for the images is the type after conversion from sampling.
    E.g. you can have an image with texels with 8bit unorm components, but when you sample
    them you get a 32-bit float result (or vec-of-f32).

### Multisampled Texture Types ### {#multisampled-texture-type}

<pre class='def'>
`texture_multisampled_2d<type>`
  %1 = OpTypeImage %type 2D 0 0 1 1 Unknown
</pre>
* type must be `f32`, `i32` or `u32`

### Storage Texture Types ### {#texture-storage}

A <dfn noexport>read-only storage texture</dfn> supports reading a single texel without the use of a sampler,
with automatic conversion of the stored texel value to a usable shader value. A <dfn noexport>write-only storage
texture</dfn> supports writing a single texel, with automatic conversion
of the shader value to a stored texel value.
See [[#texture-builtin-functions]].

A storage texture type must be parameterized by one of the
[=storage-texel-format|texel formats for storage textures=].
The texel format determines the conversion function as specified in [[#texel-formats]].

For a write-only storage texture the *inverse* of the conversion function is used to convert the shader value to
the stored texel.

TODO(dneto): Move description of the conversion to the builtin function that actually does the reading.

<pre class='def'>
`texture_storage_1d<texel_format>`
  // %1 = OpTypeImage sampled_type 1D 0 0 0 2 image_format

`texture_storage_2d<texel_format>`
  // %1 = OpTypeImage sampled_type 2D 0 0 0 2 image_format

`texture_storage_2d_array<texel_format>`
  // %1 = OpTypeImage sampled_type 2D 0 1 0 2 image_format

`texture_storage_3d<texel_format>`
  // %1 = OpTypeImage sampled_type 3D 0 0 0 2 texel_format
</pre>

In the SPIR-V mapping:
* The *Image Format* parameter of the image type declaration is
    as specified by the SPIR-V texel format correspondence table in [[#texel-formats]].
* The *Sampled Type* parameter of the image type declaration is
    the SPIR-V scalar type corresponding to the channel format for the texel format.

When mapping to SPIR-V, a read-only storage texture variable must have a `NonWritable` decoration and
a write-only storage texture variable must have a `NonReadable` decoration.

For example:

<div class='example wgsl global-scope' heading='Mapping a readable texture_storage_1d variable to SPIR-V'>
  <xmp>
      var tbuf : [[access(read)]] texture_storage_1d<rgba8unorm>;

      // Maps to the following SPIR-V:
      //  OpDecorate %tbuf NonWritable
      //  ...
      //  %float = OpTypeFloat 32
      //  %image_type = OpTypeImage %float 1D 0 0 0 2 Rgba8
      //  %image_ptr_type = OpTypePointer UniformConstant %image_type
      //  %tbuf = OpVariable %image_ptr_type UniformConstant
  </xmp>
</div>

<div class='example wgsl global-scope' heading='Mapping a writable texture_storage_1d variable to SPIR-V'>
  <xmp>
      var tbuf : [[access(write)]] texture_storage_1d<rgba8unorm>;

      // Maps to the following SPIR-V:
      //  OpDecorate %tbuf NonReadable
      //  ...
      //  %float = OpTypeFloat 32
      //  %image_type = OpTypeImage %float 1D 0 0 0 2 Rgba8
      //  %image_ptr_type = OpTypePointer UniformConstant %image_type
      //  %tbuf = OpVariable %image_ptr_type UniformConstant
  </xmp>
</div>

### Depth Texture Types ### {#texture-depth}
<pre class='def'>
`texture_depth_2d`
  %1 = OpTypeImage %f32 2D 1 0 0 1 Unknown

`texture_depth_2d_array`
  %1 = OpTypeImage %f32 2D 1 1 0 1 Unknown

`texture_depth_cube`
  %1 = OpTypeImage %f32 Cube 1 0 0 1 Unknown

`texture_depth_cube_array`
  %1 = OpTypeImage %f32 Cube 1 1 0 1 Unknown
</pre>

### Sampler Type ### {#sampler-type}

A <dfn>sampler</dfn> mediates access to a sampled texture or a depth texture, by performing a combination of:
* coordinate transformation.
* optionally modifying mip-level selection.
* for a sampled texture, optionally filtering retrieved texel values.
* for a depth texture, determinining the comparison function applied to the retrieved texel.

<table class='data'>
  <thead>
    <tr><th>Type<th>Description
  </thead>
  <tr algorithmm="sampler type">
    <td>sampler
    <td>Sampler. Mediates access to a sampled texture.</td>
  <tr algorithmm="comparisong sampler type">
    <td>sampler_comparison
    <td>Comparison sampler.
        Mediates access to a depth texture.</td>
</table>

Samplers are parameterized when created in the WebGPU API.
They cannot be modified by a [SHORTNAME] program.

Samplers can only be used by the [[#texture-builtin-functions|texture builtin functions]].

<pre class='def'>
sampler
  OpTypeSampler

sampler_comparison
  OpTypeSampler
</pre>

### Texture Types Grammar ### {#texture-types-grammar}
TODO: Add texture usage validation rules.

<pre class='def'>
texture_sampler_types
  : sampler_type
  | depth_texture_type
  | sampled_texture_type LESS_THAN type_decl GREATER_THAN
  | multisampled_texture_type LESS_THAN type_decl GREATER_THAN
  | storage_texture_type LESS_THAN texel_format GREATER_THAN

sampler_type
  : SAMPLER
  | SAMPLER_COMPARISON

sampled_texture_type
  : TEXTURE_1D
  | TEXTURE_2D
  | TEXTURE_2D_ARRAY
  | TEXTURE_3D
  | TEXTURE_CUBE
  | TEXTURE_CUBE_ARRAY

multisampled_texture_type
  : TEXTURE_MULTISAMPLED_2D

storage_texture_type
  : TEXTURE_STORAGE_1D
  | TEXTURE_STORAGE_2D
  | TEXTURE_STORAGE_2D_ARRAY
  | TEXTURE_STORAGE_3D

depth_texture_type
  : TEXTURE_DEPTH_2D
  | TEXTURE_DEPTH_2D_ARRAY
  | TEXTURE_DEPTH_CUBE
  | TEXTURE_DEPTH_CUBE_ARRAY

texel_format
  : R8UNORM
     R8  -- Capability: StorageImageExtendedFormats
  | R8SNORM
     R8Snorm  -- Capability: StorageImageExtendedFormats
  | R8UINT
     R8ui  -- Capability: StorageImageExtendedFormats
  | R8SINT
     R8i  -- Capability: StorageImageExtendedFormats
  | R16UINT
     R16ui  -- Capability: StorageImageExtendedFormats
  | R16SINT
     R16i  -- Capability: StorageImageExtendedFormats
  | R16FLOAT
     R16f  -- Capability: StorageImageExtendedFormats
  | RG8UNORM
     Rg8  -- Capability: StorageImageExtendedFormats
  | RG8SNORM
     Rg8Snorm  -- Capability: StorageImageExtendedFormats
  | RG8UINT
     Rg8ui  -- Capability: StorageImageExtendedFormats
  | RG8SINT
     Rg8i  -- Capability: StorageImageExtendedFormats
  | R32UINT
     R32ui
  | R32SINT
     R32i
  | R32FLOAT
     R32f
  | RG16UINT
     Rg16ui  -- Capability: StorageImageExtendedFormats
  | RG16SINT
     Rg16i  -- Capability: StorageImageExtendedFormats
  | RG16FLOAT
     Rg16f  -- Capability: StorageImageExtendedFormats
  | RGBA8UNORM
     Rgba8
  | RGBA8UNORM-SRGB
     ???
  | RGBA8SNORM
     Rgba8Snorm
  | RGBA8UINT
     Rgba8ui
  | RGBA8SINT
     Rgba8i
  | BGRA8UNORM
     Rgba8  ???
  | BGRA8UNORM-SRGB
     ???
  | RGB10A2UNORM
     Rgb10A2  -- Capability: StorageImageExtendedFormats
  | RG11B10FLOAT
     R11fG11fB10f  -- Capability: StorageImageExtendedFormats
  | RG32UINT
     Rg32ui  -- Capability: StorageImageExtendedFormats
  | RG32SINT
     Rg32i  -- Capability: StorageImageExtendedFormats
  | RG32FLOAT
     Rg32f  -- Capability: StorageImageExtendedFormats
  | RGBA16UINT
     Rgba16ui
  | RGBA16SINT
     Rgba16i
  | RGBA16FLOAT
     Rgba16f
  | RGBA32UINT
     Rgba32ui
  | RGBA32SINT
     Rgba32i
  | RGBA32FLOAT
     Rgba32f

</pre>

## Type Aliases TODO ## {#type-aliases}

<pre class='def'>
type_alias
  : TYPE IDENT EQUAL type_decl
</pre>

<div class='example wgsl global-scope' heading='Type Alias'>
  <xmp>
    type Arr = array<i32, 5>;

    type RTArr = [[stride(16)]] array<vec4<f32>>;
  </xmp>
</div>

## Type Declaration Grammar ## {#type-declarations}

<pre class='def'>
type_decl
  : IDENT
  | BOOL
  | FLOAT32
  | INT32
  | UINT32
  | VEC2 LESS_THAN type_decl GREATER_THAN
  | VEC3 LESS_THAN type_decl GREATER_THAN
  | VEC4 LESS_THAN type_decl GREATER_THAN
  | POINTER LESS_THAN storage_class COMMA type_decl GREATER_THAN
  | attribute_list* ARRAY LESS_THAN type_decl (COMMA INT_LITERAL)? GREATER_THAN
  | MAT2x2 LESS_THAN type_decl GREATER_THAN
  | MAT2x3 LESS_THAN type_decl GREATER_THAN
  | MAT2x4 LESS_THAN type_decl GREATER_THAN
  | MAT3x2 LESS_THAN type_decl GREATER_THAN
  | MAT3x3 LESS_THAN type_decl GREATER_THAN
  | MAT3x4 LESS_THAN type_decl GREATER_THAN
  | MAT4x2 LESS_THAN type_decl GREATER_THAN
  | MAT4x3 LESS_THAN type_decl GREATER_THAN
  | MAT4x4 LESS_THAN type_decl GREATER_THAN
  | texture_sampler_types
</pre>

When the type declaration is an identifer, then the expression must be in scope of a
declaration of the identifier as a type alias or structure type.

<div class='example' heading="Type Declarations">
  <xmp>
    identifier
      Allows to specify types created by the type command

    bool
       %1 = OpTypeBool

    f32
       %2 = OpTypeFloat 32

    i32
       %3 = OpTypeInt 32 1

    u32
       %4 = OpTypeInt 32 0

    vec2<f32>
        %7 = OpTypeVector %float 2

    array<f32, 4>
       %uint_4 = OpConstant %uint 4
            %9 = OpTypeArray %float %uint_4

    [[stride(32)]] array<f32, 4>
                 OpDecorate %9 ArrayStride 32
       %uint_4 = OpConstant %uint 4
            %9 = OpTypeArray %float %uint_4

    array<f32>
       %rtarr = OpTypeRuntimeArray %float

    mat2x3<f32>
       %vec = OpTypeVector %float 3
         %6 = OpTypeMatrix %vec 2
  </xmp>
</div>

<div class='example wgsl global-scope' heading='Access qualifier'>
  <xmp>
    // Storage buffers
    [[group(0), binding(0)]]
    var<storage> buf1 : [[access(read)]] Buffer;       // Can read, cannot write.
    [[group(0), binding(1)]
    var<storage> buf2 : [[access(read_write)]] Buffer; // Can both read and write

    // Uniform buffer. Always read-only, and has more restrictive layout rules.
    struct ParamsTable {};
    [[group(0), binding(2)]]
    var<uniform> params : ParamsTable;
  </xmp>
</div>

# `var` and `let` # {#var-and-let}

A <dfn noexport>let declaration</dfn> specifies a name for a value.
Once the value for a let-declaration is computed, it is immutable.
When an identifier use [=resolves=] to a let-declaration, the identifier denotes that value.

When a `let` identifier is declared without an explicitly specified type,
e.g. `let foo = 4`, the type is automatically inferred from the expression to the right of the equals token (`=`).
When the type is specified, e.g `let foo: i32 = 4`, the initializer expression must evaluate to that type.

Some rules about `let`-declarations depend on where the declaration appears.
See [[#module-constants]] and [[#function-scope-variables]].

<div class='example let declaration at module-scope' heading='let-declared constants at module scope'>
  <xmp highlight='rust'>
    // 'blockSize' denotes the i32 value 1024.
    let blockSize: i32 = 1024;

    // 'row_size' denotes the u32 value 16u.  The type is inferred.
    let row_size = 16u;
  </xmp>
</div>

A <dfn dfn noexport>variable</dfn> is a named reference to storage that can contain a value of a
particular [=storable=] type.

Two types are associated with a variable: its [=store type=] (the type of value
that may be placed in the referenced storage) and its [=reference type=] (the type
of the variable itself).
If a variable has store type *T* and [=storage class=] *S*,
then its reference type is ref&lt;*S*,*T*&gt;.

A <dfn dfn noexport>variable declaration</dfn>:

* Determines the variable’s name, storage class, and store type (and hence its [=reference type=]).
* Ensures the execution environment allocates storage for a value of the store type, for the lifetime of the variable.
* Optionally have an *initializer* expression, if the variable is in the [=storage classes/private=] or [=storage classes/function=] storage classes.
    If present, the initializer expression must evaluate to the variable's store type.

When an identifier use [=resolves=] to a variable declaration,
the identifer is an expression denoting the reference [=memory view=] for the variable's storage,
and its type is the variable's reference type.
See [[#var-identifier-expr]].

See [[#module-scope-variables]] and [[#function-scope-variables]] for rules about where
a variable in a particular storage class can be declared,
and when the storage class decoration is required, optional, or forbidden.

<pre class='def'>
variable_statement
  : variable_decl
  | variable_decl EQUAL short_circuit_or_expression
  | LET (IDENT | variable_ident_decl) EQUAL short_circuit_or_expression

variable_decl
  : VAR variable_storage_decoration? variable_ident_decl

variable_ident_decl
  : IDENT COLON attribute_list* type_decl

variable_storage_decoration
  : LESS_THAN storage_class GREATER_THAN

</pre>

Variables in the [=storage classes/storage=] storage class and variables with a
[storage texture](#texture-storage) type must have an [=access=] attribute
applied to the store type.

Two variables with overlapping lifetimes will not have overlapping storage.

When a variable is created, its storage contains an initial value as follows:

* For variables in the [=storage classes/private=] or [=storage classes/function=] storage classes:
    * The zero value for the store type, if the variable declaration has no initializer.
    * Otherwise, it is the result of evaluating the initializer expression at that point in the program execution.
* For variables in other storage classes, the execution environment provides the initial value.

Consider the following snippet of WGSL:
<div class='example wsgl function-scope' heading='Variable initial values'>
  <xmp highlight='rust'>
    var i: i32;         // Initial value is 0.  Not recommended style.
    loop {
      var twice: i32 = 2 * i;   // Re-evaluated each iteration.
      i = i + 1;
      break if (i == 5);
    }
  </xmp>
</div>
The loop body will execute five times.
Variable `i` will take on values 0, 1, 2, 3, 4, 5, and variable `twice` will take on values 0, 2, 4, 6, 8.

Consider the following snippet of WGSL:
<div class='example wsgl function-scope' heading='Reading a variable multiple times'>
  <xmp highlight='rust'>
    var x : f32 = 1.0;
    let y = x * x + x + 1;
  </xmp>
</div>
Because `x` is a variable, all accesses to it turn into load and store operations.
If this snippet was compiled to SPIR-V, it would be represented as
<div class='example spirv' heading='Sample translation for reading a variable multiple times'>
  <xmp highlight='asm'>
    %temp_1 = OpLoad %float %x
    %temp_2 = OpLoad %float %x
    %temp_3 = OpFMul %float %temp_1 %temp_2
    %temp_4 = OpLoad %float %x
    %temp_5 = OpFAdd %float %temp_3 %temp_4
    %y      = OpFAdd %float %temp_5 %one
  </xmp>
</div>
However, it is expected that either the browser or the driver optimizes this intermediate representation
such that the redundant loads are eliminated.

## Module Scope Variables ## {#module-scope-variables}

A variable declared outside all functions is at [=module scope=].
The variable name is available for use immediately after its declaration statement, until the end
of the program.

Variables at [=module scope=] are restricted as follows:

* The variable must not be in the [=storage classes/function=] storage class.
* A variable in the [=storage classes/private=], [=storage classes/workgroup=], [=storage classes/uniform=], or [=storage classes/storage=] storage classes:
    * Must be declared with an explicit storage class decoration.
    * Must use a [=store type=] as described in [[#storage-class]].
* If the [=store type=] is a texture type or a sampler type, then the variable declaration must not
    have a storage class decoration.  The storage class will always be [=storage classes/handle=].

A variable in the [=storage classes/uniform=] storage class is a <dfn noexport>uniform buffer</dfn> variable.
Its [=store type=] must be a [=host-shareable=] structure type with [=attribute/block=] attribute,
satisfying the [storage class constraints](#storage-class-constraints).

A variable in the [=storage classes/storage=] storage class is a <dfn noexport>storage buffer</dfn> variable.
Its [=store type=] must be a [=host-shareable=] structure type with [=attribute/block=] attribute,
satisfying the [storage class constraints](#storage-class-constraints).

As described in [[#resource-interface]],
uniform buffers, storage buffers, textures, and samplers form the
[=resource interface of a shader=].
Such variables are declared with [=attribute/group=] and [=attribute/binding=] decorations.

<div class='example wgsl global-scope' heading="Module scope variable declarations">
  <xmp>
    var<private> decibels: f32;
    var<workgroup> worklist: array<i32,10>;

    [[block]] struct Params {
      specular: f32;
      count: i32;
    };
    [[group(0)]], binding(2)]]
    var<uniform> param: Params;          // A uniform buffer

    [[block]] struct PositionsBuffer {
      pos: array<vec2<f32>>;
    };
    [[group(0), binding(0)]]
    var<storage> pbuf: [[access(read_write)]] PositionsBuffer;  // A storage buffer

    [[group(0), binding(1)]]
    var filter_params: sampler;   // Textures and samplers are always in "handle" storage.
  </xmp>
</div>

<pre class='def'>
global_variable_decl
  : attribute_list* variable_decl (EQUAL const_expr)?
</pre>

<div class='example' heading="Variable Decorations">
  <xmp>
    [[location(2)]]
       OpDecorate %variable Location 2

    [[group(4), binding(3)]]
       OpDecorate %variable DescriptorSet 4
       OpDecorate %variable Binding 3
  </xmp>
</div>

[SHORTNAME] defines the following attributes that can be applied to global variables:
 * [=attribute/binding=]
 * [=attribute/group=]

## Module Constants ## {#module-constants}

A `let`-declaration appearing outside all functions declares a
[=module scope|module-scope=] constant.
The name is available for use after the end of the declaration,
until the end of the [SHORTNAME] program.

A module-scope let-declared constant must be of [=atomic-free=] [=plain type=].

When the declaration has no attributes, an initializer expression must be present,
and the name denotes the value of that expression.

<div class='example wgsl global-scope' heading='Module constants'>
  <xmp>
    // The golden ratio.
    let golden: f32 = 1.61803398875;

    // The second unit vector for three dimensions, with inferred type.
    let e2 = vec3<i32>(0,1,0);
  </xmp>
</div>

When the declaration uses the [=override=] attribute,
the constant is <dfn noexport>pipeline-overridable</dfn>. In this case:

  * The type must one of the [=scalar=] types.
  * The initializer expression is optional.
  * The attribute's literal operand, if present, is known as the <dfn noexport>pipeline constant ID</dfn>,
    and must be a non-negative integer value representable in 32 bits.
  * Pipeline constant IDs must be unique within the [SHORTNAME] program: Two module constants
    must not use the same pipeline constant ID.
  * The application can specify its own value for the name at pipeline-creation time.
    The pipeline creation API accepts a mapping from overridable constant to a
    value of the constant's type.
    The constant is specified by the pipeline constant ID if it was specified
    or by the constant's identifier otherwise.
    If the mapping has an entry for the constant, the value in the mapping is used.
    Otherwise, the initializer expression must be present, and its value is used.

Issue(dneto): What happens if the application supplies a constant ID that is not in the program?
Proposal: pipeline creation fails with an error.

<div class='example wgsl global-scope' heading='Module constants, pipeline-overrideable'>
  <xmp>
    [[override(0)]]    let has_point_light : bool = true;  // Algorithmic control
    [[override(1200)]] let specular_param : f32 = 2.3;     // Numeric control
    [[override(1300)]] let gain : f32;                     // Must be overridden
    [[override]]       let width : f32 = 0.0;              // Specifed at the API level using
                                                           // the name "width".
    [[override]]       let depth : f32;                    // Specifed at the API level using
                                                           // the name "depth".
                                                           // Must be overridden.
  </xmp>
</div>

When a variable or feature is used within control flow that depends on the
value of a constant, then that variable or feature is considered to be used by the
program.
This is true regardless of the value of the constant, whether that value
is the one from the constant's declaration or from a pipeline override.

<pre class='def'>
global_constant_decl
  : attribute_list* LET variable_ident_decl global_const_initializer?

global_const_initializer
  : EQUAL const_expr

const_expr
  : type_decl PAREN_LEFT ((const_expr COMMA)* const_expr COMMA?)? PAREN_RIGHT
  | const_literal
</pre>

<div class='example' heading='Constants'>
  <xmp>
    -1
       %a = OpConstant %int -1

    2
       %b = OpConstant %uint 2

    3.2
       %c = OpConstant %float 3.2

    true
        %d = OpConstantTrue

    false
        %e = OpConstant False

    vec4<f32>(1.2, 2.3, 3.4, 2.3)
        %f0 = OpConstant %float 1.2
        %f1 = OpConstant %float 2.3
        %f2 = OpConstant %float 3.4
         %f = OpConstantComposite %v4float %f0 %f1 %f2 %f1
  </xmp>
</div>

Issue(dneto): The WebGPU pipeline creation API must specify how API-supplied values are mapped to
shader scalar values.  For booleans, I suggest using a 32-bit integer, where only 0 maps to `false`.
If [SHORTNAME] gains non-32-bit numeric scalars, I recommend overridable constants continue being 32-bit
numeric types.

## Function Scope Variables and Constants ## {#function-scope-variables}

A variable or constant declared in a declaration statement in a function body is in <dfn noexport>function scope</dfn>.
The name is available for use immediately after its declaration statement,
and until the end of the brace-delimited list of statements immediately enclosing the declaration.

A function-scope let-declared constant must be of [=atomic-free=] [=plain type=], or of [=pointer type=].

A variable declared in function scope is always in the [=storage classes/function=] storage class.
The variable storage decoration is optional.
The variable's [=store type=] must be a [=atomic-free=] [=plain type=].

<div class='example wgsl global-scope' heading="Function scope variables and constants">
  <xmp highlight='rust'>
    fn f() {
       var<function> count : u32;  // A variable in function storage class.
       var delta : i32;            // Another variable in the function storage class.
       var sum : f32 = 0.0;        // A function storage class variable with initializer.
       let unit : i32 = 1;       // A constant. Let declarations don't use a storage class.
    }
  </xmp>
</div>

A variable or constant declared in the first clause of a `for` statement is available for use in the second
and third clauses and in the body of the `for` statement.


## Never-alias assumption TODO ## {#never-alias-assumption}

# Expressions TODO # {#expressions}

## Literal Expressions TODO ## {#literal-expressions}

<table class='data'>
  <caption>Scalar literal type rules</caption>
  <thead>
    <tr><th>Precondition<th>Conclusion<th>Notes
  </thead>
  <tr><td><td>`true` : bool<td>OpConstantTrue %bool
  <tr><td><td>`false` : bool<td>OpConstantFalse %bool
  <tr><td><td>*INT_LITERAL* : i32<td>OpConstant %int *literal*
  <tr><td><td>*UINT_LITERAL* : u32<td>OpConstant %uint *literal*
  <tr><td><td>*FLOAT_LITERAL* : f32<td>OpConstant %float *literal*
</table>

## Type Constructor Expressions TODO ## {#type-constructor-expr}

<table class='data'>
  <caption>Scalar constructor type rules</caption>
  <thead>
    <tr><th>Precondition<th>Conclusion<th>Notes
  </thead>
  <tr><td>*e* : bool<td>`bool(e)` : bool<td>Identity.<br>In the SPIR-V translation, the ID of this expression reuses the ID of the operand.
  <tr><td>*e* : i32<td>`i32(e)` : i32<td>Identity.<br>In the SPIR-V translation, the ID of this expression reuses the ID of the operand.
  <tr><td>*e* : u32<td>`u32(e)` : u32<td>Identity.<br>In the SPIR-V translation, the ID of this expression reuses the ID of the operand.
  <tr><td>*e* : f32<td>`f32(e)` : f32<td>Identity.<br>In the SPIR-V translation, the ID of this expression reuses the ID of the operand.
</table>

<table class='data'>
  <caption>Vector constructor type rules, where *T* is a scalar type</caption>
  <thead>
    <tr><th>Precondition<th>Conclusion<th>Notes
  </thead>
  <tr algorithm="construct a vector from copies of a single scalar">
    <td>|e| : |T|
    <td>`vec`|N|`<`|T|`>(`|e|`)` : vec|N|&lt;|T|&gt;
    <td>Evaluates |e| once. Results in the |N|-element vector where each component has the value of |e|.
  <tr>
    <td>*e1* : *T*<br>
        *e2* : *T*
    <td>`vec2<T>(e1,e2)` : vec2<*T*>
    <td>OpCompositeConstruct
  <tr>
    <td>*e* : vec2&lt;T&gt;
    <td>`vec2<T>(e)` : vec2<*T*>
    <td>Identity. The result is |e|.
  <tr>
    <td>*e1* : *T*<br>
        *e2* : *T*<br>
        *e3* : *T*
    <td>`vec3<T>(e1,e2,e3)` : vec3<*T*>
    <td>OpCompositeConstruct
  <tr>
    <td>*e1* : *T*<br>
        *e2* : vec2<*T*>
    <td>`vec3<T>(e1,e2)` : vec3<*T*><br>
        `vec3<T>(e2,e1)` : vec3<*T*>
    <td>OpCompositeConstruct
  <tr>
    <td>*e* : vec3&lt;T&gt;
    <td>`vec3<T>(e)` : vec3<*T*>
    <td>Identity. The result is |e|.
  <tr>
    <td>*e1* : *T*<br>
        *e2* : *T*<br>
        *e3* : *T*<br>
        *e4* : *T*
    <td>`vec4<T>(e1,e2,e3,e4)` : vec4<*T*>
    <td>OpCompositeConstruct
  <tr>
    <td>*e1* : *T*<br>
        *e2* : *T*<br>
        *e3* : vec2<*T*>
    <td>`vec4<T>(e1,e2,e3)` : vec4<*T*><br>
        `vec4<T>(e1,e3,e2)` : vec4<*T*><br>
        `vec4<T>(e3,e1,e2)` : vec4<*T*>
    <td>OpCompositeConstruct
  <tr>
    <td>*e1* : vec2<*T*><br>
        *e2* : vec2<*T*>
    <td>`vec4<T>(e1,e2)` : vec4<*T*>
    <td>OpCompositeConstruct
  <tr>
    <td>*e1* : *T*<br>
        *e2* : vec3<*T*>
    <td>`vec4<T>(e1,e2)` : vec4<*T*><br>
        `vec4<T>(e2,e1)` : vec4<*T*>
    <td>OpCompositeConstruct
  <tr>
    <td>*e* : vec4&lt;T&gt;
    <td>`vec4<T>(e)` : vec4<*T*>
    <td>Identity. The result is |e|.
</table>

<table class='data'>
  <caption>Matrix constructor type rules</caption>
  <thead>
    <tr><th>Precondition<th>Conclusion<th>Notes
  </thead>
  <tr>
    <td>*e1* : vec2<f32><br>
        *e2* : vec2<f32><br>
        *e3* : vec2<f32><br>
        *e4* : vec2<f32>
    <td>`mat2x2<f32>(e1,e2)` : mat2x2<f32><br>
        `mat3x2<f32>(e1,e2,e3)` : mat3x2<f32><br>
        `mat4x2<f32>(e1,e2,e3,e4)` : mat4x2<f32>
    <td>Column by column construction.<br>
        OpCompositeConstruct
  <tr>
    <td>*e1* : vec3<f32><br>
        *e2* : vec3<f32><br>
        *e3* : vec3<f32><br>
        *e4* : vec3<f32>
    <td>`mat2x3<f32>(e1,e2)` : mat2x3<f32><br>
        `mat3x3<f32>(e1,e2,e3)` : mat3x3<f32><br>
        `mat4x3<f32>(e1,e2,e3,e4)` : mat4x3<f32>
    <td>Column by column construction.<br>
        OpCompositeConstruct
  <tr>
    <td>*e1* : vec4<f32><br>
        *e2* : vec4<f32><br>
        *e3* : vec4<f32><br>
        *e4* : vec4<f32>
    <td>`mat2x4<f32>(e1,e2)` : mat2x4<f32><br>
        `mat3x4<f32>(e1,e2,e3)` : mat3x4<f32><br>
        `mat4x4<f32>(e1,e2,e3,e4)` : mat4x4<f32>
    <td>Column by column construction.<br>
        OpCompositeConstruct
</table>

<table class='data'>
  <caption>Array constructor type rules</caption>
  <thead>
    <tr><th>Precondition<th>Conclusion<th>Notes
  </thead>
  <tr>
    <td>*e1* : *T*<br>
        ...<br>
        *eN* : *T*<br>
    <td>`array<`*T*,*N*`>(e1,...,eN)` : array<*T*, *N*>
    <td>Construction of an array from elements
</table>
TODO: Should this only work for storable sized arrays?  https://github.com/gpuweb/gpuweb/issues/982

<table class='data'>
  <caption>Structure constructor type rules</caption>
  <thead>
    <tr><th>Precondition<th>Conclusion<th>Notes
  </thead>
  <tr>
    <td>*e1* : *T1*<br>
        ...<br>
        *eN* : *TN*<br>
        *T1* is storable<br>
        ...<br>
        *TN* is storable<br>
        S is a structure type with members having types *T1* ... *TN*.<br>
        The expression is in the scope of declaration of S.
    <td>`S(e1,...,eN)` : S
    <td>Construction of a structure from members
  <tr>
</table>


## Zero Value Expressions ## {#zero-value-expr}

Each storable type *T* has a unique *zero value*, written in WGSL as the type followed by an empty pair of parentheses: *T* `()`.

Issue: We should exclude being able to write the zero value for an [=runtime-sized=] array. https://github.com/gpuweb/gpuweb/issues/981

The zero values are as follows:

* `bool()` is `false`
* `i32()` is 0
* `u32()` is 0
* `f32()` is 0.0
* The zero value for an *N*-element vector of type *T* is the *N*-element vector of the zero value for *T*.
* The zero value for an *N*-column *M*-row matrix of `f32` is the matrix of those dimensions filled with 0.0 entries.
* The zero value for an *N*-element array with storable element type *E* is an array of *N* elements of the zero value for *E*.
* The zero value for a storable structure type *S* is the structure value *S* with zero-valued members.

<table class='data'>
  <caption>Scalar zero value type rules</caption>
  <thead>
    <tr><th>Precondition<th>Conclusion<th>Notes
  </thead>
  <tr><td><td>`bool()` : bool<td>false<br>Zero value (OpConstantNull for bool)
  <tr><td><td>`i32()` : i32<td>0<br>Zero value (OpConstantNull for i32)
  <tr><td><td>`u32()` : u32<td>0u<br>Zero value (OpConstantNull for u32)
  <tr><td><td>`f32()` : f32<td>0.0<br>Zero value (OpConstantNull for f32)
</table>

<table class='data'>
  <caption>Vector zero type rules, where *T* is a scalar type</caption>
  <thead>
    <tr><th>Precondition<th>Conclusion<th>Notes
  </thead>
  <tr>
    <td>
    <td>`vec2<T>()` : vec2<*T*>
    <td>Zero value (OpConstantNull)
  <tr>
  <tr>
    <td>
    <td>`vec3<T>()` : vec3<*T*>
    <td>Zero value (OpConstantNull)
  <tr>
  <tr>
    <td>
    <td>`vec4<T>()` : vec4<*T*>
    <td>Zero value (OpConstantNull)
  <tr>
</table>


<div class='example' heading="Zero-valued vectors">
  <xmp highlight='rust'>
    vec2<f32>()                 // The zero-valued vector of two f32 elements.
    vec2<f32>(0.0, 0.0)         // The same value, written explicitly.

    vec3<i32>()                 // The zero-valued vector of four i32 elements.
    vec3<i32>(0, 0, 0)          // The same value, written explicitly.
  </xmp>
</div>

<table class='data'>
  <caption>Matrix zero type rules</caption>
  <thead>
    <tr><th>Precondition<th>Conclusion<th>Notes
  </thead>
  <tr>
    <td>
    <td>`mat2x2<f32>()` : mat2x2<f32><br>
        `mat3x2<f32>()` : mat3x2<f32><br>
        `mat4x2<f32>()` : mat4x2<f32>
    <td>Zero value (OpConstantNull)
  <tr>
  <tr>
    <td>
    <td>`mat2x3<f32>()` : mat2x3<f32><br>
        `mat3x3<f32>()` : mat3x3<f32><br>
        `mat4x3<f32>()` : mat4x3<f32>
    <td>Zero value (OpConstantNull)
  <tr>
  <tr>
    <td>
    <td>`mat2x4<f32>()` : mat2x4<f32><br>
        `mat3x4<f32>()` : mat3x4<f32><br>
        `mat4x4<f32>()` : mat4x4<f32>
    <td>Zero value (OpConstantNull)
</table>

<table class='data'>
  <caption>Array zero type rules</caption>
  <thead>
    <tr><th>Precondition<th>Conclusion<th>Notes
  </thead>
  <tr>
    <td>*T* is storable
    <td>`array<`*T*,*N*`>()` : array<*T*, *N*>
    <td>Zero-valued array (OpConstantNull)
</table>

<div class='example' heading="Zero-valued arrays">
  <xmp highlight='rust'>
    array<bool, 2>()               // The zero-valued array of two booleans.
    array<bool, 2>(false, false)   // The same value, written explicitly.
  </xmp>
</div>

<table class='data'>
  <caption>Structure zero type rules</caption>
  <thead>
    <tr><th>Precondition<th>Conclusion<th>Notes
  </thead>
  <tr>
    <td>`S` is a storable structure type.<br>
         The expression is in the scope of declaration of S.
    <td>`S()` : S
    <td>Zero-valued structure: a structure of type S where each member is the zero value for its member type.
<br>
 (OpConstantNull)
  <tr>
</table>

<div class='example wgsl global-scope' heading="Zero-valued structures">
  <xmp highlight='rust'>
    struct Student {
      grade : i32;
      GPA : f32;
      attendance : array<bool,4>;
    };

    fn func() {
      var s : Student;

      // The zero value for Student
      s = Student();

      // The same value, written explicitly.
      s = Student(0, 0.0, array<bool,4>(false, false, false, false));

      // The same value, written with zero-valued members.
      s = Student(i32(), f32(), array<bool,4>());
    }
  </xmp>
</div>


## Conversion Expressions ## {#conversion-expr}

<table class='data'>
  <caption>Scalar conversion type rules</caption>
  <thead>
    <tr><th>Precondition<th>Conclusion<th>Notes
  </thead>
  <tr algorithm="coercion to boolean from unsigned">
      <td>|e| : u32<td>`bool(`|e|`)` : bool
      <td>Coercion to boolean.<br>
          The result is false if |e| is 0, and true otherwise.<br>
          (Use OpINotEqual to compare |e| against 0.)
  <tr algorithm="coercion to boolean from signed">
      <td>|e| : i32<td>`bool(`|e|`)` : bool
      <td>Coercion to boolean.<br>
          The result is false if |e| is 0, and true otherwise.<br>
          (Use OpINotEqual to compare |e| against 0.)
  <tr algorithm="coercion to boolean from floating point">
      <td>|e| : f32<td>`bool(`|e|`)` : bool
      <td>Coercion to boolean.<br>
          The result is false if |e| is 0.0 or -0.0, and true otherwise.
          In particular NaN and infinity values map to true.<br>
          (Use OpFUnordNotEqual to compare |e| against `0.0`.)
  <tr algorithm="scalar reinterpretation from unsigned to signed">
      <td>|e| : u32<td>`i32(`|e|`)` : i32
      <td>Reinterpretation of bits.<br>
          The result is the unique value in [=i32=] that is equal to (|e| mod 2<sup>32</sup>).<br>
          (OpBitcast)
  <tr algorithm="scalar conversion from floating point to signed integer">
      <td>|e| : f32<td>`i32(`|e|`)` : i32<td>Value conversion, including invalid cases. (OpConvertFToS)
  <tr algorithm="scalar conversion from signed integer to unsigned integer">
      <td>|e| : i32<td>`u32(`|e|`)` : u32
      <td>Reinterpretation of bits.<br>
          The result is the unique value in [=u32=] that is equal to (|e| mod 2<sup>32</sup>).<br>
          (OpBitcast)
  <tr algorithm="scalar conversion from floating point to unsigned integer">
      <td>|e| : f32<td>`u32(`|e|`)` : u32
      <td>Value conversion, including invalid cases. (OpConvertFToU)
  <tr algorithm="scalar conversion from signed integer to floating point">
      <td>|e| : i32<td>`f32(`|e|`)` : f32<td>Value conversion, including invalid cases. (OpConvertSToF)
  <tr algorithm="scalar conversion from unsigned integer to floating point">
      <td>|e| : u32<td>`f32(`|e|`)` : f32<td>Value conversion, including invalid cases. (OpConvertUToF)
</table>

Details of conversion to and from floating point are explained in [[#floating-point-conversion]].

<table class='data'>
  <caption>Vector conversion type rules</caption>
  <thead>
    <tr><th>Precondition<th>Conclusion<th>Notes
  </thead>
  <tr algorithm="vector coercion of unsigned integer to boolean">
     <td>|e| : vec|N|&lt;u32&gt;
     <td>`vec`|N|&lt;`bool`&gt;`(`|e|`)` : vec|N|&lt;bool&gt
     <td>Component-wise coercion of a unsigned integer vector to a boolean vector.<br>
         Component |i| of the result is `bool(`|e|`[`|i|`])`<br>
         (OpINotEqual to compare |e| against a zero vector.)

  <tr algorithm="vector coercion of signed integer to boolean">
     <td>|e| : vec|N|&lt;i32&gt;
     <td>`vec`|N|&lt;`bool`&gt;`(`|e|`)` : vec|N|&lt;bool&gt
     <td>Component-wise coercion of a signed integer vector to a boolean vector.<br>
         Component |i| of the result is `bool(`|e|`[`|i|`])`<br>
         (OpINotEqual to compare |e| against a zero vector.)

  <tr algorithm="vector coercion of floating point to boolean">
     <td>|e| : vec|N|&lt;f32&gt;
     <td>`vec`|N|&lt;`bool`&gt;`(`|e|`)` : vec|N|&lt;bool&gt
     <td>Component-wise coercion of a floating point vector to a boolean vector.<br>
         Component |i| of the result is `bool(`|e|`[`|i|`])`<br>
         (OpFUnordNotEqual to compare |e| against a zero vector.)

  <tr algorithm="vector reinterpretation from unsigned to signed">
     <td>|e| : vec|N|&lt;u32&gt;
     <td>`vec`|N|&lt;`i32`&gt;`(`|e|`)` : vec|N|&lt;i32&gt
     <td>Component-wise reinterpretation of bits.<br>
         Component |i| of the result is `i32(`|e|`[`|i|`])`<br>
         (OpBitcast)

  <tr algorithm="vector conversion from floating point to signed integer">
     <td>|e| : vec|N|&lt;f32&gt;
     <td>`vec`|N|&lt;`i32`&gt;`(`|e|`)` : vec|N|&lt;i32&gt;
     <td>Component-wise value conversion to signed integer, including invalid cases.<br>
         Component |i| of the result is `i32(`|e|`[`|i|`])`<br>
        (OpConvertFToS)

  <tr algorithm="vector reinterpretation from signed to unsigned">
     <td>|e| : vec|N|&lt;i32&gt;
     <td>`vec`|N|&lt;`u32`&gt;`(`|e|`)` : vec|N|&lt;u32&gt;
     <td>Component-wise reinterpretation of bits.<br>
         Component |i| of the result is `u32(`|e|`[`|i|`])`<br>
        (OpBitcast)

  <tr algorithm="vector conversion from floating point to unsigned integer">
     <td>|e| : vec|N|&lt;f32&gt;
     <td>`vec`|N|&lt;`u32`&gt;`(`|e|`)` : vec|N|&lt;u32&gt;
     <td>Component-wise value conversion to unsigned integer, including invalid cases.<br>
         Component |i| of the result is `u32(`|e|`[`|i|`])`<br>
        (OpConvertFToU)

  <tr algorithm="vector conversion from signed integer to floating point">
     <td>|e| : vec|N|&lt;i32&gt;
     <td>`vec`|N|&lt;`f32`&gt;`(`|e|`)` : vec|N|&lt;f32&gt;
     <td>Component-wise value conversion to floating point, including invalid cases.<br>
         Component |i| of the result is `f32(`|e|`[`|i|`])`<br>
        (OpConvertSToF)

  <tr algorithm="vector conversion from unsigned integer to floating point">
     <td>|e| : vec|N|&lt;u32&gt;
     <td>`vec`|N|&lt;`f32`&gt;`(`|e|`)` : vec|N|&lt;f32&gt;
     <td>Component-wise value conversion to floating point, including invalid cases.<br>
         Component |i| of the result is `f32(`|e|`[`|i|`])`<br>
        (ConvertUToF)

</table>

## Reinterpretation of Representation Expressions ## {#bitcast-expr}

A `bitcast` expression is used to reinterpet the bit representation of a
value in one type as a value in another type.

<table class='data'>
  <caption>Scalar bitcast type rules</caption>
  <thead>
    <tr><th>Precondition<th>Conclusion<th>Notes
  </thead>
  <tr algorithm="scalar identity reinterpretation">
      <td>|e| : |T|,<br>
          |T| is one of i32, u32, f32
      <td>bitcast&lt;|T|&gt;(|e|) : |T|
      <td>Identity transform.<br>
          The result is |e|.
          <br>In the SPIR-V translation, the ID of this expression reuses the ID of the operand.
  <tr algorithm="scalar reinterpretation as signed integer">
      <td>|e| : |T|,<br>
          |T| is one of u32, f32
      <td>bitcast&lt;i32&gt;(|e|) : i32
      <td>Reinterpretation of bits as a signed integer.<br>
          The result is the reinterpretation of the 32 bits in the representation of |e| as a [=i32=] value.
          (OpBitcast)
  <tr algorithm="scalar reinterpretation as unsigned integer">
      <td>|e| : |T|,<br>
          |T| is one of i32, f32
      <td>bitcast&lt;u32&gt;(|e|) : u32
      <td>Reinterpretation of bits as an unsigned integer.<br>
          The result is the reinterpretation of the 32 bits in the representation of |e| as a [=u32=] value.
          (OpBitcast)
  <tr algorithm="scalar reinterpretation as floating point">
      <td>|e| : |T|,<br>
          |T| is one of i32, u32
      <td>bitcast&lt;f32&gt;(|e|) : f32
      <td>Reinterpretation of bits as a floating point value.<br>
          The result is the reinterpretation of the 32 bits in the representation of |e| as a [=f32=] value.
          (OpBitcast)
</table>

<table class='data'>
  <caption>Vector bitcast type rules</caption>
  <thead>
    <tr><th>Precondition<th>Conclusion<th>Notes
  </thead>
  <tr algorithm="vector identity reinterpretation">
      <td>|e| : vec&lt;|N|&gt;|T|&gt;,<br>
          |T| is one of i32, u32, f32
      <td>bitcast&lt;vec|N|&lt;|T|&gt;&gt;(|e|) : |T|
      <td>Identity transform.<br>
          The result is |e|.
          <br>In the SPIR-V translation, the ID of this expression reuses the ID of the operand.
  <tr algorithm="vector reinterpretation as signed integer">
      <td>|e| : vec&lt;|N|&gt;|T|&gt;,<br>
          |T| is one of u32, f32
      <td>bitcast&lt;vec|N|&lt;i32&gt;&gt;(|e|) : vec|N|&lt;i32&gt;
      <td>Component-wise reinterpretation of bits.<br>
          Component |i| of the result is `bitcast<i32>(`|e|`[`|i|`])`<br>
          (OpBitcast)
  <tr algorithm="vector reinterpretation as unsigned integer">
      <td>|e| : vec&lt;|N|&gt;|T|&gt;,<br>
          |T| is one of i32, f32
      <td>bitcast&lt;vec|N|&lt;u32&gt;&gt;(|e|) : vec|N|&lt;u32&gt;
      <td>Component-wise reinterpretation of bits.<br>
          Component |i| of the result is `bitcast<u32>(`|e|`[`|i|`])`<br>
          (OpBitcast)
  <tr algorithm="vector reinterpretation as floating point">
      <td>|e| : vec&lt;|N|&gt;|T|&gt;,<br>
          |T| is one of i32, u32
      <td>bitcast&lt;vec|N|&lt;f32&gt;&gt;(|e|) : vec|N|&lt;f32&gt;
      <td>Component-wise Reinterpretation of bits.<br>
          Component |i| of the result is `bitcast<f32>(`|e|`[`|i|`])`<br>
          (OpBitcast)

</table>

## Composite Value Decomposition Expressions ## {#composite-value-decomposition-expr}

### Vector Access Expression ### {#vector-access-expr}

Accessing members of a vector can be done either using array subscripting (e.g. `a[2]`) or using a sequence of convenience names, each mapping to an element of the source vector.

<ul>
  <li>The colour set of convenience names: `r`, `g`, `b`, `a` for vector elements 0, 1, 2, and 3 respectively.
  <li>The dimensional set of convenience names: `x`, `y`, `z`, `w` for vector elements 0, 1, 2, and 3, respectively.
</ul>

The convenience names are accessed using the `.` notation. (e.g. `color.bgra`).

NOTE: the convenience letterings can not be mixed. (i.e. you can not use `rybw`).

Using a convenience letter, or array subscript, which accesses an element past the end of the vector is an error.

The convenience letterings can be applied in any order, including duplicating letters as needed. You can provide 1 to 4 letters when extracting components from a vector. Providing more then 4 letters is an error.

The result type depends on the number of letters provided. Assuming a `vec4<f32>`
<table>
  <thead>
    <tr><th>Accessor<th>Result type
  </thead>
  <tr><td>r<td>`f32`
  <tr><td>rg<td>`vec2<f32>`
  <tr><td>rgb<td>`vec3<f32>`
  <tr><td>rgba<td>`vec4<f32>`
</table>

<div class='example wgsl function-scope'>
  <xmp highlight='rust'>
    var a : vec3<f32> = vec3<f32>(1., 2., 3.);
    var b : f32 = a.y;          // b = 2.0
    var c : vec2<f32> = a.bb;   // c = (3.0, 3.0)
    var d : vec3<f32> = a.zyx;  // d = (3.0, 2.0, 1.0)
    var e : f32 = a[1];         // e = 2.0
  </xmp>
</div>

#### Vector single component selection #### {#vector-single-component}

<table class='data'>
  <caption>Vector decomposition: single component selection</caption>
  <thead>
    <tr><th>Precondition<th>Conclusion<th>Description
  </thead>
  <tr algorithm="first vector component selection"><td>|e| : vec|N|&lt;|T|&gt;<br>
       <td class="nowrap">
           |e|`.x` : |T|<br>
           |e|`.r` : |T|
       <td>Select the first component of |e|<br>
           (OpCompositeExtract with selection index 0)
  <tr algorithm="second vector component selection"><td>|e| : vec|N|&lt;|T|&gt;<br>
       <td class="nowrap">
           |e|`.y` : |T|<br>
           |e|`.g` : |T|
       <td>Select the second component of |e|<br>
           (OpCompositeExtract with selection index 1)
  <tr algorithm="third vector component selection"><td>|e| : vec|N|&lt;|T|&gt;<br>
          |N| is 3 or 4
       <td class="nowrap">
           |e|`.z` : |T|<br>
           |e|`.b` : |T|
       <td>Select the third component of |e|<br>
           (OpCompositeExtract with selection index 2)
  <tr algorithm="fourth vector component selection"><td>|e| : vec4&lt;|T|&gt;
       <td class="nowrap">
           |e|`.w` : |T|<br>
           |e|`.a` : |T|
       <td>Select the fourth component of |e|<br>
           (OpCompositeExtract with selection index 3)
  <tr algorithm="vector indexed component selection"><td>|e| : vec|N|&lt;|T|&gt;<br>
          |i| : *Int*
       <td class="nowrap">
           |e|[|i|] : |T|
       <td>Select the |i|'<sup>th</sup> component of vector<br>
           The first component is at index |i|=0.<br>
           If |i| is outside the range [0,|N|-1], then an index in the range [0, |N|-1] is used instead.
           (OpVectorExtractDynamic)
</table>

Issue: Which index is used when it's out of bounds?

#### Vector multiple component selection #### {#vector-multi-component}

<table class='data'>
  <caption>Vector decomposition: multiple component selection
  <thead>
    <tr><th>Precondition<th>Conclusion<th>Description
  </thead>
  <tr algorithm="two component vector selection using .x .y">
       <td class="nowrap">
          |e| : vec|N|&lt;|T|&gt;<br>
          |I| is the letter `x`, `y`, `z`, or `w`<br>
          |J| is the letter `x`, `y`, `z`, or `w`<br>
       <td class="nowrap">
           |e|`.`|I||J| : vec2&lt;|T|&gt;<br>
       <td>Computes the two-element vector with first component |e|.|I|, and second component |e|.|J|.<br>
           Letter `z` is valid only when |N| is 3 or 4.<br>
           Letter `w` is valid only when |N| is 4.<br>
           (OpVectorShuffle)
  <tr algorithm="two component vector selection using .r .g">
       <td class="nowrap">
          |e| : vec|N|&lt;|T|&gt;<br>
          |I| is the letter `r`, `g`, `b`, or `a`<br>
          |J| is the letter `r`, `g`, `b`, or `a`<br>
       <td class="nowrap">
           |e|`.`|I||J| : vec2&lt;|T|&gt;<br>
       <td>Computes the two-element vector with first component |e|.|I|, and second component |e|.|J|.<br>
           Letter `b` is valid only when |N| is 3 or 4.<br>
           Letter `a` is valid only when |N| is 4.<br>
           (OpVectorShuffle)
  <tr algorithm="three component vector selection using .x .y">
       <td class="nowrap">
          |e| : vec|N|&lt;|T|&gt;<br>
          |I| is the letter `x`, `y`, `z`, or `w`<br>
          |J| is the letter `x`, `y`, `z`, or `w`<br>
          |K| is the letter `x`, `y`, `z`, or `w`<br>
       <td class="nowrap">
           |e|`.`|I||J||K| : vec3&lt;|T|&gt;<br>
       <td>Computes the three-element vector with first component |e|.|I|, second component |e|.|J|, and third component |e|.|K|.<br>
           Letter `z` is valid only when |N| is 3 or 4.<br>
           Letter `w` is valid only when |N| is 4.<br>
           (OpVectorShuffle)
  <tr algorithm="three component vector selection using .r .g">
       <td class="nowrap">
          |e| : vec|N|&lt;|T|&gt;<br>
          |I| is the letter `r`, `g`, `b`, or `a`<br>
          |J| is the letter `r`, `g`, `b`, or `a`<br>
          |K| is the letter `r`, `g`, `b`, or `a`<br>
       <td class="nowrap">
           |e|`.`|I||J||K| : vec3&lt;|T|&gt;<br>
       <td>Computes the three-element vector with first component |e|.|I|, second component |e|.|J|, and third component |e|.|K|.<br>
           Letter `b` is only valid when |N| is 3 or 4.<br>
           Letter `a` is only valid when |N| is 4.<br>
           (OpVectorShuffle)
  <tr algorithm="four component vector selection using .x .y">
       <td class="nowrap">
          |e| : vec|N|&lt;|T|&gt;<br>
          |I| is the letter `x`, `y`, `z`, or `w`<br>
          |J| is the letter `x`, `y`, `z`, or `w`<br>
          |K| is the letter `x`, `y`, `z`, or `w`<br>
          |L| is the letter `x`, `y`, `z`, or `w`<br>
       <td class="nowrap">
           |e|`.`|I||J||K||L| : vec4&lt;|T|&gt;<br>
       <td>Computes the four-element vector with first component |e|.|I|, second component |e|.|J|, third component |e|.|K|, and fourth component |e|.|L|.<br>
           Letter `z` is valid only when |N| is 3 or 4.<br>
           Letter `w` is valid only when |N| is 4.<br>
           (OpVectorShuffle)
  <tr algorithm="four component vector selection using .r .g">
       <td class="nowrap">
          |e| : vec|N|&lt;|T|&gt;<br>
          |I| is the letter `r`, `g`, `b`, or `a`<br>
          |J| is the letter `r`, `g`, `b`, or `a`<br>
          |K| is the letter `r`, `g`, `b`, or `a`<br>
          |L| is the letter `r`, `g`, `b`, or `a`<br>
       <td class="nowrap">
           |e|`.`|I||J||K||L| : vec4&lt;|T|&gt;<br>
       <td>Computes the four-element vector with first component |e|.|I|, second component |e|.|J|, third component |e|.|K|, and fourth component |e|.|L|.<br>
           Letter `b` is only valid when |N| is 3 or 4.<br>
           Letter `a` is only valid when |N| is 4.<br>
           (OpVectorShuffle)
</table>

#### Component reference from vector reference #### {#component-reference-from-vector-reference}

<table class='data'>
  <caption>Getting a reference to a component from a reference to a vector</caption>
  <thead>
    <tr><th>Precondition<th>Conclusion<th>Description
  </thead>
  <tr algorithm="first vector component reference selection">
       <td>|r| : ref&lt;|SC|,vec|N|&lt;|T|&gt;&gt;<br>
       <td class="nowrap">
           |r|`.x` : ref&lt;|SC|,|T|&gt;<br>
           |r|`.r` : ref&lt;|SC|,|T|&gt;<br>
       <td>Compute a reference to the first component of the vector referenced by the reference |r|.<br>
           The [=originating variable=] of the resulting reference is
           the same as the originating variable of |r|.<br>
           (OpAccessChain with index value 0)
  <tr algorithm="second vector component reference selection">
       <td>|r| : ref&lt;|SC|,vec|N|&lt;|T|&gt;&gt;<br>
       <td class="nowrap">
           |r|`.y` : ref&lt;|SC|,|T|&gt;<br>
           |r|`.g` : ref&lt;|SC|,|T|&gt;<br>
       <td>Compute a reference to the second component of the vector referenced by the reference |r|.<br>
           The [=originating variable=] of the resulting reference is
           the same as the originating variable of |r|.<br>
           (OpAccessChain with index value 1)
  <tr algorithm="third vector component reference selection">
       <td>|r| : ref&lt;|SC|,vec|N|&lt;|T|&gt;&gt;<br>
           |N| is 3 or 4
       <td class="nowrap">
           |r|`.z` : ref&lt;|SC|,|T|&gt;<br>
           |r|`.b` : ref&lt;|SC|,|T|&gt;<br>
       <td>Compute a reference to the third component of the vector referenced by the reference |r|.<br>
           The [=originating variable=] of the resulting reference is
           the same as the originating variable of |r|.<br>
           (OpAccessChain with index value 2)
  <tr algorithm="fourth vector component reference selection">
       <td>|r| : ref&lt;|SC|,vec4&lt;|T|&gt;&gt;<br>
       <td class="nowrap">
           |r|`.w` : ref&lt;|SC|,|T|&gt;<br>
           |r|`.a` : ref&lt;|SC|,|T|&gt;<br>
       <td>Compute a reference to the fourth component of the vector referenced by the reference |r|.<br>
           The [=originating variable=] of the resulting reference is
           the same as the originating variable of |r|.<br>
           (OpAccessChain with index value 3)
  <tr algorithm="vector indexed component reference selection">
       <td>|r| : ref&lt;|SC|,vec|N|&lt;|T|&gt;&gt;<br>
          |i| : *Int*
       <td class="nowrap">
           |r|[|i|] : ref&lt;|SC|,|T|&gt;
       <td>Compute a reference to the |i|'<sup>th</sup> component of the vector referenced by the reference |r|.<br>
           If |i| is outside the range [0,|N|-1], then an index in the range [0, |N|-1] is used instead.<br>
           The [=originating variable=] of the resulting reference is
           the same as the originating variable of |r|.<br>
           (OpAccessChain)
</table>

### Matrix Access Expression ### {#matrix-access-expr}

<table class='data'>
  <caption>Column vector extraction</caption>
  <thead>
    <tr><th>Precondition<th>Conclusion<th>Description
  </thead>
  <tr algorithm="matrix indexed column vector selection">
       <td class="nowrap">
          |e| : mat|N|x|M|&lt;|T|&gt;<br>
          |i| : *Int*
       <td class="nowrap">
           |e|[|i|] : vec|M|&lt;|T|&gt;
       <td>The result is the |i|'<sup>th</sup> column vector of |e|.<br>
           If |i| is outside the range [0,|N|-1], then an index in the range [0, |N|-1] is used instead.<br>
           (OpCompositeExtract)
</table>

<table class='data'>
  <caption>Getting a reference to a column vector from a reference to a matrix</caption>
  <thead>
    <tr><th>Precondition<th>Conclusion<th>Description
  </thead>
  <tr algorithm="matrix indexed column vector reference selection">
       <td class="nowrap">
          |r| : ref&lt;|SC|,mat|N|x|M|&lt;|T|&gt;&gt;<br>
          |i| : *Int*
       <td class="nowrap">
           |r|[|i|] : ref&lt;vec|M|&lt;|SC|,|T|&gt;&gt;
       <td>Compute a reference to the |i|'<sup>th</sup> column vector of the matrix referenced by the reference |r|.<br>
           If |i| is outside the range [0,|N|-1], then an index in the range [0, |N|-1] is used instead.<br>
           The [=originating variable=] of the resulting reference is
           the same as the originating variable of |r|.<br>
           (OpAccessChain)
</table>

### Array Access Expression ### {#array-access-expr}

<table class='data'>
  <caption>Array element extraction</caption>
  <thead>
    <tr><th>Precondition<th>Conclusion<th>Description
  </thead>
  <tr algorithm="sized array indexed element selection">
       <td class="nowrap">
          |e| : array&lt;|T|,|N|&gt;<br>
          |i| : *Int*
       <td class="nowrap">
           |e|[|i|] : |T|
       <td>The result is the value of the |i|'<sup>th</sup> element of the array value |e|.<br>
           If |i| is outside the range [0,|N|-1], then an index in the range [0, |N|-1] is used instead.<br>
           (OpCompositeExtract)
</table>

<table class='data'>
  <caption>Getting a reference to an array element from a reference to an array</caption>
  <thead>
    <tr><th>Precondition<th>Conclusion<th>Description
  </thead>
  <tr algorithm="sized array indexed reference selection">
       <td class="nowrap">
          |r| : ref&lt;|SC|,array&lt;|T|,|N|&gt;&gt;<br>
          |i| : *Int*
       <td class="nowrap">
           |r|[|i|] : ref&lt;|SC|,|T|&gt;
       <td>Compute a reference to the |i|'<sup>th</sup> element of the array referenced by the reference |r|.<br>
           If |i| is outside the range [0,|N|-1], then an index in the range [0, |N|-1] is used instead.<br>
           The [=originating variable=] of the resulting reference is
           the same as the originating variable of |r|.<br>
           (OpAccessChain)
  <tr algorithm="array indexed reference selection">
       <td>|r| : ref&lt;|SC|,array&lt;|T|&gt;&gt;<br>
          |i| : *Int*
       <td class="nowrap">
           |r|[|i|] : ref&lt;|SC|,|T|&gt;
       <td>Compute a reference to the |i|'<sup>th</sup> element of the runtime-sized array referenced by the reference |r|.<br>
           If at runtime the array has |N| elements, and |i| is outside the range [0,|N|-1], then an index in the
           range [0, |N|-1] is used instead.<br>
           The [=originating variable=] of the resulting reference is
           the same as the originating variable of |r|.<br>
           (OpAccessChain)
</table>

### Structure Access Expression ### {#struct-access-expr}

<table class='data'>
  <caption>Structure member extraction</caption>
  <thead>
    <tr><th>Precondition<th>Conclusion<th>Description
  </thead>
  <tr algorithm="structure member extraction">
       <td class="nowrap">
          |S| is a structure type<br>
          |M| is the identifier name of a member of |S|, having type |T|<br>
          |e| : |S|<br>
       <td class="nowrap">
           |e|.|M| : |T|
       <td>The result is the value of the member with name |M| from the structure value |e|.<br>
           (OpCompositeExtract, using the member index)
</table>

<table class='data'>
  <caption>Getting a reference to a structure member from a reference to a structure</caption>
  <thead>
    <tr><th>Precondition<th>Conclusion<th>Description
  </thead>
  <tr algorithm="structure member reference selection">
       <td class="nowrap">
          |S| is a structure type<br>
          |M| is the name of a member of |S|, having type |T|<br>
          |r| : ref&lt;|SC|,|S|&gt;<br>
       <td class="nowrap">
           |r|.|M| : ref&lt;|SC|,|T|&gt;
       <td>Given a reference to a structure, the result is a reference to the structure member with identifier name |M|.<br>
           The [=originating variable=] of the resulting reference is
           the same as the originating variable of |r|.<br>
           (OpAccessChain, using the index of the structure member)
</table>

## Logical Expressions TODO ## {#logical-expr}
<table class='data'>
  <caption>Unary logical operations</caption>
  <thead>
    <tr><th>Precondition<th>Conclusion<th>Notes
  </thead>
  <tr algorithm="scalar boolean negation"><td>|e| : bool<td>`!`|e| : *bool*
      <td>Logical negation. Yields true when |e| is false, and false when |e| is true.<br>(OpLogicalNot)
  <tr algorithm="vector boolean negation"><td>|e| : vec|N|&lt;bool&gt;<td>`!`|e| : vec|N|&lt;bool&gt;
      <td>Component-wise logical negation. Component |i| of the result is `!(`|e|`[`|i|`])`.<br>(OpLogicalNot)
</table>

<table class='data'>
  <caption>Binary logical expressions</caption>
  <thead>
    <tr><th>Precondition<th>Conclusion<th>Notes
  </thead>
  <tr><td>*e1* : bool<br>*e2* : bool<td>`e1 || e2` : bool<td>
    Short-circuiting "or". Yields `true` if either `e1` or `e2` are true; evaluates `e2` only if `e1` is false.
  <tr><td>*e1* : bool<br>*e2* : bool<td>`e1 && e2` : bool<td>
    Short-circuiting "and". Yields `true` if both `e1` and `e2` are true; evaluates `e2` only if `e1` is true.
  <tr><td>*e1* : bool<br>*e2* : bool<td>`e1 | e2` : bool<td>
    Logical "or". Evaluates both `e1` and `e2`; yields `true` if either are `true`.
  <tr><td>*e1* : bool<br>*e2* : bool<td>`e1 & e2` : bool<td>
    Logical "and". Evaluates both `e1` and `e2`; yields `true` if both are `true`.
  <tr><td>*e1* : *T*<br>*e2* : *T*<br>*T* is *vecN*&lt;bool&gt;
    <td>`e1 | e2` : *T*<td>Component-wise logical "or"
  <tr><td>*e1* : *T*<br>*e2* : *T*<br>*T* is *vecN*&lt;bool&gt;
    <td>`e1 & e2` : *T*<td>Component-wise logical "and"
</table>


## Arithmetic Expressions TODO ## {#arithmetic-expr}

<table class='data'>
  <caption>Unary arithmetic expressions</caption>
  <thead>
    <tr><th>Precondition<th>Conclusion<th>Notes
  </thead>
  <tr><td>*e* : *T*, *T* is *SignedIntegral*<td>`-e` : *T*<td>Signed integer negation. OpSNegate
  <tr><td>*e* : *T*, *T* is *Floating*<td>`-e` : *T*<td>Floating point negation. OpFNegate
</table>

<table class='data'>
  <caption>Binary arithmetic expressions over scalars</caption>
  <thead>
    <tr><th>Precondition<th>Conclusion<th>Notes
  </thead>
  <tr><td>*e1* : u32<br> *e2* : u32<td class="nowrap">`e1 + e2` : u32<td>Integer addition, modulo 2<sup>32</sup> (OpIAdd)
  <tr><td>*e1* : i32<br> *e2* : i32<td>`e1 + e2` : i32<td>Integer addition, modulo 2<sup>32</sup> (OpIAdd)
  <tr><td>*e1* : f32<br> *e2* : f32<td>`e1 + e2` : f32<td>Floating point addition (OpFAdd)
  <tr><td>*e1* : u32<br> *e2* : u32<td>`e1 - e2` : u32<td>Integer subtraction, modulo 2<sup>32</sup> (OpISub)
  <tr><td>*e1* : i32<br> *e2* : i32<td>`e1 - e2` : i32<td>Integer subtraction, modulo 2<sup>32</sup> (OpISub)
  <tr><td>*e1* : f32<br> *e2* : f32<td>`e1 - e2` : f32<td>Floating point subtraction (OpFSub)
  <tr><td>*e1* : u32<br> *e2* : u32<td>`e1 * e2` : u32<td>Integer multiplication, modulo 2<sup>32</sup> (OpIMul)
  <tr><td>*e1* : i32<br> *e2* : i32<td>`e1 * e2` : i32<td>Integer multiplication, modulo 2<sup>32</sup> (OpIMul)
  <tr><td>*e1* : f32<br> *e2* : f32<td>`e1 * e2` : f32<td>Floating point multiplication (OpFMul)
  <tr><td>*e1* : u32<br> *e2* : u32<td>`e1 / e2` : u32<td>Unsigned integer division (OpUDiv)
  <tr><td>*e1* : i32<br> *e2* : i32<td>`e1 / e2` : i32<td>Signed integer division (OpSDiv)
  <tr><td>*e1* : f32<br> *e2* : f32<td>`e1 / e2` : f32<td>Floating point division (OpFDiv)
  <tr><td>*e1* : u32<br> *e2* : u32<td>`e1 % e2` : u32<td>Unsigned integer modulus (OpUMod)
  <tr><td>*e1* : i32<br> *e2* : i32<td>`e1 % e2` : i32<td>Signed integer remainder, where sign of non-zero result matches sign of *e2* (OpSMod)
  <tr><td>*e1* : f32<br> *e2* : f32<td>`e1 % e2` : f32<td>Floating point modulus, where sign of non-zero result matches sign of *e2* (OpFMod)
</table>

<table class='data'>
  <caption>Binary arithmetic expressions over vectors</caption>
  <thead>
    <tr><th>Precondition<th>Conclusion<th>Notes
  </thead>
  <tr><td>*e1* : *T*<br> *e2* : *T*<br> *T* is *vecN*&lt;*Int*&gt;
    <td class="nowrap">`e1 + e2` : *T*<td>Component-wise integer addition (OpIAdd)
  <tr><td>*e1* : *T*<br> *e2* : *T*<br> *T* is *vecN*&lt;f32&gt;
    <td class="nowrap">`e1 + e2` : *T*<td>Component-wise floating point addition (OpIAdd)
  <tr><td>*e1* : *T*<br> *e2* : *T*<br> *T* is *vecN*&lt;*Int*&gt;
    <td class="nowrap">`e1 - e2` : *T*<td>Component-wise integer subtraction (OpISub)
  <tr><td>*e1* : *T*<br> *e2* : *T*<br> *T* is *vecN*&lt;f32&gt;
    <td>`e1 - e2` : *T*<td>Component-wise floating point subtraction (OpISub)
  <tr><td>*e1* : *T*<br> *e2* : *T*<br> *T* is *vecN*&lt;*Int*&gt;
    <td>`e1 * e2` : *T*<td>Component-wise integer multiplication (OpIMul)
  <tr><td>*e1* : *T*<br> *e2* : *T*<br> *T* is *vecN*&lt;f32&gt;
    <td>`e1 * e2` : *T*<td>Component-wise floating point multiplication (OpIMul)
  <tr><td>*e1* : *T*<br> *e2* : *T*<br> *T* is *vecN*&lt;u32&gt;
    <td>`e1 / e2` : *T*<td>Component-wise unsigned integer division (OpUDiv)
  <tr><td>*e1* : *T*<br> *e2* : *T*<br> *T* is *vecN*&lt;i32&gt;
    <td>`e1 / e2` : *T*<td>Component-wise signed integer division (OpSDiv)
  <tr><td>*e1* : *T*<br> *e2* : *T*<br> *T* is *vecN*&lt;f32&gt;
    <td>`e1 / e2` : *T*<td>Component-wise floating point division (OpFDiv)
  <tr><td>*e1* : *T*<br> *e2* : *T*<br> *T* is *vecN*&lt;u32&gt;
    <td>`e1 % e2` : *T*<td>Component-wise unsigned integer modulus (OpUMod)
  <tr><td>*e1* : *T*<br> *e2* : *T*<br> *T* is *vecN*&lt;i32&gt;
    <td>`e1 % e2` : *T*<td>Component-wise signed integer remainder (OpSMod)
  <tr><td>*e1* : *T*<br> *e2* : *T*<br> *T* is *vecN*&lt;f32&gt;
    <td>`e1 % e2` : *T*<td>Component-wise floating point modulus (OpFMod)
</table>


<table class='data'>
  <caption>Binary arithmetic expressions with mixed scalar and vector operands</caption>
  <thead>
    <th>Preconditions<th>Conclusions<th>Semantics
  </thead>
  <tr algorithm="vector-scalar arithmetic, any scalar type">
    <td rowspan="8">|S| is one of f32, i32, u32<br>
        |V| is vec|N|&lt;|S|&gt<br>
        |es|: |S|<br>
        |ev|: |V|
    <td>|ev| `+` |es|: |V|
    <td>|ev| `+` |V|(|es|)
  <tr>
    <td>|es| `+` |ev|: |V|
    <td>|V|(|es|) `+` |ev|
  <tr>
    <td>|ev| `-` |es|: |V|
    <td>|ev| `-` |V|(|es|)
  <tr>
    <td>|es| `-` |ev|: |V|
    <td>|V|(|es|) `-` |ev|
  <tr>
    <td>|ev| `*` |es|: |V|
    <td>|ev| `*` |V|(|es|)
  <tr>
    <td>|es| `*` |ev|: |V|
    <td>|V|(|es|) `*` |ev|
  <tr>
    <td>|ev| `/` |es|: |V|
    <td>|ev| `/` |V|(|es|)
  <tr>
    <td>|es| `/` |ev|: |V|
    <td>|V|(|es|) `/` |ev|
  <tr algorithm="vector-scalar integer arithmetic">
    <td rowspan="2">|S| is one of i32, u32<br>
        |V| is vec|N|&lt;|S|&gt<br>
        |es|: |S|<br>
        |ev|: |V|
    <td>|ev| `%` |es|: |V|
    <td>|ev| `%` |V|(|es|)
  <tr>
    <td>|es| `%` |ev|: |V|
    <td>|V|(|es|) `%` |ev|
</table>

<table class='data'>
  <caption>Matrix arithmetic</caption>
  <thead>
    <th>Preconditions<th>Conclusions<th>Semantics
  </thead>
  <tr algorithm="matrix addition">
    <td rowspan=2>|e1|, |e2|: mat|M|x|N|&lt;f32&gt
    <td>|e1| `+` |e2|: mat|M|x|N|&lt;f32&gt<br>
    <td>Matrix addition: column |i| of the result is |e1|[i] + |e2|[i]
  <tr algorithm="matrix subtraction">
    <td>|e1| `-` |e2|: mat|M|x|N|&lt;f32&gt
    <td>Matrix subtraction: column |i| of the result is |e1|[|i|] - |e2|[|i|]
  <tr algorithm="matrix-scalar multiply">
    <td rowspan=2>|m|: mat|M|x|N|&lt;f32&gt<br>
        |s|: f32
    <td>|m| `*` |s| :  mat|M|x|N|&lt;f32&gt<br>
    <td>Component-wise scaling: (|m| `*` |s|)[i][j] is |m|[i][j] `*` |s|
  <tr algorithm="scalar-matrix multiply">
    <td>|s| `*` |m| :  mat|M|x|N|&lt;f32&gt<br>
    <td>Component-wise scaling: (|s| `*` |m|)[i][j] is |m|[i][j] `*` |s|
  <tr algorithm="matrix-column-vector multiply">
    <td>|m|: mat|M|x|N|&lt;f32&gt<br>
        |v|: vec|M|&lt;f32&gt
    <td>|m| `*` |v| :  vec|N|&lt;f32&gt<br>
    <td>Linear algebra matrix-column-vector product:
        Component |i| of the result is `dot`(|m|[|i|],|v|)
       <br>OpMatrixTimesVector
  <tr algorithm="matrix-row-vector multiply">
    <td>
        |m|: mat|M|x|N|&lt;f32&gt<br>
        |v|: vec|N|&lt;f32&gt
    <td>|v| `*` |m| :  vec|M|&lt;f32&gt<br>
    <td>Linear algebra row-vector-matrix product:<br>
        [=transpose=](transpose(|m|) `*` transpose(|v|))
       <br>OpVectorTimesMatrix
  <tr algorithm="matrix-matrix multiply">
    <td>|e1|: mat|K|x|N|&lt;f32&gt<br>
        |e2|: mat|M|x|K|&lt;f32&gt
    <td>|e1| `*` |e2| :  mat|M|x|N|&lt;f32&gt<br>
    <td>Linear algebra matrix product.<br>OpMatrixTimesMatrix

</table>

## Comparison Expressions TODO ## {#comparison-expr}

<table class='data'>
  <caption>Comparisons over scalars</caption>
  <thead>
    <tr><th>Precondition<th>Conclusion<th>Notes
  </thead>
  <tr><td>*e1* : bool<br>
          *e2* : bool<br>
       <td class="nowrap">`e1 == e2` : bool
       <td>Equality (OpLogicalEqual)
  <tr><td>*e1* : bool<br>
          *e2* : bool<br>
       <td class="nowrap">`e1 != e2` : bool
       <td>Inequality (OpLogicalNotEqual)
  <tr><td>*e1* : i32<br>
          *e2* : i32<br>
       <td class="nowrap">`e1 == e2` : bool
       <td>Equality (OpIEqual)
  <tr><td>*e1* : i32<br>
          *e2* : i32<br>
       <td class="nowrap">`e1 != e2` : bool
       <td>Inequality (OpINotEqual)
  <tr><td>*e1* : i32<br>
          *e2* : i32<br>
       <td class="nowrap">`e1 < e2` : bool
       <td>Less than (OpSLessThan)
  <tr><td>*e1* : i32<br>
          *e2* : i32<br>
       <td class="nowrap">`e1 <= e2` : bool
       <td>Less than or equal (OpSLessThanEqual)
  <tr><td>*e1* : i32<br>
          *e2* : i32<br>
       <td class="nowrap">`e1 >= e2` : bool
       <td>Greater than or equal (OpSGreaterThanEqual)
  <tr><td>*e1* : i32<br>
          *e2* : i32<br>
       <td class="nowrap">`e1 > e2` : bool
       <td>Greater than (OpSGreaterThan)
  <tr><td>*e1* : u32<br>
          *e2* : u32<br>
       <td class="nowrap">`e1 == e2` : bool
       <td>Equality (OpIEqual)
  <tr><td>*e1* : u32<br>
          *e2* : u32<br>
       <td class="nowrap">`e1 != e2` : bool
       <td>Inequality (OpINotEqual)
  <tr><td>*e1* : u32<br>
          *e2* : u32<br>
       <td class="nowrap">`e1 < e2` : bool
       <td>Less than (OpULessThan)
  <tr><td>*e1* : u32<br>
          *e2* : u32<br>
       <td class="nowrap">`e1 <= e2` : bool
       <td>Less than or equal (OpULessThanEqual)
  <tr><td>*e1* : u32<br>
          *e2* : u32<br>
       <td class="nowrap">`e1 >= e2` : bool
       <td>Greater than or equal (OpUGreaterThanEqual)
  <tr><td>*e1* : u32<br>
          *e2* : u32<br>
       <td class="nowrap">`e1 > e2` : bool
       <td>Greater than (OpUGreaterThan)
  <tr><td>*e1* : f32<br>
          *e2* : f32<br>
       <td class="nowrap">`e1 == e2` : bool
       <td>Equality (OpFOrdEqual)
  <tr><td>*e1* : f32<br>
          *e2* : f32<br>
       <td class="nowrap">`e1 != e2` : bool
       <td>Equality (OpFOrdNotEqual)
  <tr><td>*e1* : f32<br>
          *e2* : f32<br>
       <td class="nowrap">`e1 < e2` : bool
       <td>Less than (OpFOrdLessThan)
  <tr><td>*e1* : f32<br>
          *e2* : f32<br>
       <td class="nowrap">`e1 <= e2` : bool
       <td>Less than or equal (OpFOrdLessThanEqual)
  <tr><td>*e1* : f32<br>
          *e2* : f32<br>
       <td class="nowrap">`e1 >= e2` : bool
       <td>Greater than or equal (OpFOrdGreaterThanEqual)
  <tr><td>*e1* : f32<br>
          *e2* : f32<br>
       <td class="nowrap">`e1 > e2` : bool
       <td>Greater than (OpFOrdGreaterThan)
</table>

<table class='data'>
  <caption>Comparisons over vectors</caption>
  <thead>
    <tr><th>Precondition<th>Conclusion<th>Notes
  </thead>
  <tr><td>*e1* : *T*<br>
          *e2* : *T*<br>
          *T* is vec*N*&lt;bool&gt;
       <td class="nowrap">`e1 == e2` : vec*N*&lt;bool&gt;
       <td>Component-wise equality<br>
           Component |i| of the result is `(`|e1|`[`|i|`] == `|e2|`[`|i|`])`<br>
           (OpLogicalEqual)
  <tr><td>*e1* : *T*<br>
          *e2* : *T*<br>
          *T* is vec*N*&lt;bool&gt;
       <td class="nowrap">`e1 != e2` : vec*N*&lt;bool&gt;
       <td>Component-wise inequality<br>
           Component |i| of the result is `(`|e1|`[`|i|`] != `|e2|`[`|i|`])`<br>
           (OpLogicalNotEqual)
  <tr><td>*e1* : *T*<br>
          *e2* : *T*<br>
          *T* is vec*N*&lt;i32&gt;
       <td class="nowrap">`e1 == e2` : vec*N*&lt;bool&gt;
       <td>Component-wise equality (OpIEqual)
  <tr><td>*e1* : *T*<br>
          *e2* : *T*<br>
          *T* is vec*N*&lt;i32&gt;
       <td class="nowrap">`e1 != e2` : vec*N*&lt;bool&gt;
       <td>Component-wise inequality (OpINotEqual)
  <tr><td>*e1* : *T*<br>
          *e2* : *T*<br>
          *T* is vec*N*&lt;i32&gt;
       <td class="nowrap">`e1 < e2` : vec*N*&lt;bool&gt;
       <td>Component-wise less than (OpSLessThan)
  <tr><td>*e1* : *T*<br>
          *e2* : *T*<br>
          *T* is vec*N*&lt;i32&gt;
       <td class="nowrap">`e1 <= e2` : vec*N*&lt;bool&gt;
       <td>Component-wise less than or equal (OpSLessThanEqual)
  <tr><td>*e1* : *T*<br>
          *e2* : *T*<br>
          *T* is vec*N*&lt;i32&gt;
       <td class="nowrap">`e1 >= e2` : vec*N*&lt;bool&gt;
       <td>Component-wise greater than or equal (OpSGreaterThanEqual)
  <tr><td>*e1* : *T*<br>
          *e2* : *T*<br>
          *T* is vec*N*&lt;i32&gt;
       <td class="nowrap">`e1 > e2` : vec*N*&lt;bool&gt;
       <td>Component-wise greater than (OpSGreaterThan)
  <tr><td>*e1* : *T*<br>
          *e2* : *T*<br>
          *T* is vec*N*&lt;u32&gt;
       <td class="nowrap">`e1 == e2` : vec*N*&lt;bool&gt;
       <td>Component-wise equality (OpIEqual)
  <tr><td>*e1* : *T*<br>
          *e2* : *T*<br>
          *T* is vec*N*&lt;u32&gt;
       <td class="nowrap">`e1 != e2` : vec*N*&lt;bool&gt;
       <td>Component-wise inequality (OpINotEqual)
  <tr><td>*e1* : *T*<br>
          *e2* : *T*<br>
          *T* is vec*N*&lt;u32&gt;
       <td class="nowrap">`e1 < e2` : vec*N*&lt;bool&gt;
       <td>Component-wise less than (OpULessThan)
  <tr><td>*e1* : *T*<br>
          *e2* : *T*<br>
          *T* is vec*N*&lt;u32&gt;
       <td class="nowrap">`e1 <= e2` : vec*N*&lt;bool&gt;
       <td>Component-wise less than or equal (OpULessThanEqual)
  <tr><td>*e1* : *T*<br>
          *e2* : *T*<br>
          *T* is vec*N*&lt;u32&gt;
       <td class="nowrap">`e1 >= e2` : vec*N*&lt;bool&gt;
       <td>Component-wise greater than or equal (OpUGreaterThanEqual)
  <tr><td>*e1* : *T*<br>
          *e2* : *T*<br>
          *T* is vec*N*&lt;u32&gt;
       <td class="nowrap">`e1 > e2` : vec*N*&lt;bool&gt;
       <td>Component-wise greater than (OpUGreaterThan)
          *T* is vec*N*&lt;u32&gt;
  <tr><td>*e1* : *T*<br>
          *e2* : *T*<br>
          *T* is vec*N*&lt;f32&gt;
       <td class="nowrap">`e1 == e2` : vec*N*&lt;bool&gt;
       <td>Component-wise equality (OpFOrdEqual)
  <tr><td>*e1* : *T*<br>
          *e2* : *T*<br>
          *T* is vec*N*&lt;f32&gt;
       <td class="nowrap">`e1 != e2` : vec*N*&lt;bool&gt;
       <td>Component-wise inequality (OpFOrdNotEqual)
  <tr><td>*e1* : *T*<br>
          *e2* : *T*<br>
          *T* is vec*N*&lt;f32&gt;
       <td class="nowrap">`e1 < e2` : vec*N*&lt;bool&gt;
       <td>Component-wise less than (OpFOrdLessThan)
  <tr><td>*e1* : *T*<br>
          *e2* : *T*<br>
          *T* is vec*N*&lt;f32&gt;
       <td class="nowrap">`e1 <= e2` : vec*N*&lt;bool&gt;
       <td>Component-wise less than or equal (OpFOrdLessThanEqual)
  <tr><td>*e1* : *T*<br>
          *e2* : *T*<br>
          *T* is vec*N*&lt;f32&gt;
       <td class="nowrap">`e1 >= e2` : vec*N*&lt;bool&gt;
       <td>Component-wise greater than or equal (OpFOrdGreaterThanEqual)
  <tr><td>*e1* : *T*<br>
          *e2* : *T*<br>
          *T* is vec*N*&lt;f32&gt;
       <td class="nowrap">`e1 > e2` : vec*N*&lt;bool&gt;
       <td>Component-wise greater than (OpFOrdGreaterThan)
</table>

## Bit Expressions TODO ## {#bit-expr}

<table class='data'>
  <caption>Unary bitwise operations</caption>
  <thead>
    <tr><th>Precondition<th>Conclusion<th>Notes
  </thead>
  <tr algorithm="scalar unsigned complement">
       <td>|e| : u32<br>
       <td class="nowrap">`~`|e| : u32
       <td>Bitwise complement on unsigned integers. Result is the mathematical value (2<sup>32</sup> - 1  - |e|).
          <br>OpNot
  <tr algorithm="vector unsigned complement">
      <td>|e| : vec|N|&lt;u32&gt;
      <td>`~`|e| : vec|N|&lt;u32&gt;
      <td>Component-wise unsigned complement. Component |i| of the result is `~(`|e|`[`|i|`])`.
          <br>OpNot
  <tr algorithm="scalar signed complement">
       <td>|e| : i32<br>
       <td class="nowrap">`~`|e| : i32
       <td>Bitwise complement on signed integers. Result is i32(~u32(|e|)).
          <br>OpNot
  <tr algorithm="vector signed complement">
      <td>|e| : vec|N|&lt;i32&gt;
      <td>`~`|e| : vec|N|&lt;i32&gt;
      <td>Component-wise signed complement. Component |i| of the result is `~(`|e|`[`|i|`])`.
          <br>OpNot
</table>

<table class='data'>
  <caption>Binary bitwise operations</caption>
  <thead>
    <tr><th>Precondition<th>Conclusion<th>Notes
  </thead>
  <tr><td>*e1* : *T*<br>
          *e2* : *T*<br>
          *T* is *Integral*
       <td class="nowrap">`e1 | e2` : *T*
       <td>Bitwise-or
  <tr><td>*e1* : *T*<br>
          *e2* : *T*<br>
          *T* is *Integral*
       <td class="nowrap">`e1 & e2` : *T*
       <td>Bitwise-and
  <tr><td>*e1* : *T*<br>
          *e2* : *T*<br>
          *T* is *Integral*
       <td class="nowrap">`e1 ^ e2` : *T*
       <td>Bitwise-exclusive-or
</table>


<table class='data'>
  <caption>Bit shift expressions</caption>
  <thead>
    <tr><th>Precondition<th>Conclusion<th>Notes
  </thead>
  <tr algorithm="scalar shift left"><td>|e1| : |T|<br>
          |e2| : u32<br>
          |T| is *Int*
       <td class="nowrap">|e1| `<<` |e2| : |T|
       <td>Shift left:<br>
           Shift |e1| left, inserting zero bits at the least significant positions,
           and discarding the most significant bits.
           The number of bits to shift is the value of |e2| modulo the bit width of |e1|.<br>
           (OpShiftLeftLogical)
  <tr algorithm="vector shift left"><td>|e1| : vec|N|&lt;|T|&gt;<br>
          |e2| : vec|N|&lt;u32&gt;<br>
          |T| is *Int*
       <td class="nowrap">|e1| `<<` |e2| : vec|N|&lt;|T|&gt;
       <td>Component-wise shift left:<br>
           Component |i| of the result is `(`|e1|`[`|i|`] << `|e2|`[`|i|`])`<br>
           (OpShiftLeftLogical)
  <tr algorithm="scalar logical shift right"><td>|e1| : u32<br>
          |e2| : u32<br>
       <td class="nowrap">|e1| `>>` |e2| `: u32`
       <td >Logical shift right:<br>
           Shift |e1| right, inserting zero bits at the most significant positions,
           and discarding the least significant bits.
           The number of bits to shift is the value of |e2| modulo the bit width of |e1|.
           (OpShiftRightLogical)
  <tr algorithm="vector logical shift right"><td>|e1| : vec|N|&lt;u32&gt;<br>
          |e2| : vec|N|&lt;u32&gt;<br>
       <td class="nowrap">|e1| `>>` |e2| : vec|N|&lt;u32&gt;
       <td>Component-wise logical shift right:<br>
           Component |i| of the result is `(`|e1|`[`|i|`] >> `|e2|`[`|i|`])`
           (OpShiftRightLogical)
  <tr algorithm="scalar arithmetic shift right"><td>|e1| : i32<br>
          |e2| : u32<br>
       <td class="nowrap">|e1| `>>` |e2| : i32
       <td>Arithmetic shift right:<br>
           Shift |e1| right, copying the sign bit of |e1| into the most significant positions,
           and discarding the least significant bits.
           The number of bits to shift is the value of |e2| modulo the bit width of |e1|.
           (OpShiftRightArithmetic)
  <tr algorithm="vector arithmetic shift right"><td>|e1| : vec|N|&lt;i32&gt;<br>
          |e2| : vec|N|&lt;u32&gt;<br>
       <td class="nowrap">|e1| `>>` |e2| : vec|N|&lt;i32&gt;
       <td>Component-wise arithmetic shift right:<br>
           Component |i| of the result is `(`|e1|`[`|i|`] >> `|e2|`[`|i|`])`
           (OpShiftRightArithmetic)
</table>

## Function Call Expression ## {#function-call-expr}

A function call expression executes a [=function call=] where the called
function has a [=return type=].
If the called function does not return a value, a function call statement
should be used instead.
See [[#function-call-statement]].

## Variable Identifier Expression ## {#var-identifier-expr}

<table class='data'>
  <caption>Getting a reference from a variable name</caption>
  <thead>
    <tr><th>Precondition<th>Conclusion<th>Description
  </thead>
  <tr algorithm="variable reference">
       <td>
          |v| is an identifier [=resolves|resolving=] to
          an [=in scope|in-scope=] variable declared in [=storage class=] |SC|
          with [=store type=] |T|
       <td class="nowrap">
          |v| : ref&lt;|SC|,|T|&gt;
       <td>Result is a reference to the storage for the named variable |v|.
</table>

## Formal Parameter Expression  ## {#formal-parameter-expr}

<table class='data'>
  <caption>Getting the value of an identifier declared as a formal parameter to a function</caption>
  <thead>
    <tr><th>Precondition<th>Conclusion<th>Description
  </thead>
  <tr algorithm="formal parameter value">
       <td>
          |a| is an identifier [=resolves|resolving=] to
          an [=in scope|in-scope=] formal paramter declaration with type |T|
       <td class="nowrap">
          |a| : |T|
       <td>Result is the value supplied for the corresponding function call operand at the call site
           invoking this instance of the function.
</table>

## Address-Of Expression  ## {#address-of-expr}

The <dfn noexport>address-of</dfn> operator converts a reference to its corresponding pointer.

<table class='data'>
  <caption>Getting a pointer from a reference</caption>
  <thead>
    <tr><th>Precondition<th>Conclusion<th>Description
  </thead>
  <tr algorithm="address-of expression">
       <td>
          |r| : ref&lt;|SC|,|T|&gt;
       <td class="nowrap">
          `&`|r| : ptr&lt;|SC|,|T|&gt;
       <td>Result is the pointer value corresponding to the
           same [=memory view=] as the reference value |r|.
</table>

## Indirection Expression  ## {#indirection-expr}

The <dfn noexport>indirection</dfn> operator converts a pointer to its corresponding reference.

<table class='data'>
  <caption>Getting a reference from a pointer</caption>
  <thead>
    <tr><th>Precondition<th>Conclusion<th>Description
  </thead>
  <tr algorithm="indirection expression">
       <td>
          |p| : ptr&lt;|SC|,|T|&gt;
       <td class="nowrap">
          `*`|p| : ref&lt;|SC|,|T|&gt;
       <td>Result is the reference value corresponding to the
           same [=memory view=] as the pointer value |p|.
</table>

## Constant Identifier Expression  ## {#constant-identifier-expr}

<table class='data'>
  <caption>Getting the value of a `let`-declared identifier</caption>
  <thead>
    <tr><th>Precondition<th>Conclusion<th>Description
  </thead>
  <tr algorithm="pipeline-overridable constant value">
       <td>
          |c| is an identifier [=resolves|resolving=] to
          an [=in scope|in-scope=] [=pipeline-overridable=] `let` declaration with type |T|
       <td class="nowrap">
          |c| : |T|
       <td>If pipeline creation specified a value for the [=pipeline constant ID|constant ID=],
           then the result is that value.
           This value may be different for different pipeline instances.<br>
           Otherwise, the result is the value computed for the initializer expression.
           Pipeline-overridable constants appear at module-scope, so evaluation occurs
           before the shader begins execution.<br>
           Note: Pipeline creation fails if no initial value was specified in the API call
           and the `let`-declaration has no intializer expression.
  <tr algorithm="constant value">
       <td>
          |c| is an identifier [=resolves|resolving=] to
          an [=in scope|in-scope=] `let` declaration with type |T|,
          and is not pipeline-overridable
       <td class="nowrap">
          |c| : |T|
       <td>Result is the value computed for the initializer expression.<br>
           For a `let` declaration at module scope, evaluation occurs before the shader begins execution.<br>
           For a `let` declaration inside a function, evaluation occurs each time control reaches
           the declaration.<br>
</table>


## Expression Grammar Summary ## {#expression-grammar}

<pre class='def'>
primary_expression
  : IDENT argument_expression_list?
  | type_decl argument_expression_list
  | const_literal
  | paren_rhs_statement
  | BITCAST LESS_THAN type_decl GREATER_THAN paren_rhs_statement
      OpBitcast

argument_expression_list
  : PAREN_LEFT ((short_circuit_or_expression COMMA)* short_circuit_or_expression COMMA?)? PAREN_RIGHT

postfix_expression
  :
  | BRACKET_LEFT short_circuit_or_expression BRACKET_RIGHT postfix_expression
  | PERIOD IDENT postfix_expression

unary_expression
  : singular_expression
  | MINUS unary_expression
      OpSNegate
      OpFNegate
  | BANG unary_expression
      OpLogicalNot
  | TILDE unary_expression
      OpNot
  | STAR unary_expression
  | AND unary_expression

singular_expression
  : primary_expression postfix_expression

multiplicative_expression
  : unary_expression
  | multiplicative_expression STAR unary_expression
      OpVectorTimesScalar
      OpMatrixTimesScalar
      OpVectorTimesMatrix
      OpMatrixTimesVector
      OpMatrixTimesMatrix
      OpIMul
      OpFMul
  | multiplicative_expression FORWARD_SLASH unary_expression
      OpUDiv
      OpSDiv
      OpFDiv
  | multiplicative_expression MODULO unary_expression
      OpUMOd
      OpSMod
      OpFMod

additive_expression
  : multiplicative_expression
  | additive_expression PLUS multiplicative_expression
      OpIAdd
      OpFAdd
  | additive_expression MINUS multiplicative_expression
      OpFSub
      OpISub

shift_expression
  : additive_expression
  | shift_expression SHIFT_LEFT additive_expression
        OpShiftLeftLogical
  | shift_expression SHIFT_RIGHT additive_expression
        OpShiftRightLogical or OpShiftRightArithmetic

relational_expression
  : shift_expression
  | relational_expression LESS_THAN shift_expression
        OpULessThan
        OpFOrdLessThan
  | relational_expression GREATER_THAN shift_expression
        OpUGreaterThan
        OpFOrdGreaterThan
  | relational_expression LESS_THAN_EQUAL shift_expression
        OpULessThanEqual
        OpFOrdLessThanEqual
  | relational_expression GREATER_THAN_EQUAL shift_expression
        OpUGreaterThanEqual
        OpFOrdGreaterThanEqual

equality_expression
  : relational_expression
  | relational_expression EQUAL_EQUAL relational_expression
        OpIEqual
        OpFOrdEqual
  | relational_expression NOT_EQUAL relational_expression
        OpINotEqual
        OpFOrdNotEqual

and_expression
  : equality_expression
  | and_expression AND equality_expression

exclusive_or_expression
  : and_expression
  | exclusive_or_expression XOR and_expression

inclusive_or_expression
  : exclusive_or_expression
  | inclusive_or_expression OR exclusive_or_expression

short_circuit_and_expression
  : inclusive_or_expression
  | short_circuit_and_expression AND_AND inclusive_or_expression

short_circuit_or_expression
  : short_circuit_and_expression
  | short_circuit_or_expression OR_OR short_circuit_and_expression
</pre>


# Statements TODO # {#statements}

## Compound Statement ## {#compound-statement}

A compound statement is a brace-enclosed group of zero or more statements.
When a declaration is one of those statements, its identifier is [=in scope=]
from the start of the next statement until the end of the compound statement.

<pre class='def'>
compound_statement
  : BRACE_LEFT statements BRACE_RIGHT
</pre>

## Assignment Statement ## {#assignment}

An <dfn noexport>assignment statement</dfn> replaces the contents of a variable,
or a portion of a variable, with a new value.

The
expression to the left of the equals token is the <dfn noexport>left-hand side</dfn>,
and the
expression to the right of the equals token is the <dfn noexport>right-hand side</dfn>.

<table class='data'>
  <thead>
    <tr><th>Precondition<th>Statement<th>Description
  </thead>
  <tr algorithm="assignment">
    <td>|r| : ref<|SC|,|T|>,<br>
        |e| : |T|,<br>
        |T| is [=storable=],<br>
        |SC| is a writable [=storage class=]
    <td class="nowrap">|r| = |e|;
    <td>Evaluates |e|, evaluates |r|, then writes the value computed for |e| into
        the [=memory locations=] referenced by |r|.<br>
        (OpStore)
</table>

The [=originating variable=] of the left-hand side must not have an `access(read)` access attribute.

In the simplest case, the left hand side of the assignment statement is the
name of a variable.  See [[#forming-references-and-pointers]] for other cases.

    <div class='example wgsl' heading='Assignments'>
      <xmp highlight='rust'>
        struct S {
            age: i32;
            weight: f32;
        };
        var<private> person : S;

        fn f() {
            var a: i32 = 20;
            a = 30;           // Replace the contents of 'a' with 30.

            person.age = 31;  // Write 31 into the age field of the person variable.

            var uv: vec2<f32>;
            uv.y = 1.25;      // Place 1.25 into the second component of uv.

            const uv_x_ptr: ptr<function,f32> = &uv.x;
            *uv_x_ptr = 2.5;   // Place 2.5 into the first component of uv.

            var friend : S;
            // Copy the contents of the 'person' variable into the 'friend' variable.
            friend = person;
        }
      </xmp>
    </div>

<pre class='def'>
assignment_statement
  : singular_expression EQUAL short_circuit_or_expression
      If singular_expression is a variable, this maps to OpStore to the variable.
      Otherwise, singular expression is a pointer expression in an Assigning (L-value) context
      which maps to OpAccessChain followed by OpStore
</pre>

## Control flow TODO ## {#control-flow}

### Sequence TODO ### {#sequence-statement}

### If Statement ### {#if-statement}

<pre class='def'>
if_statement
  : IF paren_rhs_statement compound_statement elseif_statement? else_statement?

elseif_statement
  : ELSE_IF paren_rhs_statement compound_statement elseif_statement?

else_statement
  : ELSE compound_statement
</pre>

An if statement provides provides predicated execution of a compound statement based on
the evaluation of an expression.

If statements in [SHORTNAME] use an if/elseif/else structure, that contains a single required
`if` clause, zero or more `elseif` clauses and a single optional `else` clause.
Each of the expressions for the `if` and `elseif` clause conditions must be a scalar boolean expression.

An if statement is executed as follows:
* The condition associated with the `if` clause is evaluated and, if the result is `true`,
    control transfers to the associated compound statement.
* Otherwise, the condition of the next `elseif` clause in textual order (if one exists) is evaluated
     and, if the result is `true`, control transfers to the associated compound statement.
     * This behavior is repeated for all `elseif` clauses until one of the conditions evaluates to `true`.
* If no condition evaluates to `true`, then control transfers to the compound statement
    associated with the `else` clause (if it exists).

### Switch Statement ### {#switch-statement}

<pre class='def'>
switch_statement
  : SWITCH paren_rhs_statement BRACE_LEFT switch_body+ BRACE_RIGHT

switch_body
  : CASE case_selectors COLON BRACE_LEFT case_body BRACE_RIGHT
  | DEFAULT COLON BRACE_LEFT case_body BRACE_RIGHT

case_selectors
  : const_literal (COMMA const_literal)* COMMA?

case_body
  :
  | statement case_body
  | FALLTHROUGH SEMICOLON
</pre>

A switch statement transfers control to one of a set of case clauses, or to the `default` clause,
depending on the evaluation of a selector expression.

The selector expression must be of a scalar integer type.
If the selector value equals a value in a case selector list, then control is transferred to
the body of that case clause.
If the selector value does not equal any of the case selector values, then control is
transferred to the `default` clause.

Each switch statement must have exactly one default clause.

The case selector values must have the same type as the selector expression.

A literal value must not appear more than once in the case selectors for a switch statement.

Note: The value of the literal is what matters, not the spelling.
For example `0`, `00`, and `0x0000` all denote the zero value.

When control reaches the end of a case body, control normally transfers to the first statement
after the switch statement.
Alternately, executing a `fallthrough` statement transfers control to the body of the next case clause or
default clause, whichever appears next in the switch body.
A `fallthrough` statement must not appear as the last statement in the last clause of a switch.
When a declaration appears in a case body, its identifier is [=in scope=] from
the start of the next statement until the end of the case body.

Note: Identifiers declared in a case body are not [=in scope=] of case bodies
which are reachable via a `fallthrough` statement.


### Loop Statement ### {#loop-statement}

<pre class='def'>
loop_statement
  : LOOP BRACE_LEFT statements continuing_statement? BRACE_RIGHT
</pre>

The <dfn noexport>loop body</dfn> is special form [compound
statement](#compound-statement) that executes repeatedly.
Each execution of the loop body is called an <dfn noexport>iteration</dfn>.

The identifier of a declaration in a loop is [=in scope=] from the start of the
next statement until the end of the loop body.
The declaration is executed each time it is reached, so each new iteration
creates a new instance of the variable or constant, and re-initializes it.

This repetition can be interrupted by a [[#break-statement]], `return`, or
`discard`.

Optionally, the last statement in the loop body may be a
[[#continuing-statement]].

Note: The loop statement is one of the biggest differences from other shader
languages.

This design directly expresses loop idioms commonly found in compiled code.
In particular, placing the loop update statements at the end of the loop body
allows them to naturally use values defined in the loop body.

<div class='example glsl' heading='GLSL Loop'>
  <xmp>
    int a = 2;
    for (int i = 0; i < 4; i++) {
      a *= 2;
    }
  </xmp>
</div>

<div class='example wgsl function-scope' heading="[SHORTNAME] Loop">
  <xmp>
    let a : i32 = 2;
    var i : i32 = 0;      // <1>
    loop {
      if (i >= 4) { break; }

      a = a * 2;

      i = i + 1;
    }
  </xmp>
</div>
* <1> The initialization is listed before the loop.

<div class='example glsl' heading='GLSL Loop with continue'>
  <xmp>
    int a = 2;
    const int step = 1;
    for (int i = 0; i < 4; i += step) {
      if (i % 2 == 0) continue;
      a *= 2;
    }
  </xmp>
</div>

<div class='example wgsl' heading="[SHORTNAME] Loop with continue">
  <xmp>
    var a : i32 = 2;
    var i : i32 = 0;
    loop {
      if (i >= 4) { break; }

      let step : i32 = 1;

      i = i + 1;
      if (i % 2 == 0) { continue; }

      a = a * 2;
    }
  </xmp>
</div>

<div class='example wgsl' heading="[SHORTNAME] Loop with continue and continuing">
  <xmp>
    var a : i32 = 2;
    var i : i32 = 0;
    loop {
      if (i >= 4) { break; }

      let step : i32 = 1;

      if (i % 2 == 0) { continue; }

      a = a * 2;

      continuing {   // <2>
        i = i + step;
      }
    }
  </xmp>
</div>
* <2> The continue construct is placed at the end of the `loop`

### For Statement ### {#for-statement}

<pre class='def'>
for_statement
  : FOR PAREN_LEFT for_header PAREN_RIGHT compound_statement

for_header
  : (variable_statement | assignment_statement | func_call_statement)? SEMICOLON
     short_circuit_or_expression? SEMICOLON
     (assignment_statement | func_call_statement)?
</pre>

The `for(initializer; condition; continuing) { body }` statement is syntactic sugar on top of a [[#loop-statement]] with the same `body`. Additionally:
* If `initializer` is non-empty, it is executed inside an additional scope before the first iteration.
* If `condition` is non-empty, it is checked at the beginning of the loop body and if unsatisfied then a [[#break-statement]] is executed.
* If `continuing` is non-empty, it becomes a [[#continuing-statement]] at the end of the loop body.

The `initializer` of a for loop is executed once prior to executing the loop.
When a declaration appears in the initializer, its identifier is [=in scope=] until the end of the `body`.
Unlike declarations in the `body`, the declaration is not re-initialized each iteration.

The `condition`, `body` and `continuing` execute in that order to form a loop [=iteration=].
The `body` is a special form of [compound statement](#compound-statement).
The identifier of a declaration in the `body` is [=in scope=] from the start of
the next statement until the end of the `body`.
The declaration is executed each time it is reached, so each new iteration
creates a new instance of the variable or constant, and re-intializes it.

<div class='example glsl' heading="For to Loop transformation">
  <xmp>
    for(var i : i32 = 0; i < 4; i = i + 1) {
      if (a == 0) {
        continue;
      }
      a = a + 2;
    }
  </xmp>
</div>

Converts to:

<div class='example wgsl function-scope' heading="For to Loop transformation">
  <xmp>
    { // Introduce new scope for loop variable i
      var i : i32 = 0;
      var a : i32 = 0;
      loop {
        if (!(i < 4)) {
          break;
        }

        if (a == 0) {
          continue;
        }
        a = a + 2;

        continuing {
          i = i + 1;
        }
      }
    }
  </xmp>
</div>


### Break ### {#break-statement}

<pre class='def'>
break_statement
  : BREAK
</pre>

Use a `break` statement to transfer control to the first statement
after the body of the nearest-enclosing [[#loop-statement]]
or [[#switch-statement]].

When a `break` statement is placed such that it would exit from a loop's [[#continuing-statement]],
then:

* The `break` statement must appear as either:
    * The only statement in the `if` clause of an `if` statement that has:
        * no `else` clause or an empty `else` clause
        * no `elseif` clauses
    * The only statement in the `else` clause of an `if` statement that has an empty `if` clause and no `elseif` clauses.
* That `if` statement must appear last in the `continuing` clause.

<div class='example wgsl function-scope' heading="[SHORTNAME] Valid loop if-break from a continuing clause">
  <xmp>
    var a : i32 = 2;
    var i : i32 = 0;
    loop {
      let step : i32 = 1;

      if (i % 2 == 0) { continue; }

      a = a * 2;

      continuing {
        i = i + step;
        if (i >= 4) { break; }
      }
    }
  </xmp>
</div>

<div class='example wgsl function-scope' heading="[SHORTNAME] Valid loop if-else-break from a continuing clause">
  <xmp>
    var a : i32 = 2;
    var i : i32 = 0;
    loop {
      let step : i32 = 1;

      if (i % 2 == 0) { continue; }

      a = a * 2;

      continuing {
        i = i + step;
        if (i < 4) {} else { break; }
      }
    }
  </xmp>
</div>

<div class='example wgsl function-scope expect-error' heading="[SHORTNAME] Invalid breaks from a continuing clause">
  <xmp>
    var a : i32 = 2;
    var i : i32 = 0;

    loop {
      let step : i32 = 1;

      if (i % 2 == 0) { continue; }

      a = a * 2;

      continuing {
        i = i + step;
        break;                                     // Invalid: too early
        if (i < 4) { i = i + 1; } else { break; }  // Invalid: if is too complex, and too early
        if (i >= 4) { break; } else { i = i + 1; } // Invalid: if is too complex
      }
    }
  </xmp>
</div>

### Continue ### {#continue-statement}

<pre class='def'>
continue_statement
  : CONTINUE
</pre>

Use a `continue` statement to transfer control in the nearest-enclosing [[#loop-statement]]:

*  forward to the [[#continuing-statement]] at the end of the body of that loop, if it exists.
*  otherwise backward to the first statement in the loop body, starting the next iteration

A `continue` statement must not be placed such that it would transfer
control to an enclosing [[#continuing-statement]].
(It is a *forward* branch when branching to a `continuing` statement.)

A `continue` statement must not be placed such that it would transfer
control past a declaration used in the targeted continuing construct.

<div class='example wgsl function-scope expect-error' heading="Invalid continue bypasses declaration">
  <xmp>
    var i : i32 = 0;
    loop {
      if (i >= 4) { break; }
      if (i % 2 == 0) { continue; } // <3>

      let step : i32 = 2;

      continuing {
        i = i + step;
      }
    }
  </xmp>
</div>
* <3> The `continue` is invalid because it bypasses the declaration of `step` used in the `continuing` construct

### Continuing Statement ### {#continuing-statement}

<pre class='def'>
continuing_statement
  : CONTINUING compound_statement
</pre>

A *continuing* construct is a block of statements to be executed at the end of a loop iteration.
The construct is optional.

The block of statements must not contain a return or discard statement.

### Return Statement ### {#return-statement}

<pre class='def'>
return_statement
  : RETURN short_circuit_or_expression?
</pre>

A <dfn noexport>return</dfn> statement ends execution of the current function.
If the function is an [=entry point=], then the current shader invocation
is terminated.
Otherwise, evaluation continues with the next expression or statement after
the evaluation of the call site of the current function invocation.

If the function doesn't have a [=return type=], then the return statement is
optional. If the return statement is provided for such a function, it must not
supply a value.
Otherwise the expression must be present, and is called the *return value*.
In this case the call site of this function invocation evaluates to the return value.
The type of the return value must match the return type of the function.


### Discard Statement ### {#discard-statement}

The `discard` statement must only be used in a [=fragment=] shader stage.
Executing a `discard` statement will:

* immediately terminate the current invocation, and
* prevent evaluation and generation of a return value for the [=entry point=], and
* prevent the current fragment from being processed downstream in the [=GPURenderPipeline=].

Only statements
executed prior to the `discard` statement will have observable effects.

Note: A `discard` statement may be executed by any
[=functions in a shader stage|function in a fragment stage=] and the effect is the same:
immediate termination of the invocation.

After a `discard` statement is executed, control flow is non-uniform for the
duration of the entry point.

Issue: [[#uniform-control-flow]] needs to state whether all invocations being discarded maintains uniform control flow.

<div class='example' heading='Using the discard statement to throw away a fragment'>
  <xmp>
  var<private> will_emit_color: bool = false;

  fn discard_if_shallow(pos: vec4<f32>) {
    if (pos.z < 0.001) {
      // If this is executed, then the will_emit_color flag will
      // never be set to true.
      discard;
    }
    will_emit_color = true;
  }

  [[stage(fragment)]]
  fn main([[builtin(position)]] coord_in: vec4<f32>)
    -> [[location(0)]] vec4<f32>
  {
    discard_if_shallow(coord_in);

    // Set the flag and emit red, but only if the helper function
    // did not execute the discard statement.
    will_emit_color = true;
    return vec4<f32>(1.0, 0.0, 0.0, 1.0);
  }
  </xmp>
</div>

## Function Call Statement ## {#function-call-statement}

<pre class='def'>
func_call_statement
  : IDENT argument_expression_list
</pre>

A function call statement executes a [=function call=] where the called
function does not return a value.
If the called function returns a value, that value must be consumed either
through assignment, evaluation in another expression or through use of the
`ignore` built-in function (see [[#value-steering-functions]]).

## Statements Grammar Summary ## {#statements-summary}

<pre class='def'>
compound_statement
  : BRACE_LEFT statements BRACE_RIGHT

paren_rhs_statement
  : PAREN_LEFT short_circuit_or_expression PAREN_RIGHT

statements
  : statement*

statement
  : SEMICOLON
  | return_statement SEMICOLON
  | if_statement
  | switch_statement
  | loop_statement
  | for_statement
  | func_call_statement SEMICOLON
  | variable_statement SEMICOLON
  | break_statement SEMICOLON
  | continue_statement SEMICOLON
  | DISCARD SEMICOLON
  | assignment_statement SEMICOLON
  | compound_statement
</pre>


# Functions # {#functions}

A <dfn dfn-for="function" noexport>function</dfn> performs computational work when invoked.

A function is invoked in one of the following ways:
* By evaluating a function call expression. See [[#function-call-expr]].
* By executing a function call statement. See [[#function-call-statement]].
* An [=entry point=] function is invoked by the WebGPU implementation to perform
    the work of a [=shader stage=] in a [=pipeline=]. See [[#entry-points]]

There are two kinds of functions:
* A [=built-in function=] is provided by the [SHORTNAME] implementation,
    and is always available to a [SHORTNAME] program.
    See [[#builtin-functions]].
* A <dfn noexport>user-defined function</dfn> is declared in a [SHORTNAME] program.

## Declaring a user-defined function ## {#function-declaration-sec}

A <dfn noexport>function declaration</dfn> creates a user-defined function, by specifying:
* An optional set of attributes.
* The name of the function.
* The formal parameter list: an ordered sequence of zero
    or more [=formal parameter=] declarations,
    separated by commas, and
    surrounded by parentheses.
* An optional, possibly decorated, <dfn noexport>return type</dfn>.
* The <dfn noexport>function body</dfn>.

A function declaration must only occur at [=module scope=].
The function name is [=in scope=] from the start of the formal parameter list
until the end of the program.

A <dfn noexport>formal parameter</dfn> declaration specifies an identifier name and a type for a value that must be
provided when invoking the function.
A formal parameter may have attributes.
See [[#function-calls]].
The identifier is [=in scope=] until the end of the function.
Two formal parameters for a given function must not have the same name.

If the return type is specified, then:
* The return type must be an [=atomic-free=] [=plain type=].
* The last statement in the function body must be a [=return=] statement.

<pre class='def'>
function_decl
  : attribute_list* function_header compound_statement

function_header
  : FN IDENT PAREN_LEFT param_list PAREN_RIGHT function_return_type_decl_optional

function_return_type_decl_optional
  :
  | ARROW attribute_list* type_decl

param_list
  :
  | (param COMMA)* param COMMA?

param
  : attribute_list* variable_ident_decl
</pre>

[SHORTNAME] defines the following attributes that can be applied to function declarations:
 * [=attribute/stage=]
 * [=attribute/workgroup_size=]

[SHORTNAME] defines the following attributes that can be applied to function
parameters and return types:
 * [=attribute/builtin=]
 * [=attribute/location=]

<div class='example' heading='Simple functions'>
  <xmp>
    // Declare the add_two function.
    // It has two formal paramters, i and b.
    // It has a return type of i32.
    // It has a body with a return statement.
    fn add_two(i: i32, b: f32) -> i32 {
      return i + 2;  // A formal parameter is available for use in the body.
    }

    // A compute shader entry point function, 'main'.
    // It has no specified return type.
    // It invokes the ordinary_two function, and captures
    // the resulting value in the named value 'two'.
    [[stage(compute)]] fn main() {
       let six: i32 = add_two(4, 5.0);
    }
  </xmp>
</div>

## Function calls ## {#function-calls}

A <dfn noexport>function call</dfn> is a statement or expression which invokes a function.

The function call must supply the same number of argument values as there are
[=formal parameter|formal parameters=] in the called function.
Each argument value must have the same type as the corresponding formal
parameter, by position.

When a function call is executed the following steps occur:
* Execution of the current function is suspended.
    All [=function scope=] variables and constants maintain their current values.
* Storage is allocated for each function scope variable in the called function.
    * Initialization occurs as described in [[#var-and-let]].
* Values for the formal parameters of the called function are determined
    by matching the function call argument values by position the formal
    parameters (e.g. the first argument is matched to the first formal
    parameter).
* Control is transferred to the first statement in the called function.
* The called function is executed.
* When the called function finishes execution by either executing a return statement or reaching
    the end of the called function (if the function does not return a value),
    control is transferred back the calling function and execution is
    unsuspended.
    If the called function returns a value, that value is supplied for the
    value of the function call expression.

The location of a function call is referred to as a <dfn noexport>call site</dfn>.
Call sites are a [=dynamic context=].
As such, the same textual location may represent multiple call sites.

Note: There are no default parameter values in [SHORTNAME].
Built-in functions described this way are really overloaded functions.

Note: The current function will not resume execution if the called function or
any descendent called function executes a `discard` statement.
See [[#discard-statement]].

## Restrictions ## {#function-restriction}

* Recursion is not permitted.
    That is, there must be no cycles in the call graph.
* A [=vertex=] shader must return the `position` [=built-in output variable|built-in variable=].
    See [[#builtin-variables]].
* An entry point must never be the target of a [=function call=].
* If a function has a return type, it must be an [=atomic-free=] [=plain types|plain type=]
* A [=formal parameter|function parameter=] must one the following types:
    * atomic-free plain type
    * a pointer type
    * a texture type
    * a sampler type
* A function parameter of pointer type must be in one of
    the following storage classes:
    * [=storage classes/function=]
    * [=storage classes/private=]
    * [=storage classes/workgroup=]
* Each argument of a function call of pointer type must be one of:
    * An [[#address-of-expr|address-of expression]] of a
        [[#var-identifier-expr|variable identifier expression]]
    * A function parameter
* [SHORTNAME] assumes no aliasing is present between any combination of
    function parameters and variables.
    As such, a function parameter of pointer type must not be used to read or
    write to any [=memory locations=] of its [=originating variable=] that are
    also written via:
    * Another function parameter in the same function
    * A statement or expression in the function using the originating variable directly

Note: the aliasing restriction applies to memory location written by function
calls in the function.

Issue: Revisit aliasing rules for clarity.

# Entry Points TODO # {#entry-points}

## Shader Stages ## {#shader-stages-sec}

WebGPU issues work to the GPU in the form of [=draw command|draw=] or [=dispatch commands=].
These commands execute a pipeline in the context of a set of
[=pipeline input|inputs=], [=pipeline output|outputs=], and attached [=resources=].

A <dfn noexport>pipeline</dfn> describes the behaviour to be performed on the GPU, as a sequence
of stages, some of which are programmable.
In WebGPU, a pipeline is created before scheduling a draw or dispatch command for execution.
There are two kinds of pipelines: GPUComputePipeline, and GPURenderPipeline.

A [=dispatch command=] uses a <dfn noexport>GPUComputePipeline</dfn> to run a
<dfn noexport>compute shader stage</dfn> over a logical
grid of points with a controllable amount of parallelism,
while reading and possibly updating buffer and image resources.

A [=draw command=] uses a <dfn noexport>GPURenderPipeline</dfn> to run a multi-stage process with
two programmable stages among other fixed-function stages:

* A <dfn noexport>vertex shader stage</dfn> maps input attributes for a single vertex into
    output attributes for the vertex.
* Fixed-function stages map vertices into graphic primitives (such as triangles)
    which are then rasterized to produce fragments.
* A <dfn noexport>fragment shader stage</dfn> processes each fragment,
    possibly producing a fragment output.
* Fixed-function stages consume a fragment output, possibly updating external state
    such as color attachments and depth and stencil buffers.

The WebGPU specification describes pipelines in greater detail.

[SHORTNAME] defines three <dfn noexport>shader stages</dfn>, corresponding to the
programmable parts of pipelines:

* <dfn noexport>compute</dfn>
* <dfn noexport>vertex</dfn>
* <dfn noexport>fragment</dfn>

Each shader stage has its own set of features and constraints, described elsewhere.

## Entry point declaration ## {#entry-point-decl}

An <dfn noexport>entry point</dfn> is a [=user-defined function=] that is invoked to perform
the work for a particular [=shader stage=].

Specify a `stage` attribute on a [=function declaration=] to declare that function
as an entry point.

When configuring the stage in the pipeline, the entry point is specified by providing
the [SHORTNAME] module and the entry point's function name.

The parameters of an entry point have to be within [=Entry point IO type=]s.
The return type of an entry point has to be of an [=Entry point IO type=], if specified.

Note: compute entry points never have a return type.

<div class='example wgsl global-scope' heading='Entry Point'>
  <xmp>
    [[stage(vertex)]]
    fn vert_main() -> [[builtin(position)]] vec4<f32> {
      return vec4<f32>(0.0, 0.0, 0.0, 1.0);
    }
       // OpEntryPoint Vertex %vert_main "vert_main" %return_value
       // OpDecorate %return_value BuiltIn Position
       // %float = OpTypeFloat 32
       // %v4float = OpTypeVector %float 4
       // %ptr = OpTypePointer Output %v4float
       // %return_value = OpVariable %ptr Output

    [[stage(fragment)]]
    fn frag_main([[builtin(position)]] coord_in: vec4<f32>) -> [[location(0)]] vec4<f32> {
      return vec4<f32>(coord_in.x, coord_in.y, 0.0, 1.0);
    }
       // OpEntryPoint Fragment %frag_main "frag_main" %return_value %coord_in
       // OpDecorate %return_value Location 0
       // %float = OpTypeFloat 32
       // %v4float = OpTypeVector %float 4
       // %ptr = OpTypePointer Output %v4float
       // %return_value = OpVariable %ptr Output

    [[stage(compute)]]
    fn comp_main() { }
       // OpEntryPoint GLCompute %comp_main "comp_main"
  </xmp>
</div>

The set of <dfn noexport>functions in a shader stage</dfn> is the union of:

* The entry point function for the stage.
* The targets of function calls from within the body of a function
    in the shader stage, whether or not that call is executed.

The union is applied repeatedly until it stabilizes.
It will stabilize in a finite number of steps.

### Function attributes for entry points ### {#entry-point-attributes}

[SHORTNAME] defines the following attributes that can be applied to entry point declarations:
 * [=attribute/stage=]
 * [=attribute/workgroup_size=]

ISSUE: Can we query upper bounds on workgroup size dimensions?  Is it independent of the shader, or
  a property to be queried after creating the shader module?

<div class='example wgsl global-scope' heading='workgroup_size Attribute'>
  <xmp>
    [[ stage(compute), workgroup_size(8,1,1) ]]
    fn sorter() { }
       // OpEntryPoint GLCompute %sorter "sorter"
       // OpExecutionMode %sorter LocalSize 8 1 1

    [[ stage(compute), workgroup_size(8) ]]
    fn reverser() { }
       // OpEntryPoint GLCompute %reverser "reverser"
       // OpExecutionMode %reverser LocalSize 8 1 1

    [[ stage(compute) ]]
    fn do_nothing() { }
       // OpEntryPoint GLCompute %do_nothing "do_nothing"
       // OpExecutionMode %do_nothing LocalSize 1 1 1
  </xmp>
</div>

## Shader Interface ## {#shader-interface}

The shader interface is the set of objects
through which the shader accesses data external to the [=shader stage=],
either for reading or writing.
The interface includes:

* Pipeline inputs and outputs
* Buffer resources
* Texture resources
* Sampler resources

These objects are represented by module-scope variables in certain [=storage classes=].

We say a variable is <dfn noexport>statically accessed</dfn> by a function if any subexpression
in the body of the function uses the variable's identifier,
and that subexpression is [=in scope=] of the variable's declaration.
Static access of a `let`-declared constant is defined similarly.
Note that being statically accessed is independent of whether an execution of the shader
will actually evaluate the subexpression, or even execute the enclosing statement.

More precisely, the <dfn noexport>interface of a shader stage</dfn> consists of:
  - all parameters of the entry point
  - the result value of the entry point
  - all [=module scope=] variables that are [=statically accessed=] by [=functions in a shader stage|functions in the shader stage=],
    and which are in storage classes [=storage classes/uniform=], [=storage classes/storage=], or [=storage classes/handle=].

### Pipeline Input and Output Interface ### {#pipeline-inputs-outputs}

The <dfn dfn>Entry point IO type</dfn>s include the following:
  - Built-in variables. See [[#builtin-inputs-outputs]].
  - User-defined IO. See [[#user-data-attributes]]
  - Structures containing only built-in variables and user-defined IO.
    The structure must not contain a nested structure.

A <dfn noexport>pipeline input</dfn> is data provided to the shader stage from upstream in the pipeline.
A pipeline input is denoted by the arguments of the entry point.

A <dfn noexport>pipeline output</dfn> is data the shader provides for further processing downstream in the pipeline.
A pipeline output is denoted by the return type of the entry point.

Each pipeline input or output is one of:

* A built-in variable. See [[#builtin-inputs-outputs]].
* A user data attribute. See [[#user-data-attributes]].

#### Built-in inputs and outputs #### {#builtin-inputs-outputs}

A <dfn noexport>built-in input variable</dfn> provides access to system-generated control information.
The set of built-in inputs are listed in [[#builtin-variables]].

To declare a variable for accessing a particular input built-in *X* from an entry point:

* Declare a parameter of the entry point function,
    where the [=store type=] is the listed store type for *X*.
* Apply a `builtin(`*X*`)` attribute to the parameter.

A <dfn noexport>built-in output variable</dfn> is used by the shader to convey
control information to later processing steps in the pipeline.
The set of built-in outputs are listed in [[#builtin-variables]].

To declare a variable for accessing a particular output built-in *Y* from an entry point:

* Add a variable to the result of the entry point, where [=store type=] is the listed store type for *Y*:
  * If there is no result type for the entry point, change it to the variable type.
  * Otherwise, make the result type to be a structure, where one of the fields is the new variable.
* Apply a `builtin(`*Y*`)` attribute to the result variable.

The `builtin` attribute must not be applied to a variables in [=module scope=],
or the local variables in the function scope.

A variable must not have more than one `builtin` attribute.

Each built-in variable has an associated shader stage, as described in [[#builtin-variables]].
If a built-in variable has stage *S* and is used by a function *F*, as either an argument or the
result type, then *F* must be a [=functions in a shader stage|function in a shader=] for stage *S*.

Issue: in Vulkan, builtin variables occoupy I/O location slots counting toward limits.

#### User Data Attribute TODO #### {#user-data-attributes}

User-defined data can be passed as input to the start of a pipeline, passed
between stages of a pipeline or output from the end of a pipeline.
User-defined IO must not be passed to [=compute=] shader entry points.
User-defined IO must be [=numeric scalar=] or [=numeric vector=] types .
All user defined IO must be assigned locations (See [[#input-output-locations]]).

#### Interpolation #### {#interpolation}

Authors can control how user-defined IO data is interpolated through the use of
the [=attribute/interpolate=] attribute.
[SHORTNAME] offers two aspects of interpolation to control: the type of
interpolation, and the sampling of the interpolation.

The <dfn noexport>interpolation type</dfn> must be one of:
* `perspective` - Values are interpolated in a perspective correct manner.
* `linear` - Values are interpolated in a linear, non-perspective correct manner.
* `flat` - Values are not interpolated.
    Interpolation sampling is not used with `flat` interpolation.

The <dfn noexport>interpolation sampling</dfn> must be one of:
* `center` - Interpolation is performed at the center of the pixel.
* `centroid` - Interpolation is performed at a point that lies within all the
    samples covered by the fragment within the current primitive.
    This value is the same for all samples in the primitive.
* `sample` - Interpolation is performed per sample.
    The [=fragment=] shader is invoked once per sample when this attribute is
    applied.

The default interpolation of user-defined IO of scalar or vector floating-point
type is `[[interpolate(perspective, center)]]`.
User-defined IO of scalar or vector integer type is always
`[[interpolate(flat)]]` and, therefore, must not be specified in a [SHORTNAME] program.

Interpolation attributes must match between [=vertex=] outputs and [=fragment=]
inputs with the same [=attribute/location=] assignment within the same [=pipeline=].

#### Input-output Locations #### {#input-output-locations}

Each location can store a value up to 16 bytes in size.
The byte size of a type is defined using the *SizeOf* column in [[#alignment-and-size]].
For example, a four-element vector of floating-point values occupies a single location.

Locations are specified via the [=attribute/location=] attribute.

Every user-defined input and output must have a fully specified set of
locations.
Each structure member in the entry point IO must be one of either a builtin variable
(see [[#builtin-inputs-outputs]]), or assigned a location.

For a given entry point, the locations of the return type are distinct from
the locations of the function parameters.
Within each set of locations, there must be no overlap.

Note: the number of available locations for an entry point is defined by the WebGPU API.

<div class='example applying location attribute' heading='Applying location attributes'>
  <xmp>
    struct A {
      [[location(0)]] x : f32;
      // Despite locations being 16-bytes, x and y cannot share a location
      [[location(1)]] y : f32;
    };

    // in1 occupies locations 0 and 1.
    // in2 occupies location 2.
    // The return value occupies location 0.
    [[stage(fragment)]]
    fn fragShader(in1 : A, [[location(2)]] in2 : f32) -> [[location(0)]] vec4<f32> {
     // ...
    }
  </xmp>
</div>

User-defined IO can be mixed with builtin variables in the same structure. For example,

<div class='example mixing builtins and user-defined IO' heading='Mixing builtins and user-defined IO'>
  <xmp>
    // Mixed builtins and user-defined inputs.
    struct MyInputs {
      [[location(0)]] x : vec4<f32>;
      [[builtin(front_facing)]] y : bool;
      [[location(1)]] z : u32;
    };

    struct MyOutputs {
      [[builtin(frag_depth)]] x : f32;
      [[location(0)]] y : vec4<f32>;
    };

    [[stage(fragment)]]
    fn fragShader(in1 : MyInputs) -> MyOutputs {
      // ...
    }
  </xmp>
</div>

<div class='example invalid locations' heading='Invalid location assignments'>
  <xmp>
    struct A {
      [[location(0)]] x : u32;
      // Invalid, x and y cannot share a location.
      [[location(0)]] y : u32;
    };

    struct B {
      [location(0)]] x : f32;
    };

    struct C {
      // Invalid, structures with user-defined IO cannot be nested.
      b : B;
    };

    struct D {
      x : vec4<f32>;
    };

    [[stage(fragment)]]
    // Invalid, location cannot be applied to a structure type.
    fn fragShader1([[location(0)]] in1 : D) {
      // ...
    }

    [[stage(fragment)]]
    // Invalid, in1 and in2 cannot share a location.
    fn fragShader2([location(0)]] in1 : f32, [[location(0)]] in2 : f32) {
      // ...
    }

    [[stage(fragment)]]
    // Invalid, location cannot be applied to a structure.
    fn fragShader3([[location(0)]] in1 : vec4<f32>) -> [[location(0)]] D {
      // ...
    }
  </xmp>
</div>

### Resource interface ### {#resource-interface}

A <dfn noexport>resource</dfn> is an object,
other than a [[#pipeline-inputs-outputs|pipeline input or output]],
which provides access to data external to a [=shader stage=].
Resources are shared by all invocations of the shader.

There are four kinds of resources:

* [=uniform buffers=]
* [=storage buffers=]
* textures
* samplers

The <dfn noexport>resource interface of a shader</dfn> is the set of module-scope
resource variables [=statically accessed=] by
[=functions in a shader stage|functions in the shader stage=].

Each resource variable must be declared with both [=group=] and [=binding=]
attributes.
Together with the shader's stage, these identify the binding address
of the resource on the shader's pipeline.
See [[WebGPU#pipeline-layout|WebGPU &sect; GPUPipelineLayout]].

Bindings must not alias within a shader stage:
two different variables in the resource interface of a given
shader must not have the same group and binding values, when considered as a pair of values.

### Resource layout compatibility ### {#resource-layout-compatibility}

WebGPU requires that a shader's resource interface match the [[WebGPU#pipeline-layout|layout of the pipeline]]
using the shader.

Each [SHORTNAME] variable in a resource interface must be bound to a WebGPU resource with
a compatible
[[WebGPU#enumdef-gpubindingtype|GPUBindingType]],
where compatibility is defined by the following table.
<table class='data'>
  <caption>WebGPU binding type compatibility</caption>
  <thead>
    <tr><th>[SHORTNAME] resource
        <th>WebGPU [[WebGPU#enumdef-gpubindingtype|GPUBindingType]]
  </thead>
  <tr><td>[=uniform buffer=]
      <td>[[WebGPU#dom-gpubindingtype-uniform-buffer|uniform-buffer]]
  <tr><td>read-write [=storage buffer=]
      <td>[[WebGPU#dom-gpubindingtype-storage-buffer|storage-buffer]]
  <tr><td>read-only [=storage buffer=]
      <td>[[WebGPU#dom-gpubindingtype-readonly-storage-buffer|readonly-storage-buffer]]
  <tr><td>sampler
      <td>[[WebGPU#dom-gpubindingtype-sampler|sampler]]
  <tr><td>sampler_comparison
      <td>[[WebGPU#dom-gpubindingtype-comparison-sampler|comparison-sampler]]
  <tr><td>sampled texture
      <td>[[WebGPU#dom-gpubindingtype-sampled-texture|sampled-texture]] or
          [[WebGPU#dom-gpubindingtype-multisampled-texture|multisampled-texture]]
  <tr><td>[=read-only storage texture=]
      <td>[[WebGPU#dom-gpubindingtype-readonly-storage-texture|readonly-storage-texture]]
  <tr><td>[=write-only storage texture=]
      <td>[[WebGPU#dom-gpubindingtype-writeonly-storage-texture|writeonly-storage-texture]]
</table>


TODO: Rewrite the phrases 'read-only storage buffer' and 'read-write storage buffer' after
we settle on how to express those concepts.
See https://github.com/gpuweb/gpuweb/pull/1183

If |B| is a [=uniform buffer=] variable in a resource interface,
and |WB| is the [[WebGPU#buffer-interface|WebGPU GPUBuffer]] bound to |B|, then:
* The size of |WB| must be at least as large as the size of the [=store type=]
    of |B| in the [=storage classes/storage=] storage class.

If |B| is a [=storage buffer=] variable in a resource interface,
and |WB| is the [[WebGPU#buffer-interface|WebGPU GPUBuffer]] bound to |B|, then:
* If the [=store type=] |S| of |B| does not contain a [=runtime-sized=] array, then
    the size of |WB| must be at least as large as the size
    of |S| in the [=storage classes/storage=] storage class.
* If the [=store type=] |S| of |B| contains a [=runtime-sized=] array as its last member,
    then:
    * The runtime-determined array length of that member must be at least 1.
    * The size of |WB| must be at least as large as the size in
        storage class [=storage classes/storage=] of the value stored in |B|.

Note: Recall that a [=runtime-sized=] array may only appear as the last element in the structure
type that is the store type of a storage buffer variable.

TODO: Describe other interface matching requirements, e.g. for images?

## Pipeline compatibility TODO ## {#pipeline-compatibility}

TODO: match flat attribute

TODO: user data inputs of fragment stage must be subset of user data outputs of vertex stage

### Input-output matching rules TODO ### {#input-output-matching}

# Language extensions # {#language-extensions}

The [SHORTNAME] language is expected to evolve over time.

An <dfn noexport>extension</dfn> is a named grouping for a coherent
set of modifications to a particular version of the [SHORTNAME] specification, consisting of any combination of:
* Addition of new concepts and behaviours via new syntax, including:
    * declarations, statements, attributes, and built-in functions.
* Removal of restrictions in the current specification or in previously published extensions.
* Syntax for reducing the set of permissible behaviours.
* Syntax for limiting the features available to a part of the program.
* A description of how the extension interacts with the existing specification, and optionally with other extensions.

Hypothetically, extensions could be used to:
* Add numeric scalar types, such as 16-bit integers.
* Add syntax to constrain floating point rounding mode.
* Add syntax to signal that a shader does not use atomic types.
* Add new kinds of statements.
* Add new built-in functions.
* Add constraints on how shader invocations execute.
* Add new shader stages.

## Enable Directive ## {#enable-directive-section}

An <dfn noexport>enable directive</dfn> indicates that the functionality
described by a particular named
[=extension=] may be used in the source text after the directive itself.
That is, language functionality described by the extension may be used in any
source text after the `enable` directive.

The directive must not appear inside the text of any [=declaration=].
(If it were a declaration, it would be at [=module scope=].)

The directive uses an identifier to name the extension, but does not
create a [=scope=] for the identifier.
Use of the identifier by the directive does not conflict with the
use of that identifier as the name in any [=declaration=].

<pre class='def'>
enable_directive
  : ENABLE IDENT SEMICOLON
</pre>

Note: The grammar rule includes the terminating semicolon token,
ensuring the additional functionality is usable only after that semicolon.
Therefore any [SHORTNAME] implementation can parse the entire `enable` directive.
When an implementation encounters an enable directive for an unsupported extension,
the implementation can issue a clear diagnostic.

<div class='example using extensions' heading="Using hypothetical extensions">
  <xmp>
    // Enable a hypothetical IEEE binary16 floating point extension.
    enable f16;

    // Assuming the f16 extension enables use of the f16 type:
    //    - as function return value
    //    - as the type for let declaration
    //    - as a type constructor, with an i32 argument
    //    - as operands to the division operator: /
    fn halve_it(x: f16) -> f16 {
       let two: f16 = f16(2);
       return x / two;
    };

    enable f16; // A redundant enable directive is ok.
    // Enable a hypothetical extension adding syntax for controlling
    // the rounding mode on f16 arithmetic.
    enable rounding_mode_f16;

    [[round_to_even_f16]] // Attribute enabled by the rounding_mode_f16 extension
    fn triple_it(x: f16) -> f16 {
       return x * f16(3); // Uses round-to-even.
    };
  </xmp>
</div>


# WGSL program TODO # {#wgsl-module}

TODO: *Stub* A WGSL program is a sequence of [=directives=] and [=module scope=] [=declarations=].

<pre class='def'>
translation_unit
  : global_decl_or_directive* EOF
</pre>

<pre class='def'>
global_decl_or_directive
  : SEMICOLON
  | global_variable_decl SEMICOLON
  | global_constant_decl SEMICOLON
  | type_alias SEMICOLON
  | struct_decl SEMICOLON
  | function_decl
  | enable_directive
</pre>

# Execution TODO # {#execution}

## Invocation of an entry point TODO ## {#invocation-of-an-entry-point}

### Before an entry point begins TODO ### {#before-entry-point-begins}

TODO: *Stub*

* Setting values of builtin variables
* External-interface variables have initialized backing storage
* Internal module-scope variables have backing storage
  * Initializers evaluated in textual order
* No two variables have overlapping storage (might already be covered earlier?)

### Program order (within an invocation) TODO ### {#program-order}

#### Function-scope variable lifetime and initialization TODO #### {#function-scope-variable-lifetime}

#### Statement order TODO #### {#statement-order}

#### Intra-statement order (or lack) TODO #### {#intra-statement-order}

TODO: *Stub*: Expression evaluation

## Uniformity TODO ## {#uniformity}

### Uniform control flow TODO ### {#uniform-control-flow}

### Divergence and reconvergence TODO ### {#divergence-reconvergence}

### Uniformity restrictions TODO ### {#uniformity-restrictions}

## Compute Shaders and Workgroups ## {#compute-shader-workgroups}

A <dfn noexport for="compute shader stage">workgroup</dfn> is a set of invocations which
concurrently execute a [=compute shader stage=] [=entry point=],
and share access to shader variables in the [=storage classes/workgroup=] storage class.

The <dfn noexport>workgroup grid</dfn> for a compute shader is the set of points
with integer coordinates *(i,j,k)* with:

*  0 &leq; i &lt; workgroup_size_x
*  0 &leq; j &lt; workgroup_size_y
*  0 &leq; k &lt; workgroup_size_z

where *(workgroup_size_x, workgroup_size_y, workgroup_size_z)* is
the value specified for the [=workgroup_size=] attribute of the
entry point, or (1,1,1) if the entry point has no such attribute.

There is exactly one invocation in a workgroup for each point in the workgroup grid.

An invocation's <dfn noexport>local invocation ID</dfn> is the coordinate
triple for the invocation's corresponding workgroup grid point.

When an invocation has [=local invocation ID=] (i,j,k), then its
<dfn noexport>local invocation index</dfn> is

  i +
  (j * workgroup_size_x) +
  (k * workgroup_size_x * workgroup_size_y)

<p algorithm="local index range">Note that if a workgroup has |W| invocations,
then each invocation |I| the workgroup has a unique local invocation index |L|(|I|)
such that 0 &le; |L|(|I|) &lt; |W|,
and that entire range is covered.</p>

A compute shader begins execution when a WebGPU implementation
removes a dispatch command from a queue and begins the specified work on the GPU.
The dispatch command specifies a <dfn noexport>dispatch size</dfn>,
which is an integer triple *(group_count_x, group_count_y, group_count_z)*
indicating the number of workgroups to be executed, as described in the following.

The <dfn noexport>compute shader grid</dfn> for a particular dispatch
is the set of points with integer coordinates *(CSi,CSj,CSk)* with:

*  0 &leq; CSi &le; workgroup_size_x &times; group_count_x
*  0 &leq; CSj &le; workgroup_size_y &times; group_count_y
*  0 &leq; CSk &le; workgroup_size_z &times; group_count_z

where *workgroup_size_x*,
*workgroup_size_y*, and
*workgroup_size_z* are as above for the compute shader entry point.

The work to be performed by a compute shader dispatch is to execute exactly one
invocation of the entry point for each point in the compute shader grid.

An invocation's <dfn noexport>global invocation ID</dfn> is the coordinate
triple for the invocation's corresponding compute shader grid point.

The invocations are organized into workgroups, so that each invocation
*(CSi, CSj, CSk)* is identified with the workgroup grid point

   ( *CSi* mod workgroup_size_x ,
     *CSj* mod workgroup_size_y ,
     *CSk* mod workgroup_size_z )

in <dfn noexport>workgroup ID</dfn>

   ( &lfloor; *CSi* &div; workgroup_size_x &rfloor;,
     &lfloor; *CSj* &div; workgroup_size_y &rfloor;,
     &lfloor; *CSk* &div; workgroup_size_z &rfloor;).

WebGPU provides no guarantees about:

* Whether invocations from different workgroups execute concurrently.
    That is, you cannot assume more than one workgroup executes at a time.
* Whether, once invocations from a workgroup begin executing, that other workgroups
    are blocked from execution.
    That is, you cannot assume that only one workgroup executes at a time.
    While a workgroup is executing, the implementation may choose to
    concurrently execute other workgroups as well, or other queued but unblocked work.
* Whether invocations from one particular workgroup begin executing before
    the invocations of another workgroup.
    That is, you cannot assume that workgroups are launched in a particular order.

Issue: [WebGPU issue 1045](https://github.com/gpuweb/gpuweb/issues/1045):
Dispatch group counts must be positive.
However, how do we handle an indirect dispatch that specifies a group count of zero.

## Collective operations TODO ## {#collective-operations}

### Barrier TODO ### {#barrier}

### Image Operations Requiring Uniformity TODO ### {#image-operations-requiring-uniformity}

### Derivatives TODO ### {#derivatives}

### Arrayed resource access TODO ### {#arrayed-resource-access}

## Floating Point Evaluation TODO ## {#floating-point-evaluation}

TODO: *Stub*

* Infinities, NaNs, negative zeros
* Denorms, flushing
* fast-math rules: e.g. reassociation, fusing
* Invariance (or is this more general than floating point)
* Rounding
* Error bounds on basic operations

### Floating point conversion ### {#floating-point-conversion}

When converting a floating point scalar value to an integral type:
* If the original value is exactly representable in the destination type, then the result is that value.
* If the original value has a fractional component, then it cannot be represented exactly in the destination type, and the result is TODO
* If the original value is out of range of the destination type, then TODO.

When converting a value to a floating point type:
* If the original value is exactly representable in the destination type, then the result is that value.
    * If the original value is zero and of integral type, then the resulting value has a zero sign bit.
* Otherwise, the original value is not exactly representable.
    * If the original value is different from but lies between two adjacent values representable in the destination type,
         then the result is one of those two values.
         [SHORTNAME] does not specify whether the larger or smaller representable
         value is chosen, and different instances of such a conversion may choose differently.
    * Otherwise, if the original value lies outside the range of the destination type.
         * This does not occur when the original types is one of [=i32=] or [=u32=] and the destination type is [=f32=].
         * This does not occur when the source type is a floating point type with fewer exponent and mantissa bits.
         * If the source type is a floating point type with more mantissa bits than the destination type, then:
             * The extra mantissa bits of the source value may be discarded (treated as if they are 0).
                 * If the resulting value is the maximum normal value of the destination type, then that is the result.
             * Otherwise the result is the infinity value with the same sign as the source value.
    * Otherwise, if the original value is a NaN for the source type, then the result is a NaN in the destination type.

NOTE: An integer value may lie between two adjacent representable floating point values.
In particular, the [=f32=] type uses 23 explicit fractional bits.
Additionally, when the floating point value is in the normal range (the exponent is neither extreme value), then the mantissa is
the set of fractional bits together with an extra 1-bit at the most significant position at bit position 23.
Then, for example, integers 2<sup>28</sup> and 1+2<sup>28</sup> both map to the same floating point value: the difference in the
least significant 1 bit is not representable by the floating point format.
This kind of collision occurs for pairs of adjacent integers with a magnitude of at least 2<sup>25</sup>.

Issue: (dneto) Default rounding mode is an implementation choice.  Is that what we want?

Issue: Check behaviour of the f32 to f16 conversion for numbers just beyond the max normal f16 values.
I've written what an NVIDIA GPU does.  See https://github.com/google/amber/pull/918 for an executable test case.

# Memory Model TODO # {#memory-model}

# Keyword and Token Summary # {#grammar}

## Keyword Summary ## {#keyword-summary}

<table class='data'>
  <caption>Type-defining keywords</caption>
  <thead>
    <tr><th>Token<th>Definition
  </thead>
  <tr><td>`ARRAY`<td>array
  <tr><td>`BOOL`<td>bool
  <tr><td>`FLOAT32`<td>f32
  <tr><td>`INT32`<td>i32
  <tr><td>`MAT2x2`<td>mat2x2  // 2 column x 2 row
  <tr><td>`MAT2x3`<td>mat2x3  // 2 column x 3 row
  <tr><td>`MAT2x4`<td>mat2x4  // 2 column x 4 row
  <tr><td>`MAT3x2`<td>mat3x2  // 3 column x 2 row
  <tr><td>`MAT3x3`<td>mat3x3  // 3 column x 3 row
  <tr><td>`MAT3x4`<td>mat3x4  // 3 column x 4 row
  <tr><td>`MAT4x2`<td>mat4x2  // 4 column x 2 row
  <tr><td>`MAT4x3`<td>mat4x3  // 4 column x 3 row
  <tr><td>`MAT4x4`<td>mat4x4  // 4 column x 4 row
  <tr><td>`POINTER`<td>ptr
  <tr><td>`SAMPLER`<td>sampler
  <tr><td>`SAMPLER_COMPARISON`<td>sampler_comparison
  <tr><td>`STRUCT`<td>struct
  <tr><td>`TEXTURE_1D`<td>texture_1d
  <tr><td>`TEXTURE_2D`<td>texture_2d
  <tr><td>`TEXTURE_2D_ARRAY`<td>texture_2d_array
  <tr><td>`TEXTURE_3D`<td>texture_3d
  <tr><td>`TEXTURE_CUBE`<td>texture_cube
  <tr><td>`TEXTURE_CUBE_ARRAY`<td>texture_cube_array
  <tr><td>`TEXTURE_MULTISAMPLED_2D`<td>texture_multisampled_2d
  <tr><td>`TEXTURE_STORAGE_1D`<td>texture_storage_1d
  <tr><td>`TEXTURE_STORAGE_2D`<td>texture_storage_2d
  <tr><td>`TEXTURE_STORAGE_2D_ARRAY`<td>texture_storage_2d_array
  <tr><td>`TEXTURE_STORAGE_3D`<td>texture_storage_3d
  <tr><td>`TEXTURE_DEPTH_2D`<td>texture_depth_2d
  <tr><td>`TEXTURE_DEPTH_2D_ARRAY`<td>texture_depth_2d_array
  <tr><td>`TEXTURE_DEPTH_CUBE`<td>texture_depth_cube
  <tr><td>`TEXTURE_DEPTH_CUBE_ARRAY`<td>texture_depth_cube_array
  <tr><td>`UINT32`<td>u32
  <tr><td>`VEC2`<td>vec2
  <tr><td>`VEC3`<td>vec3
  <tr><td>`VEC4`<td>vec4
</table>
<table class='data'>
  <caption>Other keywords</caption>
  <thead>
    <tr><td>Token<td>Definition
  </thead>
  <tr><td>`BITCAST`<td>bitcast
  <tr><td>`BLOCK`<td>block
  <tr><td>`BREAK`<td>break
  <tr><td>`CASE`<td>case
  <tr><td>`CONTINUE`<td>continue
  <tr><td>`CONTINUING`<td>continuing
  <tr><td>`DEFAULT`<td>default
  <tr><td>`DISCARD`<td>discard
  <tr><td>`ELSE`<td>else
  <tr><td>`ELSE_IF`<td>elseif
  <tr><td>`ENABLE`<td>enable
  <tr><td>`FALLTHROUGH`<td>fallthrough
  <tr><td>`FALSE`<td>false
  <tr><td>`FN`<td>fn
  <tr><td>`FOR`<td>for
  <tr><td>`FUNCTION`<td>function
  <tr><td>`IF`<td>if
  <tr><td>`LET`<td>let
  <tr><td>`LOOP`<td>loop
  <tr><td>`PRIVATE`<td>private
  <tr><td>`RETURN`<td>return
  <tr><td>`STORAGE`<td>storage
  <tr><td>`SWITCH`<td>switch
  <tr><td>`TRUE`<td>true
  <tr><td>`TYPE`<td>type
  <tr><td>`UNIFORM`<td>uniform
  <tr><td>`VAR`<td>var
  <tr><td>`WORKGROUP`<td>workgroup
</table>
<table class='data'>
  <caption>Image format keywords</caption>
  <thead>
    <tr><td>Token<td>Definition
  </thead>
  <tr><td>`R8UNORM`<td>r8unorm
  <tr><td>`R8SNORM`<td>r8snorm
  <tr><td>`R8UINT`<td>r8uint
  <tr><td>`R8SINT`<td>r8sint
  <tr><td>`R16UINT`<td>r16uint
  <tr><td>`R16SINT`<td>r16sint
  <tr><td>`R16FLOAT`<td>r16float
  <tr><td>`RG8UNORM`<td>rg8unorm
  <tr><td>`RG8SNORM`<td>rg8snorm
  <tr><td>`RG8UINT`<td>rg8uint
  <tr><td>`RG8SINT`<td>rg8sint
  <tr><td>`R32UINT`<td>r32uint
  <tr><td>`R32SINT`<td>r32sint
  <tr><td>`R32FLOAT`<td>r32float
  <tr><td>`RG16UINT`<td>rg16uint
  <tr><td>`RG16SINT`<td>rg16sint
  <tr><td>`RG16FLOAT`<td>rg16float
  <tr><td>`RGBA8UNORM`<td>rgba8unorm
  <tr><td>`RGBA8UNORM-SRGB`<td>rgba8unorm_srgb
  <tr><td>`RGBA8SNORM`<td>rgba8snorm
  <tr><td>`RGBA8UINT`<td>rgba8uint
  <tr><td>`RGBA8SINT`<td>rgba8sint
  <tr><td>`BGRA8UNORM`<td>bgra8unorm
  <tr><td>`BGRA8UNORM-SRGB`<td>bgra8unorm_srgb
  <tr><td>`RGB10A2UNORM`<td>rgb10a2unorm
  <tr><td>`RG11B10FLOAT`<td>rg11b10float
  <tr><td>`RG32UINT`<td>rg32uint
  <tr><td>`RG32SINT`<td>rg32sint
  <tr><td>`RG32FLOAT`<td>rg32float
  <tr><td>`RGBA16UINT`<td>rgba16uint
  <tr><td>`RGBA16SINT`<td>rgba16sint
  <tr><td>`RGBA16FLOAT`<td>rgba16float
  <tr><td>`RGBA32UINT`<td>rgba32uint
  <tr><td>`RGBA32SINT`<td>rgba32sint
  <tr><td>`RGBA32FLOAT`<td>rgba32float
</table>

TODO(dneto): Eliminate the image formats that are not used in storage images.
For example SRGB formats (bgra8unorm_srgb), mixed channel widths (rg11b10float), out-of-order channels (bgra8unorm)

## Reserved Keywords ## {#reserved-keywords}
The following is a list of keywords which are reserved for future expansion.

<table class='data'>
  <tr>
    <td>asm
    <td>bf16
    <td>do
    <td>enum
    <td>f16
  <tr>
    <td>f64
    <td>i8
    <td>i16
    <td>i64
    <td>const
  <tr>
    <td>typedef
    <td>u8
    <td>u16
    <td>u64
    <td>unless
  <tr>
    <td>using
    <td>while
    <td>regardless
    <td>premerge
    <td>handle
</table>

## Syntactic Tokens ## {#syntactic-tokens}
<table class='data'>
  <tr><td>`AND`<td>`&`
  <tr><td>`AND_AND`<td>`&&`
  <tr><td>`ARROW`<td>`->`
  <tr><td>`ATTR_LEFT`<td>`[[`
  <tr><td>`ATTR_RIGHT`<td>`]]`
  <tr><td>`FORWARD_SLASH`<td>`/`
  <tr><td>`BANG`<td>`!`
  <tr><td>`BRACKET_LEFT`<td>`[`
  <tr><td>`BRACKET_RIGHT`<td>`]`
  <tr><td>`BRACE_LEFT`<td>`{`
  <tr><td>`BRACE_RIGHT`<td>`}`
  <tr><td>`COLON`<td>`:`
  <tr><td>`COMMA`<td>`,`
  <tr><td>`EQUAL`<td>`=`
  <tr><td>`EQUAL_EQUAL`<td>`==`
  <tr><td>`NOT_EQUAL`<td>`!=`
  <tr><td>`GREATER_THAN`<td>`>`
  <tr><td>`GREATER_THAN_EQUAL`<td>`>=`
  <tr><td>`SHIFT_RIGHT`<td>`>>`
  <tr><td>`LESS_THAN`<td>`<`
  <tr><td>`LESS_THAN_EQUAL`<td>`<=`
  <tr><td>`SHIFT_LEFT`<td>`<<`
  <tr><td>`MODULO`<td>`%`
  <tr><td>`MINUS`<td>`-`
  <tr><td>`MINUS_MINUS`<td>`--`
  <tr><td>`PERIOD`<td>`.`
  <tr><td>`PLUS`<td>`+`
  <tr><td>`PLUS_PLUS`<td>`++`
  <tr><td>`OR`<td>`|`
  <tr><td>`OR_OR`<td>`||`
  <tr><td>`PAREN_LEFT`<td>`(`
  <tr><td>`PAREN_RIGHT`<td>`)`
  <tr><td>`SEMICOLON`<td>`;`
  <tr><td>`STAR`<td>`*`
  <tr><td>`TILDE`<td>`~`
  <tr><td>`XOR`<td>`^`
</table>

Note: The `MINUS_MINUS` and `PLUS_PLUS` tokens are reserved, i.e. they are not used in any grammar productions.
For example `x--` and `++i` are not syntactically valid expressions in [SHORTNAME].

# Validation # {#validation}

TODO: Move these to the subject-matter sections.

Each validation item will be given a unique ID and a test must be provided
when the validation is added. The tests will reference the validation ID in
the test name.

* v-0001: A declaration must not introduce a name when that name is already in scope at the start
          of the declaration.
* v-0004: Recursion is not allowed.
* v-0007: Structures must be defined before use.
* v-0008: switch statements must have exactly one default clause.
* v-0009: Break is only permitted in loop and switch constructs.
* v-0010: continue is only permitted in loop.
* v-0015: The last member of the structure type defining the "store type" for variable in the
          storage storage class may be a runtime-sized array.
* v-0017: Builtin decorations must have the correct types.
* v-0018: Builtin decorations must be used with the correct shader type and
          storage class.
* v-0020: The pair of `<entry point name, pipeline stage>` must be unique in the
          module.
* v-0021: Cannot re-assign a constant.
* v-0022: Global variables must have a storage class.
* v-0025: Switch statement selector expression must be of a scalar integer type.
* v-0026: The case selector values must have the same type as the selector expression.
* v-0027: A literal value must not appear more than once in the case selectors for a switch statement.
* v-0028: A fallthrough statement must not appear as the last statement in last clause of a switch.
* v-0029: Return must come last in its block.
* v-0030: A runtime-sized array must not be used as the store type or contained within a store type
          except as allowed by v-0015.
* v-0031: The type of an expression must not be a runtime-sized array type.
* v-0032: A runtime-sized array must have a stride attribute.


# Built-in variables # {#builtin-variables}

See [[#builtin-inputs-outputs]] for how to declare a built-in variable.

<table class='data'>
  <thead>
    <tr><th>Built-in<th>Stage<th>Input or Output<th>Store type<th>Description
  </thead>

  <tr><td>`vertex_index`
      <td>vertex
      <td>in
      <td>u32
      <td width="50%">Index of the current vertex within the current API-level draw command,
         independent of draw instancing.

         For a non-indexed draw, the first vertex has an index equal to the `firstIndex` argument
         of the draw, whether provided directly or indirectly.
         The index is incremented by one for each additional vertex in the draw instance.

         For an indexed draw, the index is equal to the index buffer entry for
         vertex, plus the `baseVertex` argument of the draw, whether provided directly or indirectly.

  <tr><td>`instance_index`
      <td>vertex
      <td>in
      <td>u32
      <td width="50%">Instance index of the current vertex within the current API-level draw command.

         The first instance has an index equal to the `firstInstance` argument of the draw,
         whether provided directly or indirectly.
         The index is incremented by one for each additional instance in the draw.

  <tr><td>`position`
      <td>vertex
      <td>out
      <td>vec4&lt;f32&gt;
      <td width="50%">Output position of the current vertex, using homogeneous coordinates.
      After homogeneous normalization (where each of the *x*, *y*, and *z* components
      are divided by the *w* component), the position is in the WebGPU normalized device
      coordinate space.
      See [[WebGPU#coordinate-systems|WebGPU &sect; Coordinate Systems]].

  <tr><td>`position`
      <td>fragment
      <td>in
      <td>vec4&lt;f32&gt;
      <td width="50%">Framebuffer position of the current fragment, using normalized homogeneous
      coordinates.
      (The *x*, *y*, and *z* components have already been scaled such that *w* is now 1.)
      See [[WebGPU#coordinate-systems|WebGPU &sect; Coordinate Systems]].

  <tr><td>`front_facing`
      <td>fragment
      <td>in
      <td>bool
      <td width="50%">True when the current fragment is on a front-facing primitive.
         False otherwise.
         See [[WebGPU#dom-gpurasterizationstatedescriptor-frontface|WebGPU &sect; Rasterization State]].

  <tr><td>`frag_depth`
      <td>fragment
      <td>out
      <td>f32
      <td width="50%">Updated depth of the fragment, in the viewport depth range.
      See [[WebGPU#coordinate-systems|WebGPU &sect; Coordinate Systems]].

  <tr><td>`local_invocation_id`
      <td>compute
      <td>in
      <td>vec3&lt;u32&gt;
      <td width="50%">The current invocation's [=local invocation ID=],
            i.e. its position in the [=workgroup grid=].

  <tr><td>`local_invocation_index`
      <td>compute
      <td>in
      <td>u32
      <td width="50%">The current invocation's [=local invocation index=], a linearized index of
          the invocation's position within the [=workgroup grid=].

  <tr><td>`global_invocation_id`
      <td>compute
      <td>in
      <td>vec3&lt;u32&gt;
      <td width="50%">The current invocation's [=global invocation ID=],
          i.e. its position in the [=compute shader grid=].

  <tr><td>`workgroup_id`
      <td>compute
      <td>in
      <td>vec3&lt;u32&gt;
      <td width="50%">The current invocation's [=workgroup ID=],
          i.e. the position of the workgroup in the [=workgroup grid=].

  <tr><td>`num_workgroups`
      <td>compute
      <td>in
      <td>vec3&lt;u32&gt;
      <td width="50%">The [=dispatch size=], `vec<u32>(group_count_x,
      group_count_y, group_count_z)`, of the compute shader
      [[WebGPU#dom-gpucomputepassencoder-dispatch|dispatched]] by the API.

  <tr><td>`workgroup_size`
      <td>compute
      <td>in
      <td>vec3&lt;u32&gt;
      <td width="50%">The [=workgroup_size=] of the current entry point.

  <tr><td>`sample_index`
      <td>fragment
      <td>in
      <td>u32
      <td width="50%">Sample index for the current fragment.
         The value is least 0 and at most `sampleCount`-1, where
         [[WebGPU#dom-gpurenderpipelinedescriptor-samplecount|sampleCount]]
         is the number of MSAA samples specified for the GPU render pipeline.
         <br>See [[WebGPU#gpurenderpipe|WebGPU &sect; GPURenderPipeline]].

  <tr><td>`sample_mask`
      <td>fragment
      <td>in
      <td>u32
      <td width="50%">Sample coverage mask for the current fragment.
         It contains a bitmask indicating which samples in this fragment are covered
         by the primitive being rendered.
         <br>See [[WebGPU#sample-masking|WebGPU &sect; Sample Masking]].

  <tr><td>`sample_mask`
      <td>fragment
      <td>out
      <td>u32
      <td width="50%">Sample coverage mask control for the current fragment.
         The last value written to this variable becomes the
         [[WebGPU#shader-output-mask|shader-output mask]].
         Zero bits in the written value will cause corresponding samples in
         the color attachments to be discarded.
         <br>See [[WebGPU#sample-masking|WebGPU &sect; Sample Masking]].
</table>

<div class='example wgsl global-scope' heading="Declaring built-in variables">
  <xmp>
    struct VertexOutput {
      [[builtin(position)]] my_pos: vec4<f32>;
      //   OpDecorate %my_pos BuiltIn Position
      //   %float = OpTypeFloat 32
      //   %v4float = OpTypeVector %float 4
      //   %ptr = OpTypePointer Output %v4float
      //   %my_pos = OpVariable %ptr Output
    };

    [[stage(vertex)]]
    fn vs_main(
      [[builtin(vertex_index)]] my_index: u32,
      //   OpDecorate %my_index BuiltIn VertexIndex
      //   %uint = OpTypeInt 32 0
      //   %ptr = OpTypePointer Input %uint
      //   %my_index = OpVariable %ptr Input
      [[builtin(instance_index)]] my_inst_index : u32,
      //    OpDecorate %my_inst_index BuiltIn InstanceIndex
    ) -> VertexOutput;

    struct FragmentOutput {
      [[builtin(frag_depth)]] depth: f32;
      //     OpDecorate %depth BuiltIn FragDepth
      [[builtin(sample_mask)]] mask_out : u32;
      //      OpDecorate %mask_out BuiltIn SampleMask ; an output variable
    };

    [[stage(fragment)]]
    fn fs_main(
      [[builtin(front_facing)]] is_front : u32,
      //     OpDecorate %is_front BuiltIn FrontFacing
      [[builtin(position)]] coord : vec4<f32>,
      //     OpDecorate %coord BuiltIn FragCoord
      [[builtin(sample_index)]] my_sample_index : u32,
      //      OpDecorate %my_sample_index BuiltIn SampleId
      [[builtin(sample_mask_in)]] mask_in : u32,
      //      OpDecorate %mask_in BuiltIn SampleMask ; an input variable
      //      OpDecorate %mask_in Flat
    ) -> FragmentOutput;

    [[stage(compute)]]
    fn cs_main(
      [[builtin(local_invocation_id)]] local_id : vec3<u32>,
      //     OpDecorate %local_id BuiltIn LocalInvocationId
      [[builtin(local_invocation_index)]] local_index : u32,
      //     OpDecorate %local_index BuiltIn LocalInvocationIndex
      [[builtin(global_invocation_id)]] global_id : vec3<u32>,
      //      OpDecorate %global_id BuiltIn GlobalInvocationId
   );
  </xmp>
</div>

# Built-in functions # {#builtin-functions}

Certain functions are always available in a [SHORTNAME] program,
and are provided by the implementation.
These are called <dfn noexport>built-in functions</dfn>.

Since a built-in function is always in scope, it is an error to attempt to redefine
one or to use the name of a built-in function as an identifier for any other
kind of declaration.

Unlike ordinary functions defined in a [SHORTNAME] program,
a built-in function may use the same function name with different
sets of parameters.
In other words, a built-in function may have more than one *overload*,
but ordinary function definitions in [SHORTNAME] may not.

When calling a built-in function, all arguments to the function are evaluated
before function evaulation begins.

TODO(dneto): Elaborate the descriptions of the built-in functions.  So far I've only reorganized
the contents of the existing table.

TODO: Explain the use of a function prototype in the table: provides name, formal parameter list, and return type.
That's not a full user-defined function declaration.

## Logical built-in functions ## {#logical-builtin-functions}

<table class='data'>
  <thead>
    <tr><th>Precondition<td>Conclusion<td>Notes
  </thead>
  <tr algorithm="vector all">
    <td>|e| : vecN&lt;bool&gt;
    <td>`all(`|e|`)` : bool
    <td>Returns true if each component of |e| is true.
    (OpAll)

  <tr algorithm="vector any">
    <td>|e| : vecN&lt;bool&gt;
    <td>`any(`|e|`)` : bool
    <td>Returns true if any component of |e| is true.
    (OpAny)

  <tr algorithm="scalar select">
    <td>|T| is a scalar or vector
    <td>`select(`|T|`,`|T|`,bool)` : |T|
    <td>`select(a,b,c)` evaluates to `a` when `c` is true, and `b` otherwise.
    (OpSelect)

  <tr algorithm="vector select">
    <td>|T| is a scalar
    <td>`select(vecN<`|T|`>,vecN<`|T|`>,vecN<bool>` : `vecN<`|T|`>`
    <td>Component-wise selection. Result component |i| is evaluated as `select(a[`|i|`],b[`|i|`],c[`|i|`])`.
    (OpSelect)
</table>

## Value-testing built-in functions ## {#value-testing-builtin-functions}
<table class='data'>
  <caption>Unary operators</caption>
  <thead>
    <tr><th>Precondition<th>Conclusion<th>Notes
  </thead>
  <tr algorithm="scalar case, test for NaN">
    <td>|e| : f32<td>`isNan(`|e|`)` : bool
    <td>Returns true if |e| is NaN according to IEEE. (OpIsNan)
  <tr algorithm="vector case, test for NaN">
    <td>|e| : |T|, |T| is *vecN*&lt;f32&gt;
    <td>`isNan(`|e|`)` : vec|N|&lt;bool&gt;, where |N| = *Arity(*|T|*)*<td>Component-wise test for NaN. Component *i* of the result is *isNan(e[i])*. (OpIsNan)
  <tr algorithm="scalar case, test for infinity">
    <td>|e| : f32<td>`isInf(`|e|`)` : bool
    <td>Returns true if |e| is an infinity according to IEEE. (OpIsInf)
  <tr algorithm="vector case, test for infinity">
    <td>|e| : |T|, |T| is *vecN*&lt;f32&gt;
    <td>`isInf(`|e|`)` : vec|N|&lt;bool&gt;, where |N| = *Arity(*|T|*)*<td>Component-wise test for inifinity. Component *i* of the result is *isInf(e[i])*. (OpIsInf)
  <tr algorithm="scalar case, test value is finite">
    <td>|e| : f32<td>`isFinite(`|e|`)` : bool
    <td>Returns true if |e| is finite according to IEEE. (emulated)
  <tr algorithm="vector case, test value is finite">
    <td>|e| : |T|, |T| is *vecN*&lt;f32&gt;
    <td>`isFinite(`|e|`)` : vec|N|&lt;bool&gt;, where |N| = *Arity(*|T|*)*<td>Component-wise finite value test. Component *i* of the result is *isFinite(e[i])*. (emulated)
  <tr algorithm="scalar case, test value is normal">
    <td>|e| : f32<td>`isNormal(`|e|`)` : bool
    <td>Returns true if |e| is a normal number according to IEEE. (emulated)
  <tr algorithm="vector case, test value is normal">
    <td>|e| : |T|, |T| is *vecN*&lt;f32&gt;
    <td>`isNormal(`|e|`)` : vec|N|&lt;bool&gt;, where |N| = *Arity(*|T|*)*<td>Component-wise test for normal number. Component *i* of the result is *isNormal(e[i])*. (emulated)
  <tr algorithm="runtime array length">
    <td>|e| : ptr&lt;storage,array&lt;|T|&gt;&gt;
    <td>`arrayLength(`|e|`)` : u32<td>Returns the number of elements in the runtime array.<br>
        (OpArrayLength, but you have to trace back to get the pointer to the enclosing struct.)
</table>

## Float built-in functions ## {#float-builtin-functions}

<table class='data'>
  <thead>
    <tr><th>Precondition<th>Conclusion<th>Description
  </thead>
  <tr algorithm="scalar case, float abs">
    <td>|T| is f32
    <td class="nowrap">`abs(`|e|`:` |T| `) -> ` |T|
    <td>Returns the absolute value of |e| (e.g. |e| with a positive sign bit).
    (GLSLstd450FAbs)
  <tr algorithm="vector case, float abs">
    <td>|T| is f32
    <td class="nowrap">`abs(`|e|`:` vec|N|<|T|> `) -> ` vec|N|<|T|>
    <td>Component-wise absolute value.
    Component |i| of the result is `abs(`|e|`[i])`.
    (GLSLstd450FAbs)

  <tr algorithm="scalar case, acos">
    <td>|T| is f32
    <td class="nowrap">`acos(`|e|`:` |T| `) -> ` |T|
    <td>Returns the arc cosine of |e|. (GLSLstd450Acos)
  <tr algorithm="vector case, acos">
    <td>|T| is f32
    <td class="nowrap">`acos(`|e|`:` vec|N|<|T|> `) -> ` vec|N|<|T|>
    <td>Component-wise arc cosine.
    Component |i| of the result is `acos(`|e|`[i])`.
    (GLSLstd450Acos)

  <tr algorithm="scalar case, asin">
    <td>|T| is f32
    <td class="nowrap">`asin(`|e|`:` |T| `) -> ` |T|
    <td>Returns the arc sine of |e|. (GLSLstd450Asin)
  <tr algorithm="vector case, asin">
    <td>|T| is f32
    <td class="nowrap">`asin(`|e|`:` vec|N|<|T|> `) -> ` vec|N|<|T|>
    <td>Component-wise arc sine.
    Component |i| of the result is `asin(`|e|`[i])`.
    (GLSLstd450ASin)

  <tr algorithm="scalar case, atan">
    <td>|T| is f32
    <td class="nowrap">`atan(`|e|`:` |T| `) -> ` |T|
    <td>Returns the arc tangent of |e|. (GLSLstd450Atan)
  <tr algorithm="vector case, atan">
    <td>|T| is f32
    <td class="nowrap">`atan(`|e|`:` vec|N|<|T|> `) -> ` vec|N|<|T|>
    <td>Component-wise arc tanget.
    Component |i| of the result is `atan(`|e|`[i])`.
    (GLSLstd450Atan)

  <tr algorithm="scalar case, atan2">
    <td>|T| is f32
    <td class="nowrap">`atan2(`|e1|`:` |T| `, `|e2|`:` |T| `) -> ` |T|
    <td>Returns the arc tangent of |e1| over |e2|. (GLSLstd450Atan2)
  <tr algorithm="vector case, atan2">
    <td>|T| is f32
    <td class="nowrap">`atan2(`|e1|`:` vec|N|<|T|> `, `|e2|`:` vec|N|<|T|> `) -> ` vec|N|<|T|>
    <td>Component-wise arc tangent of two inputs.
    Component |i| of the result is `atan2(`|e|`[i])`.
    (GLSLstd450Atan2)

  <tr algorithm="scalar case, ceil">
    <td>|T| is f32
    <td class="nowrap">`ceil(`|e|`:` |T| `) -> ` |T|
    <td>Returns the [=ceiling expression|ceiling=] of |e|. (GLSLstd450Ceil)
  <tr algorithm="vector case, ceil">
    <td>|T| is f32
    <td class="nowrap">`ceil(`|e|`:` vec|N|<|T|> `) -> ` vec|N|<|T|>
    <td>Component-wise ceiling.
    Component |i| of the result is `ceil(`|e|`[i])`.
    (GLSLstd450Ceil)

  <tr algorithm="scalar case, clamp">
    <td>|T| is f32
    <td class="nowrap">`clamp(`|e1|`:` |T| `, `|e2|`:` |T| `, `|e3|`:` |T|`) -> ` |T|
    <td>Returns `min(max(`|e1|`,`|e2|`),`|e3|`)`. (GLSLstd450NClamp)
  <tr algorithm="vector case, clamp">
    <td>|T| is f32
    <td class="nowrap">`clamp(`|e1|`:` vec|N|<|T|> `, `|e2|`:` vec|N|<|T|>`, `|e3|`:` vec|N|<|T|>`) -> ` vec|N|<|T|>
    <td>Component-wise clamp.
    Component |i| of the result is `clamp(`|e1|`[i], `|e2|`[i], `|e3|`[i])`.
    (GLSLstd450NClamp)

  <tr algorithm="scalar case, cos">
    <td>|T| is f32
    <td class="nowrap">`cos(`|e|`:` |T| `) -> ` |T|
    <td>Returns the cosine of |e|. (GLSLstd450Cos)
  <tr algorithm="vector case, cos">
    <td>|T| is f32
    <td class="nowrap">`cos(`|e|`:` vec|N|<|T|> `) -> ` vec|N|<|T|>
    <td>Component-wise cosine.
    Component |i| of the result is `cos(`|e|`)`.
    (GLSLstd450Cos)

  <tr algorithm="scalar case, cosh">
    <td>|T| is f32
    <td class="nowrap">`cosh(`|e|`:` |T| `) -> ` |T|
    <td>Returns the hyperbolic cosine of |e|. (GLSLstd450Cosh)
  <tr algorithm="vector case, cosh">
    <td>|T| is f32
    <td class="nowrap">`cosh(`|e|`:` vec|N|<|T|> `) -> ` vec|N|<|T|>
    <td>Component-wise hyperbolic cosine.
    Component |i| of the result is `cosh(`|e|`[i])`.
    (GLSLstd450Cosh)

  <tr algorithm="vector case, cross">
    <td>|T| is f32
    <td class="nowrap">`cross(`|e1|`:` vec3<|T|> `, `|e2|`:` vec3<|T|>`) -> ` vec3<|T|>
    <td>Returns the cross product of |e1| and |e2|. (GLSLstd450Cross)

  <tr algorithm="scalar case, distance">
    <td>|T| is f32
    <td class="nowrap">`distance(`|e1|`:` |T| `, `|e2|`:` |T| `) -> ` |T|
    <td>Returns the distance between |e1| and |e2| (e.g. `length(`|e1|` - `|e2|`)`). (GLSLstd450Distance)
  <tr algorithm="vector case, distance">
    <td>|T| is f32
    <td class="nowrap">`distance(`|e1|`:` vec|N|<|T|> `, `|e2|`:` vec|N|<|T|>`) -> ` |T|
    <td>Component-wise distance.
    Component |i| of the result is `distance(`|e1|`[i], `|e2|`[i])`.
    (GLSLstd450Distance)

  <tr algorithm="scalar case, exp">
    <td>|T| is f32
    <td class="nowrap">`exp(`|e1|`:` |T| `) -> ` |T|
    <td>Returns the natural exponentiation of |e1| (e.g. `e`<sup>|e1|</sup>). (GLSLstd450Exp)
  <tr algorithm="vector case, exp">
    <td>|T| is f32
    <td class="nowrap">`exp(`|e1|`:` vec|N|<|T|> `) -> ` vec|N|<|T|>
    <td>Component-wise natural exponentiation.
    Component |i| of the result is `exp(`|e1|`[i])`.
    (GLSLstd450Exp)

  <tr algorithm="scalar case, exp2">
    <td>|T| is f32
    <td class="nowrap">`exp2(`|e|`:` |T| `) -> ` |T|
    <td>Returns 2 raised to the power |e| (e.g. `2`<sup>|e|</sup>). (GLSLstd450Exp2)
  <tr algorithm="vector case, exp2">
    <td>|T| is f32
    <td class="nowrap">`exp2(`|e|`:` vec|N|<|T|> `) -> ` vec|N|<|T|>
    <td>Component-wise base-2 exponentiation.
    Component |i| of the result is `exp2(`|e|`[i])`.
    (GLSLstd450Exp2)

  <tr algorithm="scalar case, faceForward">
    <td>|T| is f32
    <td class="nowrap">`faceForward(`|e1|`:` |T| `, `|e2|`:` |T| `, `|e3|`:` |T| `) -> ` |T|
    <td>Returns |e1| if `dot(`|e2|`,`|e3|`)` is negative, and `-`|e1| otherwise. (GLSLstd450FaceForward)
  <tr algorithm="vector case, faceForward">
    <td>|T| is f32
    <td class="nowrap">`faceForward(`|e1|`:` vec|N|<|T|> `, `|e2|`:` vec|N|<|T|>`, `|e3|`:` vec|N|<|T|>`) -> ` vec|N|<|T|>
    <td>Component-wise face forward.
    Component |i| of the result is `faceForward(`|e1|`[i], `|e2|`[i], `|e3|`[i])`.
    (GLSLstd450FaceForward)

  <tr algorithm="scalar case, floor">
    <td>|T| is f32
    <td class="nowrap">`floor(`|e|`:` |T| `) -> ` |T|
    <td>Returns the [=floor expression|floor=] of |e|. (GLSLstd450Floor)
  <tr algorithm="vector case, floor">
    <td>|T| is f32
    <td class="nowrap">`floor(`|e|`:` vec|N|<|T|> `) -> ` vec|N|<|T|>
    <td>Component-wise floor.
    Component |i| of the result is `floor(`|e|`[i])`.
    (GLSLstd450Floor)

  <tr algorithm="scalar case, fma">
    <td>|T| is f32
    <td class="nowrap">`fma(`|e1|`:` |T| `, `|e2|`:` |T| `, `|e3|`:` |T| `) -> ` |T|
    <td>Returns |e1| `*` |e2| `+` |e3|. (GLSLstd450Fma)
  <tr algorithm="vector case, fma">
    <td>|T| is f32
    <td class="nowrap">`fma(`|e1|`:` vec|N|<|T|> `, `|e2|`:` vec|N|<|T|>`, `|e3|`:` vec|N|<|T|>`) -> ` vec|N|<|T|>
    <td>Component-wise fast multiple add.
    Component |i| of the result is `fma(`|e1|`[i], `|e2|`[i], `|e3|`[i])`.
    (GLSLstd450Fma)

  <tr algorithm="scalar case, fract">
    <td>|T| is f32
    <td class="nowrap">`fract(`|e|`:` |T| `) -> ` |T|
    <td>Returns the fractional bits of |e| (e.g. |e| `- floor(`|e|`)`). (GLSLstd450Fract)
  <tr algorithm="vector case, fract">
    <td>|T| is f32
    <td class="nowrap">`fract(`|e|`:` vec|N|<|T|> `) -> ` vec|N|<|T|>
    <td>Component-wise fractional.
    Component |i| of the result is `fract(`|e|`[i])`.
    (GLSLstd450Fract)

  <tr algorithm="scalar case, frexp">
    <td>|T| is f32<br>
        |I| is i32 or u32
    <td class="nowrap">`frexp(`|e1|`:` |T| `, `|e2|`:` ptr<|I|> `) -> ` |T|
    <td>Splits |e1| into a signficand and exponent of the form `significand * 2`<sup>`exponent`</sup> and returns the significand.
    The magnitude of the signficand is in the range of [0.5, 1.0) or 0.
    The exponent is stored through the pointer |e2|. (GLSLstd450Frexp)
  <tr algorithm="vector case, frexp">
    <td>|T| is f32<br>
        |I| is i32 or u32
    <td class="nowrap">`frexp(`|e1|`:` vec|N|<|T|> `, `|e2|`:` ptr&lt;vec|N|&lt;|I|&gt;&gt;`) -> ` vec|N|<|T|>
    <td>Component-wise fraction and exponent.
    Component |i| of the result is `frexp(`|e1|`[i], &(*`|e2|`).[i])`.
    (GLSLstd450Frexp)

  <tr algorithm="scalar case, inverseSqrt">
    <td>|T| is f32
    <td class="nowrap">`inverseSqrt(`|e|`:` |T| `) -> ` |T|
    <td>Returns the reciprocal of `sqrt(`|e|`)`. (GLSLstd450InverseSqrt)
  <tr algorithm="vector case, inverseSqrt">
    <td>|T| is f32
    <td class="nowrap">`inverseSqrt(`|e|`:` vec|N|<|T|> `) -> ` vec|N|<|T|>
    <td>Component-wise reciprocal square root.
    Component |i| of the result is `inverseSqrt(`|e1|`[i])`.
    (GLSLstd450InverseSqrt)

  <tr algorithm="scalar case, ldexp">
    <td>|T| is f32<br>
        |I| is i32 or u32
    <td class="nowrap">`ldexp(`|e1|`:` |T| `, `|e2|`:` |I| `) -> ` |T|
    <td>Returns |e1| `* 2`<sup>|e2|</sup>. (GLSLstd450Ldexp)
  <tr algorithm="vector case, ldexp">
    <td>|T| is f32<br>
        |I| is i32 or u32
    <td class="nowrap">`ldexp(`|e1|`:` vec|N|<|T|> `, `|e2|`:` vec|N|&lt;|I|&gt;`) -> ` vec|N|<|T|>
    <td>Component-wise floating-point number composition.
    Component |i| of the result is `ldexp(`|e1|`[i], `|e2|`[i])`.
    (GLSLstd450Ldexp)

  <tr algorithm="scalar case, length">
    <td>|T| is f32
    <td class="nowrap">`length(`|e|`:` |T| `) -> ` |T|
    <td>Returns `abs(`|e|`)`.
    (GLSLstd450Length)
  <tr algorithm="vector case, length">
    <td>|T| is f32
    <td class="nowrap">`length(`|e|`:` vec|N|<|T|> `) -> ` |T|
    <td>Returns the length |e| (e.g. `sqrt(`|e|`[0]`<sup>`2`</sup> `+` |e|`[1]`<sup>`2`</sup> `+ ...)`).
    (GLSLstd450Length)

  <tr algorithm="scalar case, log">
    <td>|T| is f32
    <td class="nowrap">`log(`|e|`:` |T| `) -> ` |T|
    <td>Returns the natural logaritm of |e|. (GLSLstd450Log)
  <tr algorithm="vector case, log">
    <td>|T| is f32
    <td class="nowrap">`log(`|e|`:` vec|N|<|T|> `) -> ` vec|N|<|T|>
    <td>Component-wise natural logarithm.
    Component |i| of the result is `log(`|e|`[i])`.
    (GLSLstd450Log)

  <tr algorithm="scalar case, log2">
    <td>|T| is f32
    <td class="nowrap">`log2(`|e|`:` |T| `) -> ` |T|
    <td>Returns the base-2 logarithm of |e|. (GLSLstd450Log2)
  <tr algorithm="vector case, log2">
    <td>|T| is f32
    <td class="nowrap">`log2(`|e|`:` vec|N|<|T|> `) -> ` vec|N|<|T|>
    <td>Component-wise base-2 logarithm.
    Component |i| of the result is `log2(`|e|`[i])`.
    (GLSLstd450Log2)

  <tr algorithm="scalar case, max">
    <td>|T| is f32
    <td class="nowrap">`max(`|e1|`:` |T| `, `|e2|`:` |T| `) -> ` |T|
    <td>Returns |e2| if |e1| is less than |e2|, and |e1| otherwise. (GLSLstd450NMax)
  <tr algorithm="vector case, max">
    <td>|T| is f32
    <td class="nowrap">`max(`|e1|`:` vec|N|<|T|> `, `|e2|`:` vec|N|<|T|>`) -> ` vec|N|<|T|>
    <td>Component-wise maximum.
    Component |i| of the result is `max(`|e1|`[i], `|e2|`[i])`.
    (GLSLstd450NMax)

  <tr algorithm="scalar case, min">
    <td>|T| is f32
    <td class="nowrap">`min(`|e1|`:` |T| `, `|e2|`:` |T| `) -> ` |T|
    <td>Returns |e2| if |e2| is less than |e1|, and |e1| otherwise. (GLSLstd450NMin)
  <tr algorithm="vector case, min">
    <td>|T| is f32
    <td class="nowrap">`min(`|e1|`:` vec|N|<|T|> `, `|e2|`:` vec|N|<|T|>`) -> ` vec|N|<|T|>
    <td>Component-wise minimum.
    Component |i| of the result is `min(`|e1|`[i], `|e2|`[i])`.
    (GLSLstd450NMin)

  <tr algorithm="scalar case, mix">
    <td>|T| is f32
    <td class="nowrap">`mix(`|e1|`:` |T| `, `|e2|`:` |T| `, `|e3|`:` |T|`) -> ` |T|
    <td>Returns the linear blend of |e1| and |e2| (e.g. |e1|`*(1-`|e3|`)+`|e2|`*`|e3|).
    (GLSLstd450FMix)
  <tr algorithm="vector case, mix">
    <td>|T| is f32
    <td class="nowrap">`mix(`|e1|`:` vec|N|<|T|> `, `|e2|`:` vec|N|<|T|>`, `|e3|`:` vec|N|<|T|>`) -> ` vec|N|<|T|>
    <td>Component-wise mix.
    Component |i| of the result is `mix(`|e1|`[i], `|e2|`[i], `|e3|`[i])`.
    (GLSLstd450FMix)

  <tr algorithm="scalar case, modf">
    <td>|T| is f32<br>
    <td class="nowrap">`modf(`|e1|`:` |T| `, `|e2|`:` ptr<|T|> `) -> ` |T|
    <td>Splits |e1| into fractional and whole number parts.
    Returns the fractional part and stores the whole number through the pointer |e2|.
    (GLSLstd450Modf)
  <tr algorithm="vector case, modf">
    <td>|T| is f32
    <td class="nowrap">`modf(`|e1|`:` vec|N|<|T|> `, `|e2|`:` ptr&lt;vec|N|&lt;|T|&gt;&gt;`) -> ` vec|N|<|T|>
    <td>Component-wise fractional and whole number splitting.
    Component |i| of the result is `modf(`|e1|`[i], &(*`|e2|`).[i])`.
    (GLSLstd450Modf)

  <tr algorithm="vector case, normalize">
    <td>|T| is f32
    <td class="nowrap">`normalize(`|e|`:` vec|N|<|T|> `) -> ` vec|N|<|T|>
    <td>Returns a unit vector in the same direction as |e|.
    (GLSLstd450Normalize)

  <tr algorithm="scalar case, pow">
    <td>|T| is f32
    <td class="nowrap">`pow(`|e1|`:` |T| `, `|e2|`:` |T| `) -> ` |T|
    <td>Returns |e1| raised to the power |e2|.
    (GLSLstd450Pow)
  <tr algorithm="vector case, pow">
    <td>|T| is f32
    <td class="nowrap">`pow(`|e1|`:` vec|N|<|T|> `, `|e2|`:` vec|N|<|T|> `) -> ` vec|N|<|T|>
    <td>Component-wise power.
    Component |i| of the result is `pow(`|e1|`[i],`|e2|`[i])`.
    (GLSLstd450Pow)

  <tr algorithm="scalar case, reflect">
    <td>|T| is f32
    <td class="nowrap">`reflect(`|e1|`:` |T| `, `|e2|`:` |T| `) -> ` |T|
    <td>For the incident vector |e1| and surface orientation |e2|, returns the reflection direction
    |e1|`-2*dot(`|e2|`,`|e1|`)*|e2|`.
    (GLSLstd450Reflect)
  <tr algorithm="vector case, reflect">
    <td>|T| is f32
    <td class="nowrap">`reflect(`|e1|`:` vec|N|<|T|> `, `|e2|`:` vec|N|<|T|>`) -> ` vec|N|<|T|>
    <td>Component-wise reflection direction.
    Component |i| of the result is `reflect(`|e1|`[i],`|e2|`[i])`.
    (GLSLstd450Reflect)

  <tr algorithm="scalar case, round">
    <td>|T| is f32
    <td class="nowrap">`round(`|e|`:` |T| `) -> ` |T|
    <td>Result is the integer |k| nearest to |e|, as a floating point value.<br>
        When |e| lies halfway between integers |k| and |k|+1,
        the result is |k| when |k| is even, and |k|+1 when |k| is odd.<br>
        (GLSLstd450RoundEven)
  <tr algorithm="vector case, round">
    <td>|T| is f32
    <td class="nowrap">`round(`|e|`:` vec|N|<|T|> `) -> ` vec|N|<|T|>
    <td>Component-wise rounding.<br>
         Component |i| of the result is `round`(|e|[|i|])<br>
        (GLSLstd450RoundEven)

  <tr algorithm="scalar case, float sign">
    <td>|T| is f32
    <td class="nowrap">`sign(`|e|`:` |T| `) -> ` |T|
    <td>Returns the sign of |e|.
    (GLSLstd450FSign)
  <tr algorithm="vector case, float sign">
    <td>|T| is f32
    <td class="nowrap">`sign(`|e|`:` vec|N|<|T|> `) -> ` vec|N|<|T|>
    <td>Component-wise sign.
    Component |i| of the result is `sign(`|e|`[i])`.
    (GLSLstd450FSign)

  <tr algorithm="scalar case, sin">
    <td>|T| is f32
    <td class="nowrap">`sin(`|e|`:` |T| `) -> ` |T|
    <td>Returns the sine of |e|.
    (GLSLstd450Sin)
  <tr algorithm="vector case, sin">
    <td>|T| is f32
    <td class="nowrap">`sin(`|e|`:` vec|N|<|T|> `) -> ` vec|N|<|T|>
    <td>Component-wise sine.
    Component |i| of the result is `sin(`|e|`[i])`.
    (GLSLstd450Sin)

  <tr algorithm="scalar case, sinh">
    <td>|T| is f32
    <td class="nowrap">`sinh(`|e|`:` |T| `) -> ` |T|
    <td>Returns the hyperbolic sine of |e|.
    (GLSLstd450Sinh)
  <tr algorithm="vector case, sinh">
    <td>|T| is f32
    <td class="nowrap">`sinh(`|e|`:` vec|N|<|T|> `) -> ` vec|N|<|T|>
    <td>Component-wise hyperbolic sine.
    Component |i| of the result is `sinh(`|e|`[i])`.
    (GLSLstd450Sinh)

  <tr algorithm="scalar case, smoothStep">
    <td>|T| is f32
    <td class="nowrap">`smoothStep(`|e1|`:` |T| `, `|e2|`:` |T| `, `|e3|`:` |T| `) -> ` |T|
    <td>Returns the smooth Hermite interpolation between 0 and 1.
    (GLSLstd450SmoothStep)
  <tr algorithm="vector case, smoothStep">
    <td>|T| is f32
    <td class="nowrap">`smoothStep(`|e1|`:` vec|N|<|T|> `, `|e2|`:` vec|N|<|T|>`, `|e3|`:` vec|N|<|T|>`) -> ` vec|N|<|T|>
    <td>Component-wise smooth Hermite interpolation.
    Component |i| of the result is `smoothStep(`|e1|`[i],`|e2|`[i],`|e3|`[i])`.
    (GLSLstd450SmoothStep)

  <tr algorithm="scalar case, sqrt">
    <td>|T| is f32
    <td class="nowrap">`sqrt(`|e|`:` |T| `) -> ` |T|
    <td>Returns the square root of |e|.
    (GLSLstd450Sqrt)
  <tr algorithm="vector case, sqrt">
    <td>|T| is f32
    <td class="nowrap">`sqrt(`|e|`:` vec|N|<|T|> `) -> ` vec|N|<|T|>
    <td>Component-wise square root.
    Component |i| of the result is `sqrt(`|e|`[i])`.
    (GLSLstd450Sqrt)

  <tr algorithm="scalar case, step">
    <td>|T| is f32
    <td class="nowrap">`step(`|e1|`:` |T| `, `|e2|`:` |T| `) -> ` |T|
    <td>Returns 0.0 if |e1| is less than |e2|, and 1.0 otherwise.
    (GLSLstd450Step)
  <tr algorithm="vector case, step">
    <td>|T| is f32
    <td class="nowrap">`step(`|e1|`:` vec|N|<|T|> `, `|e2|`:` vec|N|<|T|>`) -> ` vec|N|<|T|>
    <td>Component-wise step.
    Component |i| of the result is `step(`|e1|`[i],`|e1|`[i])`.
    (GLSLstd450Step)

  <tr algorithm="scalar case, tan">
    <td>|T| is f32
    <td class="nowrap">`tan(`|e|`:` |T| `) -> ` |T|
    <td>Returns the tangent of |e|.
    (GLSLstd450Tan)
  <tr algorithm="vector case, tan">
    <td>|T| is f32
    <td class="nowrap">`tan(`|e|`:` vec|N|<|T|> `) -> ` vec|N|<|T|>
    <td>Component-wise tangent.
    Component |i| of the result is `tan(`|e|`[i])`.
    (GLSLstd450Tan)

  <tr algorithm="scalar case, tanh">
    <td>|T| is f32
    <td class="nowrap">`tanh(`|e|`:` |T| `) -> ` |T|
    <td>Returns the hyperbolic tangent of |e|.
    (GLSLstd450Tanh)
  <tr algorithm="vector case, tanh">
    <td>|T| is f32
    <td class="nowrap">`tanh(`|e|`:` vec|N|<|T|> `) -> ` vec|N|<|T|>
    <td>Component-wise hyperbolic tangent.
    Component |i| of the result is `tanh(`|e|`[i])`.
    (GLSLstd450Tanh)

  <tr algorithm="scalar case, trunc">
    <td>|T| is f32
    <td class="nowrap">`trunc(`|e|`:` |T| `) -> ` |T|
    <td>Returns the nearest whole number whose absolute value is less than or equal to |e|.
    (GLSLstd450Trunc)
  <tr algorithm="vector case, trunc">
    <td>|T| is f32
    <td class="nowrap">`trunc(`|e|`:` vec|N|<|T|> `) -> ` vec|N|<|T|>
    <td>Component-wise truncate.
    Component |i| of the result is `trunc(`|e|`[i])`.
    (GLSLstd450Trunc)
</table>

## Integer built-in functions ## {#integer-builtin-functions}

<table class='data'>
  <thead>
    <tr><th>Precondition<th>Conclusion<th>Description
  </thead>
  <tr algorithm="scalar case, signed abs">
    <td>
    <td class="nowrap">`abs`(|e|: i32 ) -> i32
    <td>The absolute value of |e|.<br>
        (GLSLstd450SAbs)
  <tr algorithm="vector case, signed abs">
    <td>
    <td class="nowrap">`abs`(|e| : vec|N|&lt;i32&gt; ) -> vec|N|&lt;i32&gt;
    <td>Component-wise absolute value:
        Component |i| of the result is `abs(`|e|`[`|i|`])`<br>
        (GLSLstd450SAbs)

  <tr algorithm="scalar case, unsigned abs">
    <td>
    <td class="nowrap">`abs`(|e| : u32 ) -> u32
    <td>Result is |e|.  This is provided for symmetry with `abs` for signed integers.
  <tr algorithm="vector case, unsgined abs">
    <td>
    <td class="nowrap">`abs(`|e|`:` vec|N|&lt;u32&gt; `) ->` vec|N|&lt;u32&gt;
    <td>Result is |e|.  This is provided for symmetry with `abs` for signed integer vectors.

  <tr algorithm="scalar case, unsigned clamp">
    <td>|T| is u32
    <td class="nowrap">`clamp(`|e1|`:` |T| `, `|e2|`:` |T|`, `|e3|`:` |T|`) ->` |T|
    <td>Returns `min(max(`|e1|`,`|e2|`),`|e3|`)`.
    (GLSLstd450UClamp)
  <tr algorithm="vector case, unsigned clamp">
    <td>|T| is u32
    <td class="nowrap">`clamp(`|e1|`:` vec|N|<|T|> `, `|e2|`:` vec|N|<|T|>`, `|e3|`:`vec|N|<|T|> `) ->` vec|N|<|T|>
    <td>Component-wise clamp.
    Component |i| of the result is `clamp(`|e1|`[i],`|e2|`[i],`|e3|`[i])`.
    (GLSLstd450UClamp)

  <tr algorithm="scalar case, signed clamp">
    <td>|T| is i32
    <td class="nowrap">`clamp(`|e1|`:` |T| `, `|e2|`:` |T|`, `|e3|`:` |T|`) ->` |T|
    <td>Returns `min(max(`|e1|`,`|e2|`),`|e3|`)`.
    (GLSLstd450SClamp)
  <tr algorithm="vector case, signed clamp">
    <td>|T| is i32
    <td class="nowrap">`clamp(`|e1|`:` vec|N|<|T|> `, `|e2|`:` vec|N|<|T|>`, `|e3|`:`vec|N|<|T|> `) ->` vec|N|<|T|>
    <td>Component-wise clamp.
    Component |i| of the result is `clamp(`|e1|`[i],`|e2|`[i],`|e3|`[i])`.
    (GLSLstd450UClamp)

  <tr algorithm="scalar case, count 1 bits">
    <td>|T| is u32 or i32<br>
    <td class="nowrap">`countOneBits(`|e|`:` |T| `) ->` |T|
    <td>The number of 1 bits in the representation of |e|.<br>
        Also known as "population count".<br>
        (SPIR-V OpBitCount)
  <tr algorithm="vector case, count 1 bits">
    <td>|T| is u32 or i32
    <td class="nowrap">`countOneBits(`|e|`:` vec|N|<|T|>`) ->` vec|N|<|T|><br>
    <td>Component-wise population count:
        Component |i| of the result is `countOneBits(`|e|`[`|i|`])`<br>
        (SPIR-V OpBitCount)

  <tr algorithm="scalar case, unsigned max">
    <td>|T| is u32
    <td class="nowrap">`max(`|e1|`:` |T| `, `|e2|`:` |T|`) ->` |T|
    <td>Returns |e2| if |e1| is less than |e2|, and |e1| otherwise.
    (GLSLstd450UMax)
  <tr algorithm="vector case, unsigned max">
    <td>|T| is u32
    <td class="nowrap">`max(`|e1|`:` vec|N|<|T|> `, `|e2|`:` vec|N|<|T|>`) ->` vec|N|<|T|>
    <td>Component-wise maximum.
    Component |i| of the result is `max(`|e1|`[i],`|e2|`[i])`.
    (GLSLstd450UMax)

  <tr algorithm="scalar case, signed max">
    <td>|T| is i32
    <td class="nowrap">`max(`|e1|`:` |T| `, `|e2|`:` |T|`) ->` |T|
    <td>Returns |e2| if |e1| is less than |e2|, and |e1| otherwise.
    (GLSLstd450SMax)
  <tr algorithm="vector case, signed max">
    <td>|T| is i32
    <td class="nowrap">`max(`|e1|`:` vec|N|<|T|> `, `|e2|`:` vec|N|<|T|>`) ->` vec|N|<|T|>
    <td>Component-wise maximum.
    Component |i| of the result is `max(`|e1|`[i],`|e2|`[i])`.
    (GLSLstd45SUMax)

  <tr algorithm="scalar case, unsigned min">
    <td>|T| is u32
    <td class="nowrap">`min(`|e1|`:` |T| `, `|e2|`:` |T|`) ->` |T|
    <td>Returns |e1| if |e1| is less than |e2|, and |e2| otherwise.
    (GLSLstd450UMin)
  <tr algorithm="vector case, unsigned min">
    <td>|T| is u32
    <td class="nowrap">`min(`|e1|`:` vec|N|<|T|> `, `|e2|`:` vec|N|<|T|>`) ->` vec|N|<|T|>
    <td>Component-wise minimum.
    Component |i| of the result is `min(`|e1|`[i],`|e2|`[i])`.
    (GLSLstd450UMin)

  <tr algorithm="scalar case, signed min">
    <td>|T| is i32
    <td class="nowrap">`min(`|e1|`:` |T| `, `|e2|`:` |T|`) ->` |T|
    <td>Returns |e1| if |e1| is less than |e2|, and |e2| otherwise.
    (GLSLstd45SUMin)
  <tr algorithm="vector case, signed min">
    <td>|T| is i32
    <td class="nowrap">`min(`|e1|`:` vec|N|<|T|> `, `|e2|`:` vec|N|<|T|>`) ->` vec|N|<|T|>
    <td>Component-wise minimum.
    Component |i| of the result is `min(`|e1|`[i],`|e2|`[i])`.
    (GLSLstd450SMin)

  <tr algorithm="scalar bit reversal">
    <td>|T| is u32 or i32<br>
    <td class="nowrap">`reverseBits(`|e|`:` |T| `) ->`  |T|
    <td>Reverses the bits in |e|:  The bit at position |k| of the result equals the
        bit at position 31-|k| of |e|.<br>
        (SPIR-V OpBitReverse)
  <tr algorithm="vector bit reversal">
    <td>|T| is u32 or i32
    <td class="nowrap">`reverseBits(`|e|`:` vec|N|<|T|> `) ->` vec|N|<|T|><br>
    <td>Component-wise bit reversal:
        Component |i| of the result is `reverseBits(`|e|`[`|i|`])`<br>
        (SPIR-V OpBitReverse)
</table>

## Matrix built-in functions ## {#matrix-builtin-functions}
<table class='data'>
  <thead>
    <tr><th>Precondition<th>Conclusion<th>Description
  </thead>
  <tr algorithm="determinant">
    <td>|T| is f32
    <td class="nowrap">`determinant(`|e|`:` mat|N|x|N|<|T|> `) -> ` |T|
    <td>Returns the determinant of |e|.
    (GLSLstd450Determinant)
  <tr algorithm="transpose">
    <td>|T| is f32
    <td class="nowrap">`transpose(`|e|`:` mat|M|x|N|<|T|> `) -> ` mat|N|x|M|<|T|>
    <td>Returns the transpose of |e|.
    (OpTranspose)
</table>

## Vector built-in functions ## {#vector-builtin-functions}

<table class='data'>
  <thead>
    <tr><th>Precondition<td>Conclusion<td>Notes
  </thead>
  <tr algorithm="dot"><td>|T| is f32
  <td>`dot(`|e1|` : vecN<`|T|`>, `|e2|` : vecN<`|T|`>) ->` |T|
  <td>Returns the dot product of |e1| and |e2|.
  (OpDot)
</table>

## Derivative built-in functions ## {#derivative-builtin-functions}

<table class='data'>
  <thead>
    <tr><th>Precondition<th>Conclusion<th>Notes
  </thead>
  <tr><td rowspan=9>|T| is f32 or vecN&lt;f32&gt;
  <td>`dpdx(`|e|` : `|T|`) ->` |T|
  <td>Partial derivative of |e| with respect to window x coordinates.
  The result is the same as either `dpdxFine(`|e|`)` or `dpdxCoarse(`|e|`)`.
  (OpDPdx)
  <tr><td>`dpdxCoarse(`|e|` : `|T|`) -> `|T|
  <td>Returns the partial derivative of |e| with respect to window x coordinates using local differences.
  This may result in fewer unique positions that `dpdxFine(`|e|`)`.
  (OpDPdxCoarse)
  <tr><td>`dpdxFine(`|e|` : `|T|`) -> `|T|
  <td>Returns the partial derivative of |e| with respect to window x coordinates.
  (OpDPdxFine)

  <tr><td>`dpdy(`|e|` : `|T|`) -> `|T|
  <td>Partial derivative of |e| with respect to window y coordinates.
  The result is the same as either `dpdyFine(`|e|`)` or `dpdyCoarse(`|e|`)`.
  (OpDPdy)
  <tr><td>`dpdyCoarse(`|e|` : `|T|`) -> `|T|
  <td>Returns the partial derivative of |e| with respect to window y coordinates using local differences.
  This may result in fewer unique positions that `dpdyFine(`|e|`)`.
  (OpDPdyCoarse)
  <tr><td>`dpdyFine(`|e|` : `|T|`) -> `|T|
  <td>Returns the partial derivative of |e| with respect to window y coordinates.
  (OpDPdyFine)

  <tr><td>`fwidth(`|e|` : `|T|`) -> `|T|
  <td>Returns `abs(dpdx(`|e|`)) + abs(dpdy(`|e|`))`.
  (OpFwidth)
  <tr><td>`fwidthCoarse(`|e|` : `|T|`) -> `|T|
  <td>Returns `abs(dpdxCoarse(`|e|`)) + abs(dpdyCoarse(`|e|`))`.
  (OpFwidthCoarse)
  <tr><td>`fwidthFine(`|e|` : `|T|`) -> `|T|
  <td>Returns `abs(dpdxFine(`|e|`)) + abs(dpdyFine(`|e|`))`.
  (OpFwidthFine)
</table>

## Texture built-in functions ## {#texture-builtin-functions}

### `textureDimensions` ### {#texturedimensions}

Returns the dimensions of a texture, or texture's mip level in texels.

```rust
textureDimensions(t : texture_1d<T>) -> i32
textureDimensions(t : texture_2d<T>) -> vec2<i32>
textureDimensions(t : texture_2d<T>, level : i32) -> vec2<i32>
textureDimensions(t : texture_2d_array<T>) -> vec2<i32>
textureDimensions(t : texture_2d_array<T>, level : i32) -> vec2<i32>
textureDimensions(t : texture_3d<T>) -> vec3<i32>
textureDimensions(t : texture_3d<T>, level : i32) -> vec3<i32>
textureDimensions(t : texture_cube<T>) -> vec3<i32>
textureDimensions(t : texture_cube<T>, level : i32) -> vec3<i32>
textureDimensions(t : texture_cube_array<T>) -> vec3<i32>
textureDimensions(t : texture_cube_array<T>, level : i32) -> vec3<i32>
textureDimensions(t : texture_multisampled_2d<T>)-> vec2<i32>
textureDimensions(t : texture_multisampled_2d_array<T>)-> vec2<i32>
textureDimensions(t : texture_depth_2d) -> vec2<i32>
textureDimensions(t : texture_depth_2d, level : i32) -> vec2<i32>
textureDimensions(t : texture_depth_2d_array) -> vec2<i32>
textureDimensions(t : texture_depth_2d_array, level : i32) -> vec2<i32>
textureDimensions(t : texture_depth_cube) -> vec3<i32>
textureDimensions(t : texture_depth_cube, level : i32) -> vec3<i32>
textureDimensions(t : texture_depth_cube_array) -> vec3<i32>
textureDimensions(t : texture_depth_cube_array, level : i32) -> vec3<i32>
textureDimensions(t : texture_storage_1d<F>) -> i32
textureDimensions(t : texture_storage_2d<F>) -> vec2<i32>
textureDimensions(t : texture_storage_2d_array<F>) -> vec2<i32>
textureDimensions(t : texture_storage_3d<F>) -> vec3<i32>
```

**Parameters:**

<table class='data'>
  <tr><td>`t`<td>
  The [sampled](#sampled-texture-type),
  [multisampled](#multisampled-texture-type), [depth](#texture-depth), or
  [storage](#texture-storage) texture.
  <tr><td>`level`<td>
  The mip level, with level 0 containing a full size version of the texture.<br>
  If omitted, the dimensions of level 0 are returned.
</table>

**Returns:**

The dimensions of the texture in texels.<br>


### `textureLoad` ### {#textureload}

Reads a single texel from a texture without sampling or filtering.

```rust
textureLoad(t : texture_1d<T>, coords : i32, level : i32) -> vec4<T>
textureLoad(t : texture_2d<T>, coords : vec2<i32>, level : i32) -> vec4<T>
textureLoad(t : texture_2d_array<T>, coords : vec2<i32>, array_index : i32, level : i32) -> vec4<T>
textureLoad(t : texture_3d<T>, coords : vec3<i32>, level : i32) -> vec4<T>
textureLoad(t : texture_multisampled_2d<T>, coords : vec2<i32>, sample_index : i32)-> vec4<T>
textureLoad(t : texture_multisampled_2d_array<T>, coords : vec2<i32>, array_index : i32, sample_index : i32)-> vec4<T>
textureLoad(t : texture_depth_2d, coords : vec2<i32>, level : i32) -> f32
textureLoad(t : texture_depth_2d_array, coords : vec2<i32>, array_index : i32, level : i32) -> f32
textureLoad(t : [[access(read)]] texture_storage_1d<F>, coords : i32) -> vec4<T>
textureLoad(t : [[access(read)]] texture_storage_2d<F>, coords : vec2<i32>) -> vec4<T>
textureLoad(t : [[access(read)]] texture_storage_2d_array<F>, coords : vec2<i32>, array_index : i32) -> vec4<T>
textureLoad(t : [[access(read)]] texture_storage_3d<F>, coords : vec3<i32>) -> vec4<T>
```

For [read-only storage textures](#texture-storage) the returned channel format `T`
depends on the texel format `F`.
[See the texel format table](#storage-texel-formats) for the mapping of texel
format to channel format.

**Parameters:**

<table class='data'>
  <tr><td>`t`<td>
  The [sampled](#sampled-texture-type),
  [multisampled](#multisampled-texture-type), [depth](#texture-depth) or
  [read-only storage](#texture-storage) texture.
  <tr><td>`coords`<td>
  The 0-based texel coordinate.
  <tr><td>`array_index`<td>
  The 0-based texture array index.
  <tr><td>`level`<td>
  The mip level, with level 0 containing a full size version of the texture.
  <tr><td>`sample_index`<td>
  The 0-based sample index of the multisampled texture.
</table>

**Returns:**

If all the parameters are within bounds, the unfiltered texel data.<br>
If any of the parameters are out of bounds, then zero in all components.


### `textureNumLayers` ### {#texturenumlayers}

Returns the number of layers (elements) of an array texture.

```rust
textureNumLayers(t : texture_2d_array<T>) -> i32
textureNumLayers(t : texture_cube_array<T>) -> i32
textureNumLayers(t : texture_multisampled_2d_array<T>) -> i32
textureNumLayers(t : texture_depth_2d_array) -> i32
textureNumLayers(t : texture_depth_cube_array) -> i32
textureNumLayers(t : texture_storage_2d_array<F>) -> i32
```

**Parameters:**

<table class='data'>
  <tr><td>`t`<td>
  The [sampled](#sampled-texture-type),
  [multisampled](#multisampled-texture-type), [depth](#texture-depth) or
  [storage](#texture-storage) array texture.
</table>

**Returns:**

If the number of layers (elements) of the array texture.


### `textureNumLevels` ### {#texturenumlevels}

Returns the number of mip levels of a texture.

```rust
textureNumLevels(t : texture_2d<T>) -> i32
textureNumLevels(t : texture_2d_array<T>) -> i32
textureNumLevels(t : texture_3d<T>) -> i32
textureNumLevels(t : texture_cube<T>) -> i32
textureNumLevels(t : texture_cube_array<T>) -> i32
textureNumLevels(t : texture_depth_2d) -> i32
textureNumLevels(t : texture_depth_2d_array) -> i32
textureNumLevels(t : texture_depth_cube) -> i32
textureNumLevels(t : texture_depth_cube_array) -> i32
```

**Parameters:**

<table class='data'>
  <tr><td>`t`<td>
  The [sampled](#sampled-texture-type) or [depth](#texture-depth) texture.
</table>

**Returns:**

If the number of mip levels for the texture.


### `textureNumSamples` ### {#texturenumsamples}

Returns the number samples per texel in a multisampled texture.

```rust
textureNumSamples(t : texture_multisampled_2d<T>) -> i32
textureNumSamples(t : texture_multisampled_2d_array<T>) -> i32
```

**Parameters:**

<table class='data'>
  <tr><td>`t`<td>
  The [multisampled](#multisampled-texture-type) texture.
</table>

**Returns:**

If the number of samples per texel in the multisampled texture.


### `textureSample` ### {#texturesample}

Samples a texture.
Must only be used in a [=fragment=] shader stage.

```rust
textureSample(t : texture_1d<f32>, s : sampler, coords : f32) -> vec4<f32>
textureSample(t : texture_2d<f32>, s : sampler, coords : vec2<f32>) -> vec4<f32>
textureSample(t : texture_2d<f32>, s : sampler, coords : vec2<f32>, offset : vec2<i32>) -> vec4<f32>
textureSample(t : texture_2d_array<f32>, s : sampler, coords : vec2<f32>, array_index : i32) -> vec4<f32>
textureSample(t : texture_2d_array<f32>, s : sampler, coords : vec2<f32>, array_index : i32, offset : vec2<i32>) -> vec4<f32>
textureSample(t : texture_3d<f32>, s : sampler, coords : vec3<f32>) -> vec4<f32>
textureSample(t : texture_3d<f32>, s : sampler, coords : vec3<f32>, offset : vec3<i32>) -> vec4<f32>
textureSample(t : texture_cube<f32>, s : sampler, coords : vec3<f32>) -> vec4<f32>
textureSample(t : texture_cube_array<f32>, s : sampler, coords : vec3<f32>, array_index : i32) -> vec4<f32>
textureSample(t : texture_depth_2d, s : sampler, coords : vec2<f32>) -> f32
textureSample(t : texture_depth_2d, s : sampler, coords : vec2<f32>, offset : vec2<i32>) -> f32
textureSample(t : texture_depth_2d_array, s : sampler, coords : vec2<f32>, array_index : i32) -> f32
textureSample(t : texture_depth_2d_array, s : sampler, coords : vec2<f32>, array_index : i32, offset : vec2<i32>) -> f32
textureSample(t : texture_depth_cube, s : sampler, coords : vec3<f32>) -> f32
textureSample(t : texture_depth_cube_array, s : sampler, coords : vec3<f32>, array_index : i32) -> f32
```

**Parameters:**

<table class='data'>
  <tr><td>`t`<td>
  The [sampled](#sampled-texture-type) or [depth](#texture-depth) texture to
  sample.
  <tr><td>`s`<td>
  The [sampler type](#sampler-type).
  <tr><td>`coords`<td>
  The texture coordinates used for sampling.
  <tr><td>`array_index`<td>
  The 0-based texture array index to sample.
  <tr><td>`offset`<td>
  The optional texel offset applied to the unnormalized texture coordinate
  before sampling the texture. This offset is applied before applying any
  texture wrapping modes.<br>
  `offset` must be compile time constant, and may only be provided as a
  [literal](#literals) or `const_expr` expression (e.g. `vec2<i32>(1, 2)`).<br>
  Each `offset` component must be at least `-8` and at most `7`. Values outside
  of this range will be treated as a compile time error.
</table>

**Returns:**

The sampled value.


### `textureSampleBias` ### {#texturesamplebias}

Samples a texture with a bias to the mip level.
Must only be used in a [=fragment=] shader stage.

```rust
textureSampleBias(t : texture_2d<f32>, s : sampler, coords : vec2<f32>, bias : f32) -> vec4<f32>
textureSampleBias(t : texture_2d<f32>, s : sampler, coords : vec2<f32>, bias : f32, offset : vec2<i32>) -> vec4<f32>
textureSampleBias(t : texture_2d_array<f32>, s : sampler, coords : vec2<f32>, array_index : i32, bias : f32) -> vec4<f32>
textureSampleBias(t : texture_2d_array<f32>, s : sampler, coords : vec2<f32>, array_index : i32, bias : f32, offset : vec2<i32>) -> vec4<f32>
textureSampleBias(t : texture_3d<f32>, s : sampler, coords : vec3<f32>, bias : f32) -> vec4<f32>
textureSampleBias(t : texture_3d<f32>, s : sampler, coords : vec3<f32>, bias : f32, offset : vec3<i32>) -> vec4<f32>
textureSampleBias(t : texture_cube<f32>, s : sampler, coords : vec3<f32>, bias : f32) -> vec4<f32>
textureSampleBias(t : texture_cube_array<f32>, s : sampler, coords : vec3<f32>, array_index : i32, bias : f32) -> vec4<f32>
```

**Parameters:**

<table class='data'>
  <tr><td>`t`<td>
  The [texture](#sampled-texture-type) to sample.
  <tr><td>`s`<td>
  The [sampler type](#sampler-type).
  <tr><td>`coords`<td>
  The texture coordinates used for sampling.
  <tr><td>`array_index`<td>
  The 0-based texture array index to sample.
  <tr><td>`bias`<td>
  The bias to apply to the mip level before sampling.
  `bias` must be between `-16.0` and `15.99`.
  <tr><td>`offset`<td>
  The optional texel offset applied to the unnormalized texture coordinate
  before sampling the texture. This offset is applied before applying any
  texture wrapping modes.<br>
  `offset` must be compile time constant, and may only be provided as a
  [literal](#literals) or `const_expr` expression (e.g. `vec2<i32>(1, 2)`).<br>
  Each `offset` component must be at least `-8` and at most `7`. Values outside
  of this range will be treated as a compile time error.
</table>

**Returns:**

The sampled value.


### `textureSampleCompare` ### {#texturesamplecompare}

Samples a depth texture and compares the sampled depth values against a reference value.

```rust
textureSampleCompare(t : texture_depth_2d, s : sampler_comparison, coords : vec2<f32>, depth_ref : f32) -> f32
textureSampleCompare(t : texture_depth_2d, s : sampler_comparison, coords : vec2<f32>, depth_ref : f32, offset : vec2<i32>) -> f32
textureSampleCompare(t : texture_depth_2d_array, s : sampler_comparison, coords : vec2<f32>, array_index : i32, depth_ref : f32) -> f32
textureSampleCompare(t : texture_depth_2d_array, s : sampler_comparison, coords : vec2<f32>, array_index : i32, depth_ref : f32, offset : vec2<i32>) -> f32
textureSampleCompare(t : texture_depth_cube, s : sampler_comparison, coords : vec3<f32>, depth_ref : f32) -> f32
textureSampleCompare(t : texture_depth_cube_array, s : sampler_comparison, coords : vec3<f32>, array_index : i32, depth_ref : f32) -> f32
```

**Parameters:**

<table class='data'>
  <tr><td>`t`<td>
  The [depth](#texture-depth) texture to sample.
  <tr><td>`s`<td>
  The [sampler comparision](#sampler-type) type.
  <tr><td>`coords`<td>
  The texture coordinates used for sampling.
  <tr><td>`array_index`<td>
  The 0-based texture array index to sample.
  <tr><td>`depth_ref`<td>
  The reference value to compare the sampled depth value against.
  <tr><td>`offset`<td>
  The optional texel offset applied to the unnormalized texture coordinate
  before sampling the texture. This offset is applied before applying any
  texture wrapping modes.<br>
  `offset` must be compile time constant, and may only be provided as a
  [literal](#literals) or `const_expr` expression (e.g. `vec2<i32>(1, 2)`).<br>
  Each `offset` component must be at least `-8` and at most `7`. Values outside
  of this range will be treated as a compile time error.
</table>

**Returns:**

A value in the range `[0.0..1.0]`.

Each sampled texel is compared against the reference value using the comparision
operator defined by the `sampler_comparison`, resulting in either a `0` or `1`
value for each texel.

If the `sampler_comparison` uses bilinear filtering then the returned value is
the filtered average of these values, otherwise the comparision result of a
single texel is returned.


### `textureSampleGrad` ### {#texturesamplegrad}

Samples a texture using explicit gradients.

```rust
textureSampleGrad(t : texture_2d<f32>, s : sampler, coords : vec2<f32>, ddx : vec2<f32>, ddy : vec2<f32>) -> vec4<f32>
textureSampleGrad(t : texture_2d<f32>, s : sampler, coords : vec2<f32>, ddx : vec2<f32>, ddy : vec2<f32>, offset : vec2<i32>) -> vec4<f32>
textureSampleGrad(t : texture_2d_array<f32>, s : sampler, coords : vec2<f32>, array_index : i32, ddx : vec2<f32>, ddy : vec2<f32>) -> vec4<f32>
textureSampleGrad(t : texture_2d_array<f32>, s : sampler, coords : vec2<f32>, array_index : i32, ddx : vec2<f32>, ddy : vec2<f32>, offset : vec2<i32>) -> vec4<f32>
textureSampleGrad(t : texture_3d<f32>, s : sampler, coords : vec3<f32>, ddx : vec3<f32>, ddy : vec3<f32>) -> vec4<f32>
textureSampleGrad(t : texture_3d<f32>, s : sampler, coords : vec3<f32>, ddx : vec3<f32>, ddy : vec3<f32>, offset : vec3<i32>) -> vec4<f32>
textureSampleGrad(t : texture_cube<f32>, s : sampler, coords : vec3<f32>, ddx : vec3<f32>, ddy : vec3<f32>) -> vec4<f32>
textureSampleGrad(t : texture_cube_array<f32>, s : sampler, coords : vec3<f32>, array_index : i32, ddx : vec3<f32>, ddy : vec3<f32>) -> vec4<f32>
```

**Parameters:**

<table class='data'>
  <tr><td>`t`<td>
  The [texture](#sampled-texture-type) to sample.
  <tr><td>`s`<td>
  The [sampler type](#sampler-type).
  <tr><td>`coords`<td>
  The texture coordinates used for sampling.
  <tr><td>`array_index`<td>
  The 0-based texture array index to sample.
  <tr><td>`ddx`<td>
  The x direction derivative vector used to compute the sampling locations.
  <tr><td>`ddy`<td>
  The y direction derivative vector used to compute the sampling locations.
  <tr><td>`offset`<td>
  The optional texel offset applied to the unnormalized texture coordinate
  before sampling the texture. This offset is applied before applying any
  texture wrapping modes.<br>
  `offset` must be compile time constant, and may only be provided as a
  [literal](#literals) or `const_expr` expression (e.g. `vec2<i32>(1, 2)`).<br>
  Each `offset` component must be at least `-8` and at most `7`. Values outside
  of this range will be treated as a compile time error.
</table>

**Returns:**

The sampled value.


### `textureSampleLevel` ### {#texturesamplelevel}

Samples a texture using an explicit mip level.

```rust
textureSampleLevel(t : texture_2d<f32>, s : sampler, coords : vec2<f32>, level : f32) -> vec4<f32>
textureSampleLevel(t : texture_2d<f32>, s : sampler, coords : vec2<f32>, level : f32, offset : vec2<i32>) -> vec4<f32>
textureSampleLevel(t : texture_2d_array<f32>, s : sampler, coords : vec2<f32>, array_index : i32, level : f32) -> vec4<f32>
textureSampleLevel(t : texture_2d_array<f32>, s : sampler, coords : vec2<f32>, array_index : i32, level : f32, offset : vec2<i32>) -> vec4<f32>
textureSampleLevel(t : texture_3d<f32>, s : sampler, coords : vec3<f32>, level : f32) -> vec4<f32>
textureSampleLevel(t : texture_3d<f32>, s : sampler, coords : vec3<f32>, level : f32, offset : vec3<i32>) -> vec4<f32>
textureSampleLevel(t : texture_cube<f32>, s : sampler, coords : vec3<f32>, level : f32) -> vec4<f32>
textureSampleLevel(t : texture_cube_array<f32>, s : sampler, coords : vec3<f32>, array_index : i32, level : f32) -> vec4<f32>
textureSampleLevel(t : texture_depth_2d, s : sampler, coords : vec2<f32>, level : i32) -> f32
textureSampleLevel(t : texture_depth_2d, s : sampler, coords : vec2<f32>, level : i32, offset : vec2<i32>) -> f32
textureSampleLevel(t : texture_depth_2d_array, s : sampler, coords : vec2<f32>, array_index : i32, level : i32) -> f32
textureSampleLevel(t : texture_depth_2d_array, s : sampler, coords : vec2<f32>, array_index : i32, level : i32, offset : vec2<i32>) -> f32
textureSampleLevel(t : texture_depth_cube, s : sampler, coords : vec3<f32>, level : i32) -> f32
textureSampleLevel(t : texture_depth_cube_array, s : sampler, coords : vec3<f32>, array_index : i32, level : i32) -> f32
```

**Parameters:**

<table class='data'>
  <tr><td>`t`<td>
  The [sampled](#sampled-texture-type) or [depth](#texture-depth) texture to
  sample.
  <tr><td>`s`<td>
  The [sampler type](#sampler-type).
  <tr><td>`coords`<td>
  The texture coordinates used for sampling.
  <tr><td>`array_index`<td>
  The 0-based texture array index to sample.
  <tr><td>`level`<td>
  The mip level, with level 0 containing a full size version of the texture.
  For the functions where `level` is a `f32`, fractional values may interpolate
  between two levels if the format is filterable according to the
  [Texture Format Capabilities](https://gpuweb.github.io/gpuweb/#texture-format-caps).
  <tr><td>`offset`<td>
  The optional texel offset applied to the unnormalized texture coordinate
  before sampling the texture. This offset is applied before applying any
  texture wrapping modes.<br>
  `offset` must be compile time constant, and may only be provided as a
  [literal](#literals) or `const_expr` expression (e.g. `vec2<i32>(1, 2)`).<br>
  Each `offset` component must be at least `-8` and at most `7`. Values outside
  of this range will be treated as a compile time error.
</table>

**Returns:**

The sampled value.


### `textureStore` ### {#texturestore}

Writes a single texel to a texture.

```rust
textureStore(t : [[access(write)]] texture_storage_1d<F>, coords : i32, value : vec4<T>)
textureStore(t : [[access(write)]] texture_storage_2d<F>, coords : vec2<i32>, value : vec4<T>)
textureStore(t : [[access(write)]] texture_storage_2d_array<F>, coords : vec2<i32>, array_index : i32, value : vec4<T>)
textureStore(t : [[access(write)]] texture_storage_3d<F>, coords : vec3<i32>, value : vec4<T>)
```

The channel format `T` depends on the storage texel format `F`.
[See the texel format table](#storage-texel-formats) for the mapping of texel
format to channel format.

**Parameters:**

<table class='data'>
  <tr><td>`t`<td>
  The [write-only storage texture](#texture-storage).
  <tr><td>`coords`<td>
  The 0-based texel coordinate.<br>
  <tr><td>`array_index`<td>
  The 0-based texture array index.
  <tr><td>`value`<td>
  The new texel value.<br>
</table>

**Note:**

If any of the parameters are out of bounds, then the call to `textureStore()`
does nothing.


**TODO:**

<pre class='def'>
TODO(dsinclair): Need gather operations
</pre>

## Atomic built-in functions ## {#atomic-builtin-functions}

Atomic built-in functions can be used to read/write/read-modify-write atomic
objects. They are the only operations allowed on [[#atomic-types]].

All atomic built-in functions use a `relaxed` memory ordering (**0**-value
integral constant in SPIR-V for all `Memory Semantics` operands).
This means synchronization and ordering guarantees only apply among atomic
operations acting on the same [=memory locations=].
No synchronization or ordering guarantees apply between atomic and
non-atomic memory accesses, or between atomic accesses acting on different
memory locations.

Atomic built-in functions `must` not be used in a [=vertex=] shader stage.

The storage class `SC` of the `atomic_ptr` parameter in all atomic built-in
functions `must` be either [=storage classes/storage=] or [=storage
classes/workgroup=]. [=storage classes/workgroup=] atomics have a **Workgroup**
memory scope in SPIR-V, while [=storage classes/storage=] atomics have a
**Device** memory scope in SPIR-V.

TODO: Add links to the eventual memory model descriptions.

### Atomic Load ### {#atomic-load}

```rust
atomicLoad(atomic_ptr : ptr<SC, atomic<T>>) -> T

// Maps to the SPIR-V instruction OpAtomicLoad.
```

Returns the atomically loaded the value pointed to by `atomic_ptr`.
It does not [=atomic modification|modify=] the object.

### Atomic Store ### {#atomic-store}

```rust
atomicStore(atomic_ptr : ptr<SC, atomic<T>>, v : T)

// Maps to the SPIR-V instruction OpAtomicStore.
```

Atomically stores the value `v` in the atomic object pointed to by `atomic_ptr`.

### Atomic Read-Modify-Write ### {#atomic-rmw}

```rust
atomicAdd(atomic_ptr : ptr<SC, atomic<T>>, v : T) -> T
atomicMax(atomic_ptr : ptr<SC, atomic<T>>, v : T) -> T
atomicMin(atomic_ptr : ptr<SC, atomic<T>>, v : T) -> T
atomicAnd(atomic_ptr : ptr<SC, atomic<T>>, v : T) -> T
atomicOr(atomic_ptr : ptr<SC, atomic<T>>, v : T) -> T
atomicXor(atomic_ptr : ptr<SC, atomic<T>>, v : T) -> T

// Mappings to SPIR-V instructions:
// atomicAdd -> OpAtomicIAdd
// atomicMax -> OpAtomicSMax or OpAtomicUMax (depending on the signedness of T)
// atomicMin -> OpAtomicSMin or OpAtomicUMin (depending on the signedness of T)
// atomicAnd -> OpAtomicAnd
// atomicOr  -> OpAtomicOr
// atomicXor -> OpAtomicXor
```
Each function performs the following steps atomically:

1. Load the original value pointed to by `atomic_ptr`.
2. Obtains a new value by performing the operation (e.g. max) from the function
    name with the value |v|.
3. Store the new value using `atomic_ptr`.

Each function returns the original value stored in the atomic object.

```rust
atomicExchange(atomic_ptr : ptr<SC, atomic<T>>, v : T) -> T

// Maps to the SPIR-V instruction OpAtomicExchange.
```

Atomically stores the value `v` in the atomic object pointed to
`atomic_ptr` and returns the original value stored in the atomic object.

```rust
atomicCompareExchangeWeak(atomic_ptr : ptr<SC, atomic<T>>, cmp : T, v : T) -> vec2<T>

// Maps to the SPIR-V instruction OpAtomicCompareExchange.
```

Performs the following steps atomically:

1. Load the original value pointed to by `atomic_ptr`.
2. Compare the original value to the value `v` using an equality operation.
3. Store the value `v` `only if` the result of the equality comparison was **true**.

Returns a two-element vector, where the first element is the original value of
the atomic object and the second element is whether or not the comparison
succeeded (**1** if successful, **0** otherwise).

Note: the equality comparison may spuriously fail on some implementations. That
is, the second element of the result vector may be **0** even if the first
element of the result vector equals `cmp`.

## Data packing built-in functions ## {#pack-builtin-functions}

Data packing builtin functions can be used to encode values using data formats that
do not correspond directly to types in [SHORTNAME].
This enables a program to write many densely packed values to memory, which can
reduce a shader's memory bandwidth demand.

<table class='data'>
  <thead>
    <tr><td>Conclusion<td>Notes
  </thead>
  <tr algorithm="packing 4x8snorm">
    <td class="nowrap">`pack4x8snorm`(|e|: vec4&lt;f32&gt;) -> u32
    <td>Converts four normalized floating point values to 8-bit signed integers, and then combines them
        into one `u32` value.<br>
        Component |e|[|i|] of the input is converted to an 8-bit twos complement integer value
        &lfloor; 0.5 + 127 &times; min(1, max(-1, |e|[|i|])) &rfloor; which is then placed in bits
        8 &times; |i| through
        8 &times; |i| + 7 of the result.

  <tr algorithm="packing 4x8unorm">
    <td class="nowrap">`pack4x8unorm`(|e|: vec4&lt;f32&gt;) -> u32
    <td>Converts four normalized floating point values to 8-bit unsigned integers, and then combines them
        into one `u32` value.<br>
        Component |e|[|i|] of the input is converted to an 8-bit unsigned integer value
        &lfloor; 0.5 + 255 &times; min(1, max(0, |e|[|i|])) &rfloor; which is then placed in bits
        8 &times; |i| through
        8 &times; |i| + 7 of the result.

  <tr algorithm="packing 2x16snorm">
    <td class="nowrap">`pack2x16snorm`(|e|: vec2&lt;f32&gt;) -> u32
    <td>Converts two normalized floating point values to 16-bit signed integers, and then combines them
        into one `u32` value.<br>
        Component |e|[|i|] of the input is converted to a 16-bit twos complement integer value
        &lfloor; 0.5 + 32767 &times; min(1, max(-1, |e|[|i|])) &rfloor; which is then placed in bits
        16 &times; |i| through
        16 &times; |i| + 15 of the result.

  <tr algorithm="packing 2x16unorm">
    <td class="nowrap">`pack2x16unorm`(|e|: vec2&lt;f32&gt;) -> u32
    <td>Converts two normalized floating point values to 16-bit unsigned integers, and then combines them
        into one `u32` value.<br>
        Component |e|[|i|] of the input is converted to a 16-bit unsigned integer value
        &lfloor; 0.5 + 65535 &times; min(1, max(0, |e|[|i|])) &rfloor; which is then placed in bits
        16 &times; |i| through
        16 &times; |i| + 15 of the result.

  <tr algorithm="packing 2x16float">
    <td class="nowrap">`pack2x16float`(|e|: vec2&lt;f32&gt;) -> u32
    <td>Converts two floating point values to half-precision floating point numbers, and then combines
        them into one one `u32` value.<br>
        Component |e|[|i|] of the input is converted to a IEEE 754 binary16 value, which is then
        placed in bits
        16 &times; |i| through
        16 &times; |i| + 15 of the result.
        See [[#floating-point-conversion]] for edge case behaviour.
</table>

## Data unpacking built-in functions ## {#unpack-builtin-functions}

Data unpacking builtin functions can be used to decode values in
data formats that do not correspond directly to types in [SHORTNAME].
This enables a program to read many densely packed values from memory, which can
reduce a shader's memory bandwidth demand.

<table class='data'>
  <thead>
    <tr><td>Conclusion<td>Notes
  </thead>
  <tr algorithm="unpacking 4x8snorm">
    <td class="nowrap">`unpack4x8snorm`(|e|: u32) -> vec4&lt;f32&gt;
    <td>Decomposes a 32-bit value into four 8-bit chunks, then reinterprets
        each chunk as a signed normalized floating point value.<br>
        Component |i| of the result is max(|v| &div; 127, -1), where |v| is the interpretation of
        bits 8&times;|i| through 8&times;|i|+7 of |e| as a twos-complement signed integer.

  <tr algorithm="unpacking 4x8unorm">
    <td class="nowrap">`unpack4x8unorm`(|e|: u32) -> vec4&lt;f32&gt;
    <td>Decomposes a 32-bit value into four 8-bit chunks, then reinterprets
        each chunk as an unsigned normalized floating point value.<br>
        Component |i| of the result is |v| &div; 255, where |v| is the interpretation of
        bits 8&times;|i| through 8&times;|i|+7 of |e| as an unsigned integer.

  <tr algorithm="unpacking 2x16snorm">
    <td class="nowrap">`unpack2x16snorm`(|e|: u32) -> vec2&lt;f32&gt;
    <td>Decomposes a 32-bit value into two 16-bit chunks, then reinterprets
        each chunk as a signed normalized floating point value.<br>
        Component |i| of the result is max(|v| &div; 32767, -1), where |v| is the interpretation of
        bits 16&times;|i| through 16&times;|i|+15 of |e| as a twos-complement signed integer.

  <tr algorithm="unpacking 2x16unorm">
    <td class="nowrap">`unpack2x16unorm`(|e|: u32) -> vec2&lt;f32&gt;
    <td>Decomposes a 32-bit value into two 16-bit chunks, then reinterprets
        each chunk as an unsigned normalized floating point value.<br>
        Component |i| of the result is |v| &div; 65535, where |v| is the interpretation of
        bits 16&times;|i| through 16&times;|i|+15 of |e| as an unsigned integer.

  <tr algorithm="unpacking 2x16float">
    <td class="nowrap">`unpack2x16float`(|e|: u32) -> vec2&lt;f32&gt;
    <td>Decomposes a 32-bit value into two 16-bit chunks, and reinterpets each chunk
        as a floating point value.<br>
        Component |i| of the result is the f32 representation of |v|,
        where |v| is the interpretation of bits 16&times;|i| through 16&times;|i|+15 of |e|
        as an IEEE 754 binary16 value.
        See [[#floating-point-conversion]] for edge case behaviour.
</table>

## Synchronization built-in functions ## {#sync-builtin-functions}

[SHORTNAME] provides the following synchronization functions:

```rust
fn storageBarrier()
fn workgroupBarrier()
```

All synchronization functions execute a control barrier with Acquire/Release
memory ordering. That is, all synchronization functions, and affected memory
and atomic operations are ordered in [[#program-order]] relative to the
synchronization function.  Additionally, the affected memory and atomic
operations program-ordered before the synchronization function must be visible
to all other threads in the workgroup before any affected memory or atomic
operation program-ordered after the synchronization function is executed by a
member of the workgroup.

storageBarrier affects memory and atomic operations in the [=storage
classes/storage=] storage class.

workgroupBarrier affects memory and atomic operations in the [=storage
classes/workgroup=] storage class.

TODO: Add links to the eventual memory model.

<div class='example spirv barrier mapping' heading="Mapping workgroupBarrier to SPIR-V">
  <xmp>
    storageBarrier();
    // Maps to:
    // Execution Scope is Workgroup = %uint_2
    // Memory Scope is Device = %uint_1
    // Memory Semantics are AcquireRelease | UniformMemory (0x8 | 0x40) = %uint_72
    // OpControlBarrier %uint_2 %uint_1 %uint_72

    workgroupBarrier();
    // Maps to:
    // Execution and Memory Scope are Workgroup = %uint_2
    // Memory semantics are AcquireRelease | WorkgroupMemory (0x8 | 0x100) = %uint_264
    // OpControlBarrier %uint_2 %uint_2 %uint_264

    workgroupBarrier();
    storageBarrier();
    // Or, equivalently:
    storageBarrier();
    workgroupBarrier();
    // Could be mapped to a single OpControlBarrier:
    // Execution scope is Workgroup = %uint_2
    // Memory Scope is Device = %uint_1
    // Memory semantics are AcquireRelease | UniformMemory | WorkgroupMemory
    //   (0x8 | 0x40 | 0x100) = %uint_328
    // OpControlBarrier %uint_2 %uint_1 %uint_328
  </xmp>
</div>

## Value-steering functions ## {#value-steering-functions}

<table class='data'>
  <thead>
    <tr><th>Conclusion<td>Notes
  </thead>
  <tr algorithm="compute a value then ignore it">
    <td class="nowrap">
        `ignore`(|e|: |T|)
    <td>Evaluates |e|, and then ignores the result.<br>
        Type |T| is any type that can be returned from a function.<br>
</table>

# Glossary # {#glossary}

TODO: Remove terms unused in the rest of the specification.

<table class='data'>
  <thead>
    <tr><th>Term<th>Definition
  </thead>
  <tr><td>Dominates
      <td>Basic block `A` *dominates* basic block `B` if:
          * `A` and `B` are both in the same function `F`
          * Every control flow path in `F` that goes to `B` must also to through `A`
  <tr><td>Strictly dominates
      <td>`A` *strictly dominates* `B` if `A` dominates `B` and `A != B`
  <tr><td>DomBy(A)
      <td>The basic blocks dominated by `A`
</table>

# MATERIAL TO BE MOVED TO A NEW HOME OR DELETED # {#junkyard}


[SHORTNAME] has operations for:

* extracting one of the components of a composite value
* creating a new composite value from an old one by replacing one of its components
* creating a new composite value from components

## Type Promotions ## {#type-promotions}
There are no implicit type promotions in [SHORTNAME]. If you want to convert between
types you must use the cast syntax to do it.

<div class='example wgsl function-scope'>
  <xmp highlight='rust'>
    var e : f32 = 3;    // error: literal is the wrong type

    var f : f32 = 1.0;

    var t : i32 = i32(f);
  </xmp>
</div>

The non-promotion extends to vector classes as well. There are no overrides to
shorten vector declarations based on the type or number of elements provided.
If you want `vec4<f32>` you must provide 4 float values in the constructor.

## Precedence ## {#precedence}

Issue: (dsinclair) Write out precedence rules. Matches c and glsl rules ....

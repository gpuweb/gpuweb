<pre class='metadata'>
Title: WebGPU Shading Language
Shortname: WGSL
Level: None
Status: w3c/ED
Group: webgpu
ED: https://gpuweb.github.io/gpuweb/wgsl/
TR: https://www.w3.org/TR/WGSL/
Repository: gpuweb/gpuweb
Text Macro: INT i32 or u32
Text Macro: UNSIGNEDINTEGRAL u32 or vec|N|&lt;u32&gt;
Text Macro: SIGNEDINTEGRAL i32 or vec|N|&lt;i32&gt;
Text Macro: INTEGRAL i32, u32, vec|N|&lt;i32&gt;, or vec|N|&lt;u32&gt;
Text Macro: FLOATING f32 or vec|N|&lt;f32&gt;
Ignored Vars: i, c0, e, e1, e2, e3, eN, p, s1, s2, sn, N, M, v, Stride, Offset, Align, Extent, S, T, T1

!Participate: <a href="https://github.com/gpuweb/gpuweb/issues/new?labels=wgsl">File an issue</a> (<a href="https://github.com/gpuweb/gpuweb/issues?q=is%3Aissue+is%3Aopen+label%3Awgsl">open issues</a>)

Editor: David Neto, Google https://www.google.com, dneto@google.com, w3cid 99785
Editor: Myles C. Maxfield, Apple Inc., mmaxfield@apple.com, w3cid 77180
Former Editor: dan sinclair, Google https://www.google.com, dsinclair@google.com
Abstract: Shading language for WebGPU.
Markup Shorthands: markdown yes
Markup Shorthands: biblio yes
Markup Shorthands: idl no
Assume Explicit For: yes
</pre>

<style>
tr:nth-child(2n) {
  background-color: #b0b0b050;
}
thead {
  background-color: #b0b0b050;
  font-weight: bold;
}
.nowrap {
  white-space:nowrap;
}
.small {
  font-size: smaller;
}
div.syntax {
  display: block;
  page-break-before: avoid;
  padding: .5em 1em;
  background: var(--def-bg);
  border-left: 0.5em solid var(--def-border);
  color: black;
  color: var(--def-text);
  margin-block-start: 1em;
  margin-block-end: 1em;
}
div.syntax > p {
  margin-block-start: 0em;
  margin-block-end: 0em;
  margin-inline-start: 1em;
  margin-inline-end: 0em;
}
div.syntax > p::first-letter {
  letter-spacing: 0.5em;
}
div.syntax > p > a {
  margin-inline-start: 0.1em;
  margin-inline-end: 0.1em;
}
div.syntax > p > code {
  margin-inline-start: 0.1em;
  margin-inline-end: 0.1em;
}
</style>

<pre class=biblio>
{
  "WebGPU": {
    "authors": [
      "Dzmitry Malyshau",
      "Justin Fan",
      "Kai Ninomiya"
    ],
    "href": "https://gpuweb.github.io/gpuweb/",
    "title": "WebGPU",
    "status": "Editor's Draft",
    "publisher": "W3C",
    "deliveredBy": [
      "https://github.com/gpuweb/gpuweb"
    ]
  },
  "IEEE-754":{
    "href":"http://ieeexplore.ieee.org/servlet/opac?punumber=4610933",
    "title":"IEEE Standard for Floating-Point Arithmetic",
    "publisher":"Institute of Electrical and Electronics Engineers",
    "isbn":"978-0-7381-5752-8",
    "versions":["IEEE-754-2008","IEEE-754-1985"],
    "id":"IEEE-754",
    "date":"29 August 2008"
  },
  "VulkanMemoryModel": {
    "authors": [
      "Jeff Bolz",
      "Alan Baker",
      "Tobias Hector",
      "David Neto",
      "Robert Simpson",
      "Brian Sumner"
    ],
    "href": "https://www.khronos.org/registry/vulkan/specs/1.2-extensions/html/vkspec.html#memory-model",
    "title": "Vulkan Memory Model",
    "publisher": "Khronos Group"
  }
}
</pre>

<pre class='anchors'>
spec: Vulkan ; urlPrefix: https://www.khronos.org/registry/vulkan/specs/1.2-extensions/html/vkspec.html#
    type: dfn
        text: memory model memory operation; url: memory-model-memory-operation
        text: memory model reference; url: memory-model-references
        text: memory model atomic operation; url: memory-model-atomic-operation
        text: memory model scope; url:memory-model-scope
        text: memory model memory semantics; url:memory-model-memory-semantics
        text: memory model non-private; url: memory-model-non-private
</pre>

# Introduction # {#intro}

WebGPU Shading Language (WGSL) is the shader language for [[!WebGPU]].
That is, an application using the WebGPU API uses WGSL to express the programs, known as shaders,
that run on the GPU.

<div class='example wgsl global-scope'>
  <xmp highlight='rust'>
    @stage(fragment)
    fn main() -> @location(0) vec4<f32> {
        return vec4<f32>(0.4, 0.4, 0.8, 1.0);
    }
  </xmp>
</div>

## Technical Overview ## {#technical-overview}

WebGPU issues a unit of work to the GPU in the form of a [[WebGPU#gpu-command|GPU command]].
WGSL is concerned with two kinds of GPU commands:
* a <dfn noexport>draw command</dfn> executes a [=GPURenderPipeline|render pipeline=]
    in the context of [=pipeline input|inputs=], [=pipeline output|outputs=], and attached [=resources=].
* a <dfn noexport>dispatch command</dfn> executes a [=GPUComputePipeline|compute pipeline=]
    in the context of [=pipeline input|inputs=] and attached [=resources=].

Both kinds of pipelines use shaders written in WGSL.

A <dfn noexport>shader</dfn> is the portion of a WGSL program that executes a [=shader stage=] in a pipeline.
A shader comprises:
* An [=entry point=] [=function/function=].
* The transitive closure of all called functions, starting with the entry point.
    This set includes both [=user-defined function|user-defined=] and [=built-in function|built-in=] functions.
    (For a more rigorous definition, see "[=functions in a shader stage=]".)
* The set of variables and constants [=statically accessed=] by all those functions.
* The set of types used to define or analyze all those functions, variables, and constants.

When executing a shader stage, the implementation:
* Computes the values of constants declared at [=module scope|module-scope=].
* Binds [=resources=] to variables in the shader's [=resource interface of a shader|resource interface=],
    making the contents of those resources available to the shader during execution.
* Allocates memory for other [=module scope|module-scope=] variables,
    and populates that memory with the specified initial values.
* Populates the formal parameters of the entry point, if they exist, with the stage's pipeline inputs.
* Connects the entry point [=return value=], if one exists, to the stage's pipeline outputs.
* Then it invokes the entry point.

A WGSL program is organized into:
* Functions, which specify execution behaviour.
* Statements, which are declarations or units of executable behaviour.
* Literals, which are text representations for pure mathematical values.
* Constants, each providing a name for a value computed at a specific time.
* Variables, each providing a name for memory holding a value.
* Expressions, each of which combines a set of values to produce a result value.
* Types, each of which describes:
    * A set of values.
    * Constraints on supported expressions.
    * The semantics of those expressions.

WGSL is an imperative language: behaviour is specified as a sequence of statements to execute.
Statements:
* Declare constants or variables
* Modify the contents of variables
* Modify execution order using structured programming constructs:
    * Selective execution: if/else/else if, switch
    * Repetition: loop, for
    * Escaping a nested execution construct: break, continue
    * Refactoring: function call and return
    * Discard (fragment shaders only): terminating the invocation and throwing away the output
* Evaluate expressions to compute values as part of the above behaviours.

WGSL is statically typed: each value computed by a particular expression is in a specific type,
determined only by examining the program source.

WGSL has types to describe booleans, numbers, vectors, matrices, and aggregations
of these in the form of arrays and structures.
Additional types describe memory.

WGSL does not have implicit conversions or promotions between numeric or boolean types.
Converting a value from one numeric or boolean type to another requires
an explicit [[#conversion-expr|conversion]],
[[#type-constructor-expr|construction]], or [[#bitcast-expr|reinterpretation of bits]].
This also applies to vector types.

WGSL has texture and sampler types.
Together with their associated built-in functions, these support functionality
commonly used for graphics rendering, and commonly provided by GPUs.

The work of a shader stage is partitioned into one or more <dfn noexport>invocations</dfn>,
each of which executes the entry point, but under slightly different conditions.
Invocations in a shader stage share access to certain variables:
* All invocations in the stage share the resources in the shader interface.
* In a [=compute shader stage|compute shader=], invocations in the same
     [=compute shader stage/workgroup=] share
     variables in the [=address spaces/workgroup=] [=address space=].
     Invocations in different workgroups do not share those variables.

However, the invocations act on different sets of pipeline inputs, including built-in inputs
that provide an identifying value to distinguish an invocation from its peers.
Also, each invocation has its own independent memory space in the form
of variables in the [=address spaces/private=] and [=address spaces/function=] address spaces.

Invocations within a shader stage execute concurrently, and may often execute in parallel.
The shader author is responsible for ensuring the dynamic behaviour of the invocations
in a shader stage:
* Meet the uniformity requirements of certain primitive operations, including texture sampling and control barriers.
* Coordinate potentially conflicting accesses to shared variables, to avoid race conditions.

WGSL sometimes permits several possible behaviours for a given feature.
This is a portability hazard, as different implementations may exhibit the different behaviours.
The design of WGSL aims to minimize such cases, but is constrained by feasibility,
and goals for achieving high performance across a broad range of devices.

## Notation ## {#notation}

The <dfn noexport>floor expression</dfn> is defined over real numbers |x|:

* &lfloor;|x|&rfloor; = |k|, where |k| is the unique integer such that |k| &le; |x| &lt; |k|+1

The <dfn noexport>ceiling expression</dfn> is defined over real numbers |x|:

* &lceil;|x|&rceil; = |k|, where |k| is the unique integer such that |k|-1 &lt; |x| &le; |k|

The <dfn noexport>truncate</dfn> function is defined over real numbers |x|:

* truncate(|x|) = &lfloor;|x|&rfloor; if |x| &ge; 0, and &lceil;|x|&rceil; if |x| &lt; 0.

The <dfn noexport>roundUp</dfn> function is defined for positive integers |k| and |n| as:

* roundUp(|k|, |n|) = &lceil;|n| &div; |k|&rceil; &times; |k|

The <dfn noexport>transpose</dfn> of an |n|-column |m|-row matrix |A| is the |m|-column |n|-row matrix
|A|<sup>T</sup> formed by copying the rows of |A| as the columns of |A|<sup>T</sup>:

* transpose(|A|) = |A|<sup>T</sup>
* transpose(|A|)<sub>|i|,|j|</sub> = |A|<sub>|j|,|i|</sub>

The transpose of a column vector is defined by interpreting the column vector as a 1-row matrix.
Similarly, the transpose of a row vector is defined by interpreting the row vector as a 1-column matrix.

# Shader Lifecycle # {#shader-lifecycle}

There are four key events in the lifecycle of a WGSL program and the shaders it may contain.
The first two correspond to the WebGPU API methods used to prepare a WGSL program
for execution.
The last two are the start and end of execution of a shader.

The events are:

1. <dfn noexport>Shader module creation</dfn>
    * This occurs when the
        [[WebGPU#dom-gpudevice-createshadermodule|WebGPU createShaderModule]] method
        is called.
        The source text for a WGSL program is provided at this time.
2. <dfn noexport>Pipeline creation</dfn>
    * This occurs when the
        [[WebGPU#dom-gpudevice-createcomputepipeline|WebGPU createComputePipeline]] method
        or the
        [[WebGPU#dom-gpudevice-createrenderpipeline|WebGPU createRenderPipeline]] method
        is invoked.
        These methods use one or more previously created shader modules, together with other
        configuration information.
3. <dfn noexport>Shader execution start</dfn>
    * This occurs when a [=draw command|draw=] or [=dispatch command=] is issued to the GPU,
        begins executing the pipeline,
        and invokes the [=shader stage=] [=entry point=] function.
4. <dfn noexport>Shader execution end</dfn>
    * This occurs when all work in the shader completes:
        * all its [=invocations=] terminate
        * and all accesses to [=resources=] complete
        * outputs, if any, are passed to downstream pipeline stages.

The events are ordered due to:
*  data dependencies: shader execution requires a pipeline, and a pipeline requires a shader module.
*  causality: the shader must start executing before it can finish executing.

## Processing Errors ## {#processing-errors}

A WebGPU implementation may fail to process a shader for two reasons:

* A <dfn export>program error</dfn> occurs if the shader does not satisfy the requirements of the WGSL or WebGPU specifications.
* An <dfn noexport>uncategorized error</dfn> may occur
    even when all WGSL and WebGPU requirements have been satisfied.
    Possible causes include:
    * The shaders are too complex, exceeding the capabilities of the implementation,
        but in a way not easily captured by prescribed [[#limits|limits]].
        Simplifying the shaders may work around the issue.
    * A defect in the WebGPU implementation.


A processing error may occur during three phases in the shader lifecycle:

* A <dfn export>shader-creation error</dfn>
    is an error feasibly detectable at [=shader module creation=] time.
    Detection must rely only on the WGSL program source text
    and other information available to the `createShaderModule` API method.

* A <dfn export>pipeline-creation error</dfn>
    is an error detectable at [=pipeline creation=] time.
    Detection must rely only on the WGSL program source text
    and other information available to the particular pipeline creation API method.

* A <dfn export>dynamic error</dfn> is an error occurring during shader execution.
    These errors may or may not be detectable.

Note: For example, a race condition may not be detectable.

Each requirement will be checked at the earliest opportunity.
That is:
* A shader-creation error results when failing to meet a requirement detectable at shader-creation time.
* A pipeline-creation error results when failing to meet a requirement detectable at pipeline-creation time,
    but not detectable earlier.

When unclear from context, this specification indicates
whether failure to meet a particular requirement
results in a shader-creation, pipeline-creation, or dynamic error.

The WebGPU specification describes the consequences of each kind of error.

# Textual Structure # {#textual-structure}

A WGSL program is text.
This specification does not prescribe a particular encoding for that text.
However, UTF-8 is always a valid encoding for a WGSL program.

Note: The intent of promoting UTF-8 like this is to simplify interchange of WGSL programs
and to encourage interoperability among tools.

WGSL program text consists of a sequence of characters, grouped into contiguous non-empty sets forming:
* [=comments=]
* [=tokens=]
* [=blankspace=]

The program text must not include a null character.

<dfn>Blankspace</dfn> is any combination of one or more of the following characters:
* space
* horizontal tab
* linefeed
* vertical tab
* formfeed
* carriage return

<div class='syntax' noexport='true'>
  <dfn for=syntax>_space</dfn> :

    | `/\s/`
</div>

To parse a WGSL program:
1. Remove comments:
    * Replace the first comment with a space character.
    * Repeat until no comments remain.
2. Scanning from beginning to end, group the remaining characters into tokens and blankspace
    in greedy fashion:
    * The next group is formed from the longest
        non-empty prefix of the remaining ungrouped characters, that is either:
        * a valid token, or
        * blankspace
    * Repeat until no ungrouped characters remain.
3. Discard the blankspace, leaving only tokens.
3. Parse the token sequence, attempting to match the [=syntax/translation_unit=] grammar rule.

A [=shader-creation error=] results if:
* the entire source text cannot be converted into a finite sequence of valid tokens, or
* the [=syntax/translation_unit=] grammar rule does not match the entire token sequence.

## Comments ## {#comments}

A <dfn>comment</dfn> is a span of text that does not influence the validity or meaning of a WGSL
program, except that a comment can separate [=tokens=].
Shader authors can use comments to document their programs.

A <dfn noexport>line-ending comment</dfn> is a kind of [=comment=] consisting
of the two characters `//` and the characters that follow,
up until but not including:
* the next [=blankspace=] character other than a space or a horizontal tab, or
* the end of the program.

A <dfn noexport>block comment</dfn> is a kind of [=comment=] consisting of:
* The two characters `/*`
* Then any sequence of:
    * A [=block comment=], or
    * Text that does not contain either `*/` or `/*`
* Then the two characters `*/`

Note: Block comments can be nested.
Since a block comment requires matching start and end text sequences, and allows arbitrary nesting,
a block comment cannot be recognized with a regular expression.
This is a consequence of the Pumping Lemma for Regular Languages.

<div class='example wgsl' heading='Comments'>
  <xmp>
  let f = 1.5;   // This is line-ending comment.
  let g = 2.5;   /* This is a block comment
                    that spans lines.
                    /* Block comments can nest.
                     */
                    But all block comments must terminate.
                  */
  </xmp>
</div>

## Tokens ## {#tokens}

A <dfn>token</dfn> is a contiguous sequence of characters forming one of:
* a [=literal=].
* a [=keyword=].
* a [=reserved word=].
* a [=syntactic token=].
* an [=identifier=].

## Literals ## {#literals}

A <dfn>literal</dfn> is one of:
* a <dfn>numeric literal</dfn>, used to represent a number.
* a <dfn noexport>boolean literal</dfn>: either `true` or `false`.

The form of a [=numeric literal=] is defined via pattern-matching:

<div class='syntax' noexport='true'>
  <dfn for=syntax>decimal_float_literal</dfn> :

    | `/((-?[0-9]*\.[0-9]+|-?[0-9]+\.[0-9]*)((e|E)(\+|-)?[0-9]+)?f?)|(-?[0-9]+(e|E)(\+|-)?[0-9]+f?)/`
</div>
<div class='syntax' noexport='true'>
  <dfn for=syntax>hex_float_literal</dfn> :

    | `/-?0[xX]((([0-9a-fA-F]*\.[0-9a-fA-F]+|[0-9a-fA-F]+\.[0-9a-fA-F]*)((p|P)(\+|-)?[0-9]+f?)?)|([0-9a-fA-F]+(p|P)(\+|-)?[0-9]+f?))/`
</div>
<div class='syntax' noexport='true'>
  <dfn for=syntax>int_literal</dfn> :

    | `/-?0[xX][0-9a-fA-F]+|0|-?[1-9][0-9]*/`
</div>
<div class='syntax' noexport='true'>
  <dfn for=syntax>uint_literal</dfn> :

    | `/0[xX][0-9a-fA-F]+u|0u|[1-9][0-9]*u/`
</div>

Note: literals are parsed greedily. This means that for statements like `a -5`
      this will *not* parse as `a` `minus` `5` but instead as `a` `-5` which
      may be unexpected. A space must be inserted after the `-` if the first
      expression is desired.

TODO(dneto): Describe how numeric literal tokens map to idealized values, and then to typed values.

<div class='syntax' noexport='true'>
  <dfn for=syntax>const_literal</dfn> :

    | [=syntax/int_literal=]

    | [=syntax/uint_literal=]

    | [=syntax/float_literal=]

    | [=syntax/true=]

    | [=syntax/false=]
</div>

<div class='syntax' noexport='true'>
  <dfn for=syntax>float_literal</dfn> :

    | [=syntax/decimal_float_literal=]

    | [=syntax/hex_float_literal=]
</div>


## Keywords ## {#keywords}

A <dfn>keyword</dfn> is a [=token=] which always refers to a predefined language concept.
See [[#keyword-summary]] for the list of WGSL keywords.

## Identifiers ## {#identifiers}

An <dfn>identifier</dfn> is a kind of [=token=] used as a name.
See [[#declaration-and-scope]] and [[#directives]].

The form of an identifier is defined via pattern-matching, except that
an identifier:
* must not have the same spelling as a [=keyword=] or as a [=reserved word=].
* must not be `_` (a single underscore)
* must not start with two underscores.

<div class='syntax' noexport='true'>
  <dfn for=syntax>ident</dfn> :

    | `/([a-zA-Z_][0-9a-zA-Z][0-9a-zA-Z_]*)|([a-zA-Z][0-9a-zA-Z_]*)/`
</div>

Note: The [=return type=] for some [=built-in functions=] are structure types whose name cannot be used WGSL source.
Those structure types are described as if they were [=predeclared=] with a name starting with two underscores.
The result value can be saved into newly declared `let` or `var` using type inferencing, or immediately have one of its members
immediately extracted by name.  See example usages in the description of `frexp` and `modf`.

## Attributes ## {#attributes}

An <dfn noexport>attribute</dfn> modifies an object or type.
WGSL provides a unified syntax for applying attributes.
Attributes are used for a variety of purposes such as specifying the interface with the API.
Generally speaking, from the language's point-of-view, attributes can be
ignored for the purposes of type and semantic checking.

An attribute must not be specified more than once per object or type.

<div class='syntax' noexport='true'>
  <dfn for=syntax>attribute</dfn> :

    | [=syntax/attr=] [=syntax/ident=] [=syntax/paren_left=] ( [=syntax/literal_or_ident=] [=syntax/comma=] ) * [=syntax/literal_or_ident=] [=syntax/comma=] ? [=syntax/paren_right=]

    | [=syntax/attr=] [=syntax/ident=]
</div>
<div class='syntax' noexport='true'>
  <dfn for=syntax>literal_or_ident</dfn> :

    | [=syntax/float_literal=]

    | [=syntax/int_literal=]

    | [=syntax/uint_literal=]

    | [=syntax/ident=]
</div>

<table class='data'>
  <caption>Attributes defined in WGSL</caption>
  <thead>
    <tr><th>Attribute<th>Valid Values<th>Description
  </thead>

  <tr><td><dfn noexport dfn-for="attribute">`align`</dfn>
    <td>positive i32 literal
    <td>Must only be applied to a member of a [=structure=] type.

    Must be a power of 2, and must satisfy the required-alignment for the member type:

    <p algorithm="align constraint">
    If `align(`|n|`)` is applied to a member of |S|
    with type |T|, and |S| is the [=store type=]
    or contained in the store type for a variable in address space |C|,
    then |n| must satisfy:
    |n|&nbsp;=&nbsp;|k|&nbsp;&times;&nbsp;[=RequiredAlignOf=](|T|,|C|)
    for some positive integer |k|.
    </p>

    See [[#memory-layouts]]

  <tr><td><dfn noexport dfn-for="attribute">`binding`
    <td>non-negative i32 literal
    <td>Must only be applied to a [=resource=] variable.

    Specifies the binding number of the resource in a bind [=attribute/group=].
    See [[#resource-interface]].

  <tr><td><dfn noexport dfn-for="attribute">`builtin`
    <td>identifier name for a built-in value
    <td>Must only be applied to an entry point function parameter, entry point
    return type, or member of a [=structure=].

    Declares a built-in value.
    See [[#builtin-values]].

  <tr><td><dfn noexport dfn-for="attribute">`group`
    <td>non-negative i32 literal
    <td>Must only be applied to a [=resource=] variable.

    Specifies the binding group of the resource.
    See [[#resource-interface]].

  <tr><td><dfn noexport dfn-for="attribute">`id`
    <td>non-negative i32 literal
    <td>Must only be applied to an [=override declaration=] of [=scalar=] type.

    Specifies a numeric identifier as an alternate name for a
    [=pipeline-overridable=] constant.

  <tr><td><dfn noexport dfn-for="attribute">`interpolate`
    <td>One or two parameters.

    The first parameter must be an [=interpolation type=].
    The second parameter, if present, must specify the [=interpolation sampling=].
    <td>Must only be applied to a declaration that is decorated with a
    [=attribute/location=] attribute.

    Specifies how the user-defined IO must be interpolated.
    The attribute is only significant on user-defined [=vertex=] outputs
    and [=fragment=] inputs.
    See [[#interpolation]].

  <tr><td><dfn noexport dfn-for="attribute">`invariant`
    <td>*None*
    <td>Must only be applied to the `position` built-in value.

    When applied to the `position` [=built-in output value=] of a vertex
    shader, the computation of the result is invariant across different
    programs and different invocations of the same entry point.
    That is, if the data and control flow match for two `position` outputs in
    different entry points, then the result values are guaranteed to be the
    same.
    There is no affect on a `position` [=built-in input value=].

    Note: this attribute maps to the `precise` qualifier in HLSL, and the
    `invariant` qualifier in GLSL.

  <tr><td><dfn noexport dfn-for="attribute">`location`
    <td>non-negative i32 literal
    <td>Must only be applied to an entry point function parameter, entry point
    return type, or member of a [=structure=] type.
    Must only be applied to declarations of [=numeric scalar=] or [=numeric
    vector=] type.
    Must not be used with the [=compute=] shader stage.

    Specifies a part of the user-defined IO of an entry point.
    See [[#input-output-locations]].

  <tr><td><dfn noexport dfn-for="attribute">`size`</dfn>
    <td>positive i32 literal
    <td>Must only be applied to a member of a [=structure=] type.

    The number of bytes reserved in the struct for this member.
    
    This number must be at least the [=byte-size=] of the type of the member:
    <p algorithm="byte-size constraint">
    If `size(`|n|`)` is applied to a member with type |T|, then [=SizeOf=](|T|)&nbsp;&leq;&nbsp;|n|.
    </p>

    See [[#memory-layouts]]

  <tr><td><dfn noexport dfn-for="attribute">`stage`</dfn>
    <td>`compute`, `vertex`, or `fragment`
    <td>Must only be applied to a [=function declaration=].

    Declares an [=entry point=] by specifying its [[#shader-stages-sec|pipeline stage]].

  <tr><td><dfn noexport dfn-for="attribute">`workgroup_size`</dfn>
    <td>One, two or three parameters.

    Each parameter is either a literal or [[#module-constants|module-scope constant]].
    All parameters must be of the same type, either i32 or u32.
    <td>Must be applied to a [=compute shader stage|compute shader=] entry point function.
    Must not be applied to any other object.

    Specifies the x, y, and z dimensions of the [=workgroup grid=] for the compute shader.

    The first parameter specifies the x dimension.
    The second parameter, if provided, specifies the y dimension, otherwise is assumed to be 1.
    The third parameter, if provided, specifies the z dimension, otherwise is assumed to be 1.
    Each dimension must be at least 1 and at most an upper bound specified by the WebGPU API.

</table>


## Directives ## {#directives}

A <dfn noexport>directive</dfn> is a [=token=] sequence which modifies how a WGSL
program is processed by a WebGPU implementation.

Directives are optional.
If present, all directives must appear before any declarations.

See [[#enable-directive-section]].

<div class='syntax' noexport='true'>
  <dfn for=syntax>global_directive</dfn> :

    | [=syntax/enable_directive=]
</div>

## Declaration and Scope ## {#declaration-and-scope}

A <dfn noexport>declaration</dfn> associates an [=identifier=] with one of
the following kinds of objects:
* a type
* a value
* a variable
* a function
* a formal parameter

In other words, a declaration introduces a <dfn noexport>name</dfn> for an object.

The <dfn noexport>scope</dfn> of a declaration is the set of
program locations where a use of the declared identifier potentially denotes
its associated object.
We say the identifier is <dfn noexport>in scope</dfn>
(of the declaration) at those source locations.

When an identifier is used, it must be [=in scope=] for some declaration, or as part of a directive.
When an identifier is used in scope of one or more declarations for that name,
the identifier will denote the object of the non-[=module scope|module-scope=] declaration appearing closest to
that use, or the module-scope declaration if no other declaration is in scope.
We say the identifier use <dfn noexport>resolves</dfn> to that declaration.

Where a declaration appears determines its scope.
Generally, the scope is a span of text beginning immediately after the end of
the declaration.
Declarations at [=module scope=] are the exception, described below.

A declaration must not introduce a name when that identifier is
already in scope with the same end of scope as another instance of that name.

Certain objects are provided by the WebGPU implementation, and are treated as
if they have been declared by every WGSL program.
We say such objects are <dfn noexport>predeclared</dfn>.
Their scope is the entire WGSL program.
Examples of predeclared objects are:
* [=built-in functions=], and
* built-in types.

A declaration is at <dfn noexport>module scope</dfn> if the declaration appears outside
the text of any other declaration.
Module scope declarations are [=in scope=] for the entire program.
That is, a declaration at module scope may be referenced by source text
that follows *or precedes* that declaration.

It is a [=shader-creation error=] if any module scope declaration is recursive.
That is, there must be no cycles among the declarations:

> Consider the directed graph where:
> * Each node corresponds to a declaration |D|.
> * There is an edge from declaration |D| to declaration |T| when the definition
>      for |D| mentions an identifier which [=resolves=] to |T|.
>
> This graph must not have a cycle.

Note: The [=function body=] is part of the [=function declaration=], thus
functions must not be recursive, either directly or indirectly.

Note: Use of a non-[=module scope=] identifier must follow the declaration of
that identifier in the text.
This is not true, however, for [=module scope=] declarations, which may be
referenced out of order in the text.

Note: Only a [=function declaration=] can contain other declarations.

<div class='example wgsl' heading='Valid and invalid declarations'>
  <xmp>
    // Invalid, cannot reuse built-in function names.
    var<private> modf: f32 = 0.0;

    // Valid, foo_1 is in scope for the entire program.
    var<private> foo: f32 = 0.0; // foo_1

    // Valid, bar_1 is in scope for the entire program.
    var<private> bar: u32 = 0u; // bar_1

    // Valid, my_func_1 is in scope for the entire program.
    // Valid, foo_2 is in scope until the end of the function.
    fn my_func(foo: f32) { // my_func_1, foo_2
      // Any reference to 'foo' resolves to the function parameter.

      // Invalid, the scope of foo_2 ends at the of the function.
      var foo: f32; // foo_3

      // Valid, bar_2 is in scope until the end of the function.
      var bar: u32; // bar_2
      // References to 'bar' resolve to bar_2
      {
        // Valid, bar_3 is in scope until the end of the compound statement.
        var bar: u32; // bar_3
        // References to 'bar' resolve to bar_3

        // Invalid, bar_4 has the same end scope as bar_3.
        var bar: i32; // bar_4

        // Valid, i_1 is in scope until the end of the for loop
        for ( var i: i32 = 0; i < 10; i++ ) { // i_1
          // Invalid, i_2 has the same end scope as i_1.
          var i: i32 = 1; // i_2.
        }
      }

      // Invalid, bar_5 has the same end scope as bar_2.
      var bar: u32; // bar_5

      // Valid, module scope declarations are in scope for the entire program.
      var early_use : i32 = later_def;
    }

    // Invalid, bar_6 has the same scope as bar_1.
    var<private> bar: u32 = 1u; // bar_6

    // Invalid, my_func_2 has the same end scope as my_func_1.
    fn my_func() { } // my_func_2

    // Valid, my_foo_1 is in scope for the entire program.
    fn my_foo( //my_foo_1
      // Valid, my_foo_2 is in scope until the end of the function.
      my_foo: i32 // my_foo_2
    ) { }

    var<private> later_def : i32 = 1;
  </xmp>
</div>

# Types # {#types}

Programs calculate values.

In WGSL, a <dfn noexport>type</dfn> is set of values, and each value belongs to exactly one type.
A value's type determines the syntax and semantics of operations that can be performed on that value.

For example, the mathematical number 1 corresponds to three distinct values in WGSL:
* the 32-bit signed integer value `1`,
* the 32-bit unsigned integer value `1u`, and
* the 32-bit floating point value `1.0`.

WGSL treats these as different because their machine representation and operations differ.

A type is either [=predeclared=], or created in WGSL source via a [=declaration=].

We distinguish between the *concept* of a type and the *syntax* in WGSL to denote that type.
In many cases the spelling of a type in this specification is the same as its WGSL syntax.
For example:
* the set of 32-bit unsigned integer values is spelled `u32` in this specification,
    and also in a WGSL program.
* the spelling is different for structure types, or types containing structures.

Some WGSL types are only used for analyzing a source program and
for determining the program's runtime behaviour.
This specification will describe such types, but they do not appear in WGSL source text.

Note: WGSL [=reference types=] are not written in WGSL programs. See [[#memory-view-types]].

## Type Checking ## {#type-checking-section}

A WGSL value is computed by evaluating an expression.
An <dfn noexport>expression</dfn> is a segment of source text
parsed as one of the WGSL grammar rules whose name ends with "`_expression`".
An expression *E* can contain <dfn noexport>subexpressions</dfn> which are expressions properly contained
in the outer expression *E*.

The particular value produced by an expression evaluation depends on:
* <dfn noexport>static context</dfn>:
    the source text surrounding the expression, and
* <dfn noexport>dynamic context</dfn>:
    the state of the invocation evaluating the expression,
    and the execution context in which the invocation is running.

The values that may result from evaluating a particular expression will always belong to a specific WGSL type,
known as the <dfn noexport>static type</dfn> of the expression.
The rules of WGSL are designed so that the static type of an expression depends only on the expression's static context.

Statements often use expressions, and may place requirements on the static types of those expressions.
For example:
* The condition expression of an `if` statement must be of type [=bool=].
* In a `let` declaration, the initializer must evaluate to the declared type of the constant.

<dfn noexport>Type checking</dfn> a successfully parsed WGSL program is the process of mapping
each expression to its static type,
and determining if the type requirements of each statement are satisfied.

A <dfn noexport>type assertion</dfn> is a mapping from some WGSL source expression to a WGSL type.
The notation

> *e* : *T*

is a type assertion meaning *T* is the static type of WGSL expression *e*.

Note: A type assertion is a statement of fact about the text of a program.
It is not a runtime check.

Finding static types for expressions can be performed by recursively applying type rules.
A <dfn noexport>type rule</dfn> has two parts:
* A conclusion, stated as a type assertion for an expression.
    The expression in the type assertion is specified schematically,
    using *italicized* names to denote subexpressions
    or other syntactically-determined parameters.
* Preconditions, consisting of:
    * Type assertions for subexpressions, when there are subexpressions.
    * Conditions on the other schematic parameters, if any.
    * How the expression is used in a statement.
    * Optionally, other static context.

Each distinct type parameterization for a type rule is called an <dfn noexport>overload</dfn>.
For example, [[#arithmetic-expr|unary negation]] (an expression of the form `-`|e|)
has eight overloads, because its type rules are parameterized by a type |T| that can be any of:
* [=i32=]
* vec2&lt;i32&gt;
* vec3&lt;i32&gt;
* vec4&lt;i32&gt;
* [=f32=]
* vec2&lt;f32&gt;
* vec3&lt;f32&gt;
* vec4&lt;f32&gt;

A <dfn noexport>type rule applies to an expression</dfn> when:
* The rule's conclusion matches a valid parse of the expression, and
* The rule's preconditions are satisfied.

TODO: write an example such as `1+2`, or `3 - a`, where `a` is in-scope of a let declaration with `i32` type.

The type rules are designed so that if parsing succeeds, at most one type rule will apply to each expression.
If a type rule applies to an expression, then the conclusion is asserted, and therefore determines the static type of the expression.

A WGSL source program is <dfn noexport>well-typed</dfn> when:
* The static type can be determined for each expression in the program by applying the type rules, and
* The type requirements for each statement are satisfied.

Otherwise there is a <dfn noexport>type error</dfn> and the source program is not a valid WGSL program.

WGSL is a <dfn noexport>statically typed language</dfn>
because type checking a WGSL program will either succeed or
discover a type error, while only having to inspect the program source text.

### Type Rule Tables ### {#typing-tables-section}

The WGSL [=type rules=] are organized into <dfn noexport>type rule tables</dfn>,
with one row per type rule.

The <dfn noexport>semantics of an expression</dfn> is the effect of evaluating that expression,
and is primarily the production of a result value.
The *Description* column of the type rule that applies to an expression will specify the expression's semantics.
The semantics usually depends on the values of the type rule parameters, including
the assumed values of any subexpressions.
Sometimes the semantics of an expression includes effects other than producing
a result value, such as the non-result-value effects of its subexpressions.

TODO: example: non-result-value effect is any side effect of a function call subexpression.

## Plain Types ## {#plain-types-section}

[=Plain types=] are the types for representing boolean values, numbers, vectors,
matrices, or aggregations of such values.

A <dfn>plain type</dfn> is either a [=scalar=] type, an [=atomic type|atomic=] type, or a [=composite=] type.

Note: Plain types in WGSL are similar to Plain-Old-Data types in C++, but also include atomic types.

### Boolean Type ### {#bool-type}

The <dfn noexport>bool</dfn> type contains the values `true` and `false`.

### Integer Types ### {#integer-types}

The <dfn noexport>u32</dfn> type is the set of 32-bit unsigned integers.

The <dfn noexport>i32</dfn> type is the set of 32-bit signed integers.
It uses a two's complementation representation, with the sign bit in the most significant bit position.

### Floating Point Type ### {#floating-point-types}

The <dfn noexport>f32</dfn> type is the set of 32-bit floating point values of the [[!IEEE-754|IEEE-754]] binary32 (single precision) format.
See [[#floating-point-evaluation]] for details.

### Scalar Types ### {#scalar-types}

The <dfn noexport>scalar</dfn> types are [=bool=], [=i32=], [=u32=], and [=f32=].

The <dfn noexport>numeric scalar</dfn> types are [=i32=], [=u32=], and [=f32=].

The <dfn noexport>integer scalar</dfn> types are [=i32=] and [=u32=].

### Vector Types ### {#vector-types}

A <dfn noexport>vector</dfn> is a grouped sequence of 2, 3, or 4 [=scalar=] components.

<table class='data'>
  <thead>
    <tr><th>Type<th>Description
  </thead>
  <tr><td>vec*N*<*T*><td>Vector of *N* components of type *T*.
                          *N* must be in {2, 3, 4} and *T*
                          must be one of the [=scalar=] types.
                          We say *T* is the <dfn noexport>component type</dfn> of the vector.
</table>

A vector is a <dfn dfn>numeric vector</dfn> if its component type is a [=numeric scalar=].

Key use cases of a vector include:

* to express both a direction and a magnitude.
* to express a position in space.
* to express a color in some color space.
    For example, the components could be intensities of red, green, and blue,
    while the fourth component could be an alpha (opacity) value.

Many operations on vectors act <dfn noexport>component-wise</dfn>, i.e. the
result vector is formed by operating on each component independently.

<div class='example wgsl type-scope' heading='Vector'>
  <xmp highlight='rust'>
    vec2<f32>  // is a vector of two f32s.
  </xmp>
</div>

<div class='example wgsl function-scope component-wise addition' heading='Component-wise addition'>
  <xmp highlight='rust'>
    let x : vec3<f32> = a + b; // a and b are vec3<f32>
    // x[0] = a[0] + b[0]
    // x[1] = a[1] + b[1]
    // x[2] = a[2] + b[2]
  </xmp>
</div>

### Matrix Types ### {#matrix-types}

A <dfn noexport>matrix</dfn> is a grouped sequence of 2, 3, or 4 floating point vectors.

<table class='data'>
  <thead>
    <tr><th>Type<th>Description
  </thead>
  <tr algorithm="matrix type">
    <td>mat|N|x|M|&lt;f32&gt;
    <td>Matrix of |N| columns and |M| rows, where |N| and |M| are both in {2, 3, 4}.
        Equivalently, it can be viewed as |N| column vectors of type vec|M|&lt;f32&gt;.
</table>

The key use case for a matrix is to embody a linear transformation.
In this interpretation, the vectors of a matrix are treated as column vectors.

The product operator (`*`) is used to either:

* scale the transformation by a scalar magnitude.
* apply the transformation to a vector.
* combine the transformation with another matrix.

See [[#arithmetic-expr]].

<div class='example wgsl type-scope' heading='Matrix'>
  <xmp highlight='rust'>
    mat2x3<f32>  // This is a 2 column, 3 row matrix of 32-bit floats.
                 // Equivalently, it is 2 column vectors of type vec3<f32>.
  </xmp>
</div>

### Atomic Types ### {#atomic-types}

An <dfn noexport>atomic type</dfn> encapsulates a [=scalar=] type such that:
* atomic objects provide certain guarantees to concurrent observers, and
* the only valid operations on atomic objects are the [[#atomic-builtin-functions|atomic builtin functions]].

<table class='data'>
  <thead>
    <tr><th>Type<th>Description
  </thead>
  <tr algorithm="atomic type"><td>atomic&lt;|T|&gt;
    <td>Atomic of type |T|. |T| must be either [=u32=] or [=i32=].
</table>

An expression must not evaluate to an atomic type.

Atomic types may only be instantiated by variables in the [=address spaces/workgroup=]
address space or by [=storage buffer=] variables with a [=access/read_write=] access mode.
The [=memory scope=] of operations on the type is determined by the [=address space=]
it is instantiated in.
Atomic types in the [=address spaces/workgroup=] address space have a memory
scope of `Workgroup`, while those in the [=address spaces/storage=]
address space have a memory scope of `QueueFamily`.

An <dfn noexport>atomic modification</dfn> is any
[[#memory-operation|operation]] on an atomic object which sets the content of
the object.
The operation counts as a modification even if the new value is the same as the
object's existing value.

In WGSL, atomic modifications are mutually ordered, for each object.
That is, during execution of a shader stage, for each atomic object *A*, all
agents observe the same order of modification operations applied to *A*.
The ordering for distinct atomic objects may not be related in any way; no
causality is implied.
Note that variables in [=address spaces/workgroup=] space are shared within a
[=compute shader stage/workgroup=], but are not shared between different
workgroups.


### Array Types ### {#array-types}

An <dfn noexport>array</dfn> is an indexable grouping of element values.

<table class='data'>
  <thead>
    <tr><th>Type<th>Description
  </thead>
  <tr><td algorithm="fixed-size array type">array&lt;|E|,|N|&gt;
      <td>A <dfn>fixed-size array</dfn> with |N| elements of type |E|.<br>
          |N| is called the <dfn noexport>element count</dfn> of the array.
  <tr><td algorithm="runtime-sized array type">array&lt;|E|&gt;
      <td>A <dfn noexport>runtime-sized</dfn> array of elements of type |E|.
          These may only appear in specific contexts.<br>
</table>

The first element in an array is at index 0, and each successive element is at the next integer index.
See [[#array-access-expr]].

An expression must not evaluate to a runtime-sized array type.

The element count expression |N| of a fixed-size array must:
* be a literal, or the name of a [[#module-constants|module-scope constant]] (possibly [=pipeline-overridable=]), and
* evaluate to an [=integer scalar=] with value greater than zero.

Note:  The element count value is fully determined at [=pipeline creation=] time.

An array element type must be one of:
* a [=scalar=] type
* a [=vector=] type
* a [=matrix=] type
* an [=atomic type|atomic=] type
* an array type having a [=creation-fixed footprint=]
* a [=structure=] type having a [=creation-fixed footprint=].

Note: The element type must be a [=plain type=].

Two array types are the same if and only if all of the following are true:
* They have the same element type.
* Their element count specifications match, i.e. one of the following is true:
    * They are both runtime-sized.
    * They are both fixed-sized with [=creation-fixed footprint=], and 
        equal-valued element counts, even if one is signed and the other is unsigned.
        (Signed and unsigned values are comparable in this case because element counts must
        be greater than zero.)
    * They are both fixed-sized with element count specified as the same
        [=pipeline-overridable=] constant.

<div class='example wgsl fixed-size array types' heading='Example fixed-size array types, non-overridable element count'>
  <xmp highlight='rust'>
    // array<f32,8> and array<i32,8> are different types:
    // different element types
    var<private> a: array<f32,8>;
    var<private> b: array<i32,8>;
    var<private> c: array<i32,8u>;  // array<i32,8> and array<i32,8u> are the same type

    let width = 8;
    let height = 8;

    // array<i32,8>, array<i32,8u>, and array<i32,width> are the same type.
    // Their element counts evaluate to 8.
    var<private> d: array<i32,width>;

    // array<i32,height> and array<i32,width> are the same type.
    var<private> e: array<i32,width>;
    var<private> f: array<i32,height>;
  </xmp>
</div>

Note: The valid use of an array sized by an overridable constant is as the store type
of a variable in [=address spaces/workgroup=] space.

<div class='example wgsl global-scope' heading="Workgroup variables sized by overridable constants">
  <xmp>
    override blockSize = 16;

    var<workgroup> odds: array<i32,blockSize>;
    var<workgroup> evens: array<i32,blockSize>;

    // An invalid example, because the overridable element count may only occur
    // at the outer level.
    // var<workgroup> both: array<array<i32,blockSize>,2>;

    // An invalid example, because the overridable element count is only
    // valid for workgroup variables.
    // var<private> bad_address_space: array<i32,blockSize>;
  </xmp>
</div>


<div class='syntax' noexport='true'>
  <dfn for=syntax>array_type_decl</dfn> :

    | [=syntax/array=] [=syntax/less_than=] [=syntax/type_decl=] ( [=syntax/comma=] [=syntax/element_count_expression=] ) ? [=syntax/greater_than=]
</div>
<div class='syntax' noexport='true'>
  <dfn for=syntax>element_count_expression</dfn> :

    | [=syntax/int_literal=]

    | [=syntax/uint_literal=]

    | [=syntax/ident=]
</div>

### Structure Types ### {#struct-types}

A <dfn noexport>structure</dfn> is a grouping of named member values.

<table class='data'>
  <thead>
    <tr><th>Type<th>Description
  </thead>
  <tr algorithm="structure type">
      <td>struct&lt;|T|<sub>1</sub>,...,|T|<sub>N</sub>&gt;
      <td>An ordered tuple of *N* members of types
          |T|<sub>1</sub> through |T|<sub>N</sub>, with |N| being an integer greater than 0.
          A structure type declaration specifies an [=identifier=] name for each member.
          Two members of the same structure type must not have the same name.
</table>

A structure member type must be one of:
* a [=scalar=] type
* a vector type
* a matrix type
* an [=atomic type|atomic=] type
* a [=fixed-size array=] type with [=creation-fixed footprint=]
* a [=runtime-sized=] array type, but only if it is the last member of the structure
* a [=structure=] type that has a [=creation-fixed footprint=]

Note: Each member type must be a [=plain type=].

Some consequences of the restrictions structure member and array element types are:
* A pointer, texture, or sampler must not appear in any level of nesting within an array or structure.
* When a [=runtime-sized=] array is part of a larger type, it may only appear
    as the last element of a structure, which itself cannot be part of an enclosing array or structure.

<div class='example wgsl global-scope' heading="Structure">
  <xmp highlight='rust'>
    // A structure with four members.
    struct Data {
      a: i32;
      b: vec2<f32>;
      c: array<i32,10>;
      d: array<f32>;
    }
  </xmp>
</div>

<div class='syntax' noexport='true'>
  <dfn for=syntax>struct_decl</dfn> :

    | [=syntax/struct=] [=syntax/ident=] [=syntax/struct_body_decl=]
</div>
<div class='syntax' noexport='true'>
  <dfn for=syntax>struct_body_decl</dfn> :

    | [=syntax/brace_left=] [=syntax/struct_member=] * [=syntax/brace_right=]
</div>
<div class='syntax' noexport='true'>
  <dfn for=syntax>struct_member</dfn> :

    | [=syntax/attribute=] * [=syntax/variable_ident_decl=] [=syntax/semicolon=]
</div>

WGSL defines the following attributes that can be applied to structure members:
 * [=attribute/builtin=]
 * [=attribute/location=]
 * [=attribute/align=]
 * [=attribute/size=]

Note: Layout attributes may be required if the structure type is used
to define a [=uniform buffer=] or a [=storage buffer=]. See [[#memory-layouts]].

<div class='example wgsl global-scope' heading='Structure WGSL'>
  <xmp>
    struct my_struct {
      a: f32;
      b: vec4<f32>;
    }
  </xmp>
</div>

<div class='example wgsl global-scope' heading='Structure WGSL'>
  <xmp>
    // Runtime Array
    type RTArr = array<vec4<f32>>;
    struct S {
      a: f32;
      b: f32;
      data: RTArr;
    }
    @group(0) @binding(0) var<storage> buffer: S;
  </xmp>
</div>

### Composite Types ### {#composite-types}

A type is <dfn noexport>composite</dfn> if it has internal structure
expressed as a composition of other types.
The internal parts do not overlap, and are called <dfn noexport>components</dfn>.

The composite types are:

* [=vector=] type
* [=matrix=] type
* [=array=] type
* [=structure=] type

For a composite type |T|, the <dfn>nesting depth</dfn> of |T|, written *NestDepth*(|T|) is:
* 1 for a vector type
* 2 for a matrix type
* 1 + *NestDepth*(|E|) for an array type with element type |E|
* 1 + max(*NestDepth*(*M*<sub>1</sub>),..., *NestDepth*(*M*<sub>N</sub>))
    if |T| is a structure type with member types *M*<sub>1</sub>,...,*M*<sub>1</sub>


### Constructible Types ### {#constructible-types}

Many kinds of values can be created, loaded, stored, passed into functions,
and returned from functions.
We call these [=constructible=].

A type is <dfn>constructible</dfn> if it is one of:

* a [=scalar=] type
* a [=vector=] type
* a [=matrix=] type
* a [=fixed-size array=] type, if it has [=creation-fixed footprint=] and its element type is constructible.
* a [=structure=] type, if all its members are constructible.

Note: All constructible types are [=plain types|plain=] and have [=creation-fixed footprint=].

Note: Atomic types and runtime-sized array types are not constructible.
Composite types containing atomics and runtime-sized arrays are not constructible.

### Fixed-Footprint Types ### {#fixed-footprint-types}

The <dfn noexport>memory footprint</dfn> of a variable is the number of [=memory locations=]
used to store the contents of the variable.
The memory footprint of a variable depends on its [=store type=] and becomes finalized at some point
in the [[#shader-lifecycle|shader lifecycle]].
Most variables are sized very early, at [=Shader module creation|shader creation=] time.
Some variables may be sized later, at [=pipeline creation=] time,
and others as late as the [=shader execution start|start of shader execution=].

A [=plain type=] has a <dfn>creation-fixed footprint</dfn> if its size is fully determined
at [=shader module creation|shader creation=] time.

A [=plain type=] has a <dfn>fixed footprint</dfn> if its size is fully determined
at [=pipeline creation=] time.

Note: Pipeline creation depends on shader creation, so a type with [=creation-fixed footprint=] also has [=fixed footprint=].

The plain types with [=creation-fixed footprint=] are:
* a [=scalar=] type
* a [=vector=] type
* a [=matrix=] type
* an [=atomic type|atomic=] type
* a [=fixed-size array=] type, when:
     * its [=element count=] is a literal, or the name of a [[#module-constants|module-scope]]
        [=let declaration=]
* a [=structure=] type, if all its members have [=creation-fixed footprint=].

Note: A [=constructible=] type has [=creation-fixed footprint=].

The plain types with [=fixed footprint=] are any of:
* a type with [=creation-fixed footprint=]
* a [=fixed-size array=] type, where its [=element count=] is a [=pipeline-overridable=]  constant.

Note: The only valid use of a fixed-size array with an element count that is a pipeline-overridable constant is
as the [=store type=] for a [=address spaces/workgroup=] variable.

Note: A fixed-footprint type may contain an [=atomic type|atomic=] type, either directly or
indirectly, while a [=constructible=] type must not.

Note: Fixed-footprint types exclude [=runtime-sized=] arrays, and any structures or arrays
that contain [=runtime-sized=] arrays, recursively.

## Memory ## {#memory}

In WGSL, a value of [=storable=] type may be stored in memory, for later retrieval.
This section describes the structure of memory, and how WGSL types are used to
describe the contents of memory.

### Memory Locations ### {#memory-locations-section}

Memory consists of a set of distinct <dfn noexport>memory locations</dfn>.
Each memory location is 8-bits
in size. An operation affecting memory interacts with a set of one or more
memory locations.

Two sets of memory locations <dfn noexport>overlap</dfn> if the intersection of
their sets of memory locations is non-empty. Each variable declaration has a
set of memory locations that does not overlap with the sets of memory locations of
any other variable declaration. Memory operations on structures and arrays may
access padding between elements, but must not access padding at the end of the
structure or array.

### Memory Access Mode ### {#memory-access-mode}

A <dfn noexport>memory access</dfn> is an operation that acts on memory locations.

* A <dfn noexport>read access</dfn> observes the contents of memory locations.
* A <dfn noexport>write access</dfn> sets the contents of memory locations.

A single operation can read, write, or both read and write.

Particular memory locations may support only certain kinds of accesses, expressed
as the memory's <dfn noexport>access mode</dfn>:

: <dfn noexport dfn-for="access">read</dfn>
:: Supports read accesses, but not writes.
: <dfn noexport dfn-for="access">write</dfn>
:: Supports write accesses, but not reads.
: <dfn noexport dfn-for="access">read_write</dfn>
:: Supports both read and write accesses.

<div class='syntax' noexport='true'>
  <dfn for=syntax>access_mode</dfn> :

    | `'read'`

    | `'write'`

    | `'read_write'`
</div>

### Storable Types ### {#storable-types}

The value contained in a [=variable=] must be of a [=storable=] type.
A storable type may have an explicit representation defined by WGSL,
as described in [[#internal-value-layout]],
or it may be opaque, such as for textures and samplers.

A type is <dfn noexport>storable</dfn> if it is one of:

* a [=scalar=] type
* a [=vector=] type
* a [=matrix=] type
* an [=atomic type|atomic=] type
* an [=array=] type
* a [=structure=] type
* a [=texture=] type
* a [=sampler=] type

Note: That is, the storable types are the [=plain types=], texture types, and sampler types.

### IO-shareable Types ### {#io-shareable-types}

Pipeline input and output values must be of IO-shareable type.

A type is <dfn noexport>IO-shareable</dfn> if it is one of:

* a [=scalar=] type
* a [=numeric vector=] type
* a [=structure=] type, if all its members are [=scalars=] or [=numeric vectors=]

The following kinds of values must be of IO-shareable type:

* Values read from or written to built-in values.
* Values accepted as inputs from an upstream pipeline stage.
* Values written as output for downstream processing in the pipeline, or to an output attachment.

Note: Only built-in pipeline inputs may have a boolean type.
A user input or output data attribute must not be of [=bool=] type or contain a [=bool=] type.
See [[#pipeline-inputs-outputs]].

### Host-shareable Types ### {#host-shareable-types}

Host-shareable types are used to describe the contents of buffers which are shared between
the host and the GPU, or copied between host and GPU without format translation.
When used for this purpose, the type must be additionally decorated with layout attributes
as described in [[#memory-layouts]].
We will see in [[#module-scope-variables]] that the [=store type=] of [=uniform buffer=] and [=storage buffer=]
variables must be host-shareable.

A type is <dfn noexport>host-shareable</dfn> if it is one of:

* a [=numeric scalar=] type
* a [=numeric vector=] type
* a [=matrix=] type
* an [=atomic type|atomic=] type
* a [=fixed-size array=] type, if it has [=creation-fixed footprint=] and its element type is host-shareable
* a [=runtime-sized=] array type, if its element type is host-shareable
* a [=structure=] type, if all its members are host-shareable

WGSL defines the following attributes that affect memory layouts:
 * [=attribute/align=]
 * [=attribute/size=]

Note: An [=IO-shareable=] type *T* is host-shareable if *T* is not [=bool=] and does not contain [=bool=].
Many types are host-shareable, but not IO-shareable, including [=atomic types=],
[=runtime-sized=] arrays, and any composite types containing them.

Note: Both IO-shareable and host-shareable types have concrete sizes, but counted differently.
IO-shareable types are sized by a location-count metric, see [[#input-output-locations]].
Host-shareable types are sized by a byte-count metric, see [[#memory-layouts]].

### Address spaces ### {#address-space}

Memory locations are partitioned into <dfn noexport>address spaces</dfn>.
Each address space has unique properties determining
mutability, visibility, the values it may contain,
and how to use variables with it.

<table class='data' id="address-space-table">
  <caption>Address Spaces</caption>
  <thead>
    <tr><th>Address space
        <th>Sharing among invocations
        <th>Supported access modes
        <th>Variable scope
        <th>Restrictions on stored values
        <th>Notes
  </thead>
  <tr><td><dfn noexport dfn-for="address spaces">function</dfn>
      <td>Same invocation only
      <td>[=access/read_write=]
      <td>[=Function scope=]
      <td>[=Constructible=] type
      <td>
  <tr><td><dfn noexport dfn-for="address spaces">private</dfn>
      <td>Same invocation only
      <td>[=access/read_write=]
      <td>[=Module scope=]
      <td>[=Constructible=] type
      <td>
  <tr><td><dfn noexport dfn-for="address spaces">workgroup</dfn>
      <td>Invocations in the same [=compute shader stage|compute shader=] [=compute shader stage/workgroup=]
      <td>[=access/read_write=]
      <td>[=Module scope=]
      <td>[=Plain type=] with [=fixed footprint=]
      <td>The [=element count=] of an outermost array may be a [=pipeline-overridable=] constant.
  <tr><td><dfn noexport dfn-for="address spaces">uniform</dfn>
      <td>Invocations in the same [=shader stage=]
      <td>[=access/read=]
      <td>[=Module scope=]
      <td>[=Constructible=] [=host-shareable=] types
      <td>For [=uniform buffer=] variables
  <tr><td><dfn noexport dfn-for="address spaces">storage</dfn>
      <td>Invocations in the same [=shader stage=]
      <td> [=access/read_write=], [=access/read=] (default)
      <td>[=Module scope=]
      <td>[=Host-shareable=]
      <td>For [=storage buffer=] variables
  <tr><td><dfn noexport dfn-for="address spaces">handle</dfn>
      <td>Invocations in the same shader stage
      <td>[=access/read=]
      <td>[=Module scope=]
      <td>[=Sampler=] types or [=texture=] types
      <td>For [=sampler=] and texture variables.<br>
</table>

Note: The token `handle` is reserved: it is never used in a WGSL program.

Note: A texture variable holds an opaque handle which is used to access the underlying
grid of texels.
The handle itself is always read-only.
In most cases the underlying texels are read-only.
For a write-only storage texture, the underlying texels are write-only.

<div class='syntax' noexport='true'>
  <dfn for=syntax>address_space</dfn> :

    | [=syntax/function=]

    | [=syntax/private=]

    | [=syntax/workgroup=]

    | [=syntax/uniform=]

    | [=syntax/storage=]
</div>

### Memory Layout ### {#memory-layouts}

[=Uniform buffer=] and [=storage buffer=] variables are used to share
bulk data organized as a sequence of bytes in memory.
Buffers are shared between the CPU and the GPU, or between different shader stages
in a pipeline, or between different pipelines.

Because buffer data are shared without reformatting or translation,
buffer producers and consumers must agree on the <dfn noexport>memory layout</dfn>,
which is the description of how the bytes in a buffer are organized into typed WGSL values.

The [=store type=] of a buffer variable must be [=host-shareable=], with fully elaborated memory layout, as described below.

Each buffer variable must be declared in either the [=address spaces/uniform=] or [=address spaces/storage=] address spaces.

The memory layout of a type is significant only when evaluating an expression with:
* a variable in the [=address spaces/uniform=] or [=address spaces/storage=] address space, or
* a pointer into the [=address spaces/uniform=] or [=address spaces/storage=] address space.

An 8-bit byte is the most basic unit of [=host-shareable=] memory.
The terms defined in this section express counts of 8-bit bytes.

We will use the following notation:
* <dfn noexport>AlignOf</dfn>(|T|) is the [=alignment=] of host-shareable type |T|.
* <dfn noexport>AlignOfMember</dfn>(|S|, |i|) is the alignment of the |i|'th member of the host-shareable structure |S|.
* <dfn noexport>SizeOf</dfn>(|T|) is the [=byte-size=] of host-shareable type |T|.
* <dfn noexport>SizeOfMember</dfn>(|S|, |i|) is the size of the |i|'th member of the host-shareable structure |S|.
* <dfn noexport>OffsetOfMember</dfn>(|S|, |i|) is the offset of the |i|'th member from the start of the host-shareable structure |S|.
* <dfn noexport>StrideOf</dfn>(|A|) is the <dfn>element stride</dfn> of host-shareable array type |A|, defined
    as the number of bytes from the start of one array element to the start of the next element.
    It equals the size of the array's element type, rounded up to the alignment of the element type:
        <p algorithm="array element stride">
          [=StrideOf=](array<|E|, |N|>) = [=roundUp=]([=AlignOf=](E), [=SizeOf=](E))<br>
          [=StrideOf=](array<|E|>) = [=roundUp=]([=AlignOf=](E), [=SizeOf=](E))
        </p>


#### Alignment and Size ####  {#alignment-and-size}

Each [=host-shareable=] data type |T| has an alignment and size.

The <dfn>alignment</dfn> of a type is a constraint on where values of that type may be placed in memory, expressed
as an integer:
a type's alignment must evenly divide
the byte address of the starting [=memory location=] of a value of that type.
Alignments enable use of more efficient hardware instructions for accessing the values,
or satisfy more restrictive hardware requirements on certain
address spaces. (See [address space layout constraints](#address-space-layout-constraints)).

Note: Each alignment value is always a power of two, by construction.

The <dfn>byte-size</dfn> of a type or structure member is the number of contiguous bytes
reserved in host-shareable memory for the purpose of storing a value of the type
or structure member.
The size may include non-addressable padding at the end of the type.
Consequently, loads and stores of a value might access fewer memory locations
than the value's size.

Alignment and size for host-shareable types are defined recursively in the
following table:

<table class='data'>
  <caption>
    Alignment and size for host-shareable types<br>
  </caption>
  <thead>
    <tr><th>Host-shareable type |T|
        <th>[=AlignOf=](|T|)
        <th>[=SizeOf=](|T|)
  </thead>
  <tr><td>[=i32=], [=u32=], or [=f32=]
      <td>4
      <td>4
  <tr><td>atomic&lt;|T|&gt;
      <td>4
      <td>4
  <tr><td>vec2&lt;|T|&gt;
      <td>8
      <td>8
  <tr><td>vec3&lt;|T|&gt;
      <td>16
      <td>12
  <tr><td>vec4&lt;|T|&gt;
      <td>16
      <td>16
  <tr><td>mat|N|x|M| (col-major)<br>
      <p class="small">(General form)</p>
      <td>[=AlignOf=](vec|M|)
      <td>[=SizeOf=](array&lt;vec|M|, |N|&gt;)
  <tr><td>mat2x2&lt;f32&gt;
      <td>8
      <td>16
  <tr><td>mat3x2&lt;f32&gt;
      <td>8
      <td>24
  <tr><td>mat4x2&lt;f32&gt;
      <td>8
      <td>32
  <tr><td>mat2x3&lt;f32&gt;
      <td>16
      <td>32
  <tr><td>mat3x3&lt;f32&gt;
      <td>16
      <td>48
  <tr><td>mat4x3&lt;f32&gt;
      <td>16
      <td>64
  <tr><td>mat2x4&lt;f32&gt;
      <td>16
      <td>32
  <tr><td>mat3x4&lt;f32&gt;
      <td>16
      <td>48
  <tr><td>mat4x4&lt;f32&gt;
      <td>16
      <td>64
  <tr><td>struct |S| with members M<sub>1</sub>...M<sub>N</sub>
      <td>max([=AlignOfMember=](S,1), ... , [=AlignOfMember=](S,N))<br>
      <td>[=roundUp=]([=AlignOf=](|S|), justPastLastMember)<br><br>
          where justPastLastMember = [=OffsetOfMember=](|S|,N) + [=SizeOfMember=](|S|,N)
  <tr><td>array<|E|, |N|><br>
      <td>[=AlignOf=](|E|)
      <td>|N| &times; [=roundUp=]([=AlignOf=](|E|), [=SizeOf=](|E|))
  <tr><td>array<|E|><br>
      <td>[=AlignOf=](|E|)
      <td>N<sub>runtime</sub> &times; [=roundUp=]([=AlignOf=](|E|),[=SizeOf=](|E|))<br><br>
          where N<sub>runtime</sub> is the runtime-determined number of elements of |T|
</table>


#### Structure Member Layout ####  {#structure-member-layout}

The |i|'th member of structure |S| has a size and alignment, denoted
by [=SizeOfMember=](|S|, |i|) and [=AlignOfMember=](|S|, |i|), respectively.
The member sizes and alignments are used to calculate each member's byte offset from the start of the structure,
as described in [[#internal-value-layout]].

<p algorithm="structure member size">
  [=SizeOfMember=](|S|, |i|) is |k| if the |i|'th member of |S| has attribute [=attribute/size=](|k|).
  Otherwise, it is [=SizeOf=](|T|) where |T| is the type of the member.
</p>

<p algorithm="structure member alignment">
  [=AlignOfMember=](|S|, |i|) is |k| if the |i|'th member has attribute [=attribute/align=](|k|).
  Otherwise, it is [=AlignOf=](|T|) where |T| is the type of the member.
</p>

If a structure member is decorated with the
[=attribute/size=] attribute, the value must be at least as large as the
size of the member's type:

<p algorithm="member size constraint">
  [=SizeOfMember=](|S|, |i|) &ge; [=SizeOf=](T)<br>
  Where |T| is the type of the |i|'th member of |S|.
</p>

The first structure member always has a zero byte offset from the start of the
structure:
<p algorithm="offset of first structure member">
  [=OffsetOfMember=](|S|, 1) = 0
</p>

Each subsequent member is placed at the lowest offset that satisfies the member type alignment,
and which avoids overlap with the previous member.
For each member index |i| > 1:
<p algorithm="structure member offset">
  [=OffsetOfMember=](|S|, |i|) = [=roundUp=]([=AlignOfMember=](|S|, |i| ), [=OffsetOfMember=](|S|, |i|-1) + [=SizeOfMember=](|S|, |i|-1))<br>
</p>

<div class='example wgsl' heading='Layout of structures using implicit member sizes and alignments'>
  <xmp highlight='rust'>
    struct A {                                     //             align(8)  size(24)
        u: f32;                                    // offset(0)   align(4)  size(4)
        v: f32;                                    // offset(4)   align(4)  size(4)
        w: vec2<f32>;                              // offset(8)   align(8)  size(8)
        x: f32;                                    // offset(16)  align(4)  size(4)
        // -- implicit struct size padding --      // offset(20)            size(4)
    }

    struct B {                                     //             align(16) size(160)
        a: vec2<f32>;                              // offset(0)   align(8)  size(8)
        // -- implicit member alignment padding -- // offset(8)             size(8)
        b: vec3<f32>;                              // offset(16)  align(16) size(12)
        c: f32;                                    // offset(28)  align(4)  size(4)
        d: f32;                                    // offset(32)  align(4)  size(4)
        // -- implicit member alignment padding -- // offset(36)            size(4)
        e: A;                                      // offset(40)  align(8)  size(24)
        f: vec3<f32>;                              // offset(64)  align(16) size(12)
        // -- implicit member alignment padding -- // offset(76)            size(4)
        g: array<A, 3>;    // element stride 24       offset(80)  align(8)  size(72)
        h: i32;                                    // offset(152) align(4)  size(4)
        // -- implicit struct size padding --      // offset(156)           size(4)
    }

    @group(0) @binding(0)
    var<storage,read_write> storage_buffer: B;
  </xmp>
</div>

<div class='example wgsl' heading='Layout of structures with explicit member sizes and alignments'>
  <xmp highlight='rust'>
    struct A {                                     //             align(8)  size(32)
        u: f32;                                    // offset(0)   align(4)  size(4)
        v: f32;                                    // offset(4)   align(4)  size(4)
        w: vec2<f32>;                              // offset(8)   align(8)  size(8)
        @size(16) x: f32;                          // offset(16)  align(4)  size(16)
    }

    struct B {                                     //             align(16) size(208)
        a: vec2<f32>;                              // offset(0)   align(8)  size(8)
        // -- implicit member alignment padding -- // offset(8)             size(8)
        b: vec3<f32>;                              // offset(16)  align(16) size(12)
        c: f32;                                    // offset(28)  align(4)  size(4)
        d: f32;                                    // offset(32)  align(4)  size(4)
        // -- implicit member alignment padding -- // offset(36)            size(12)
        @align(16) e: A;                           // offset(48)  align(16) size(32)
        f: vec3<f32>;                              // offset(80)  align(16) size(12)
        // -- implicit member alignment padding -- // offset(92)            size(4)
        g: array<A, 3>;    // element stride 32       offset(96)  align(8)  size(96)
        h: i32;                                    // offset(192) align(4)  size(4)
        // -- implicit struct size padding --      // offset(196)           size(12)
    }

    @group(0) @binding(0)
    var<uniform> uniform_buffer: B;
  </xmp>
</div>

#### Array Layout Examples ####  {#array-layout-examples}

<div class='example wgsl function-scope' heading='Fixed-size array layout examples'>
  <xmp highlight='rust'>
    // Array where:
    //   - alignment is 4 = AlignOf(f32)
    //   - element stride is 4 = roundUp(AlignOf(f32),SizeOf(f32)) = roundUp(4,4)
    //   - size is 32 = stride * number_of_elements = 4 * 8
    var small_stride: array<f32, 8>;

    // Array where:
    //   - alignment is 16 = AlignOf(vec3<f32>) = 16
    //   - element stride is 16 = roundUp(AlignOf(vec3<f32>), SizeOf(vec3<f32>))
    //                          = roundUp(16,12)
    //   - size is 128 = stride * number_of_elements = 16 * 8
    var bigger_stride: array<vec3<f32>, 8>;
  </xmp>
</div>

<div class='example wgsl global-scope' heading='Runtime-sized array layout examples'>
  <xmp highlight='rust'>
    // Array where:
    //   - alignment is 4 = AlignOf(f32)
    //   - element stride is 4 = roundUp(AlignOf(f32),SizeOf(f32)) = 4
    // If B is the effective buffer binding size for the binding on the
    // draw or dispach command, the number of elements is:
    //   N_runtime = floor(B / element stride) = floor(B / 4)
    @group(0) @binding(0)
    var<storage> weights: array<f32>;

    // Array where:
    //   - alignment is 16 = AlignOf(vec3<f32>) = 16
    //   - element stride is 16 = roundUp(AlignOf(vec3<f32>), SizeOf(vec3<f32>))
    //                          = roundUp(16,12)
    // If B is the effective buffer binding size for the binding on the
    // draw or dispach command, the number of elements is:
    //   N_runtime = floor(B / element stride) = floor(B / 16)
    var<uniform> directions: array<vec3<f32>>;
  </xmp>
</div>

#### Internal Layout of Values ####  {#internal-value-layout}

This section describes how the internals of a value are placed in the byte locations
of a buffer, given an assumed placement of the overall value.
These layouts depend on the value's type,
and the [=attribute/align=] and [=attribute/size=] attributes on structure members.

The buffer byte offset at which a value is placed must satisfy the type alignment requirement:
If a value of type |T| is placed
at buffer offset |k|, then |k| = |c| &times; [=AlignOf=](|T|), for some non-negative integer |c|.

The data will appear identically regardless of the address space.

When a value |V| of type [=u32=] or [=i32=] is placed at byte offset |k| of a
host-shared buffer, then:
   * Byte |k| contains bits 0 through 7 of |V|
   * Byte |k|+1 contains bits 8 through 15 of |V|
   * Byte |k|+2 contains bits 16 through 23 of |V|
   * Byte |k|+3 contains bits 24 through 31 of |V|

Note: Recall that [=i32=] uses twos-complement representation, so the sign bit
is in bit position 31.

A value |V| of type [=f32=] is represented in [[!IEEE-754|IEEE-754]] binary32 format.
It has one sign bit, 8 exponent bits, and 23 fraction bits.
When |V| is placed at byte offset |k| of host-shared buffer, then:
   * Byte |k| contains bits 0 through 7 of the fraction.
   * Byte |k|+1 contains bits 8 through 15 of the fraction.
   * Bits 0 through 6 of byte |k|+2 contain bits 16 through 23 of the fraction.
   * Bit 7 of byte |k|+2 contains bit 0 bit of the exponent.
   * Bits 0 through 6 of byte |k|+3 contain bits 1 through 7 of the exponent.
   * Bit 7 of byte |k|+3 contains the sign bit.

Note: The above rules imply that numeric values in host-shared buffers
are stored in little-endian format.

When a value |V| of [=atomic type=] `atomic`&lt;|T|&gt; is placed in a host-shared buffer,
it has the same internal layout as a value of the underlying type |T|.

When a value |V| of vector type vec|N|&lt;|T|&gt; is placed at
byte offset |k| of a host-shared buffer, then:
   * |V|.x is placed at byte offset |k|
   * |V|.y is placed at byte offset |k|+4
   * If |N| &ge; 3, then |V|.z is placed at byte offset |k|+8
   * If |N| &ge; 4, then |V|.w is placed at byte offset |k|+12

When a matrix value |M| is placed at byte offset |k| of a host-shared memory buffer, then:
   * If |M| has 2 rows, then:
      * Column vector |i| of |M| is placed at byte offset |k| + 8 &times; |i|
   * If |M| has 3 or 4 rows, then:
      * Column vector |i| of |M| is placed at byte offset |k| + 16 &times; |i|

When a value of array type |A| is placed at byte offset |k| of a host-shared memory buffer,
then:
   * Element |i| of the array is placed at byte offset |k| + |i| &times; [=StrideOf=](|A|)

When a value of structure type |S| is placed at byte offset |k| of a host-shared memory buffer,
then:
   * The |i|'<sup>th</sup> member of the structure value is placed at byte offset |k| + [=OffsetOfMember=](|S|,|i|).
    See [[#structure-member-layout]].

#### Address Space Layout Constraints ####  {#address-space-layout-constraints}

The [=address spaces/storage=] and [=address spaces/uniform=] address spaces
have different buffer layout constraints which are described in this section.

All structure and array types directly or indirectly referenced by a variable
must obey the constraints of the variable's address space.
Violations of an address space constraint results in a [=shader-creation error=].

In this section we define <dfn noexport>RequiredAlignOf</dfn>(|S|, |C|) as the
byte offset [=alignment=] requirement of values of host-shareable type |S| when
used in address space |C|.

<table class='data'>
  <caption>
    Alignment requirements of a host-shareable type for
    [=address spaces/storage=] and [=address spaces/uniform=] address spaces
  </caption>
  <thead>
    <tr><th>Host-shareable type |S|
        <th>[=RequiredAlignOf=](|S|, [=address spaces/storage=])
        <th>[=RequiredAlignOf=](|S|, [=address spaces/uniform=])
  </thead>
  <tr><td>[=i32=], [=u32=], or [=f32=]
      <td>[=AlignOf=](|S|)
      <td>[=AlignOf=](|S|)
  <tr><td>atomic&lt;T&gt;
      <td>[=AlignOf=](|S|)
      <td>[=AlignOf=](|S|)
  <tr><td>vecN&lt;T&gt;
      <td>[=AlignOf=](|S|)
      <td>[=AlignOf=](|S|)
  <tr algorithm="alignment of a matrix with N columns and M rows">
      <td>matNxM&lt;f32&gt;
      <td>[=AlignOf=](|S|)
      <td>[=AlignOf=](|S|)
  <tr algorithm="alignment of an array">
      <td>array&lt;T, N&gt;
      <td>[=AlignOf=](|S|)
      <td>[=roundUp=](16, [=AlignOf=](|S|))
  <tr algorithm="alignment of an runtime-sized array">
      <td>array&lt;T&gt;
      <td>[=AlignOf=](|S|)
      <td>[=roundUp=](16, [=AlignOf=](|S|))
  <tr algorithm="alignment of a structure">
      <td>struct |S|
      <td>[=AlignOf=](|S|)
      <td>[=roundUp=](16, [=AlignOf=](|S|))<br>
</table>

Structure members of type |T| must have a byte offset
from the start of the structure that is a multiple of the [=RequiredAlignOf=](|T|, |C|)
for the address space |C|:

<p algorithm="structure member minimum alignment">
    [=OffsetOfMember=](|S|, |M|) = |k| &times; [=RequiredAlignOf=](|T|, C)<br>
    Where |k| is a positive integer and |M| is a member of structure |S| with type |T|
</p>

Arrays of element type |T| must have an [=element stride=] that is a
multiple of the [=RequiredAlignOf=](|T|, |C|) for the address space |C|:

<p algorithm="array element minimum alignment">
    [=StrideOf=](array<|T|, |N|>) = |k| &times; [=RequiredAlignOf=](|T|, C)<br>
    [=StrideOf=](array<|T|>) = |k| &times; [=RequiredAlignOf=](|T|, C)<br>
    Where |k| is a positive integer
</p>

Note: [=RequiredAlignOf=](|T|, |C|) does not impose any additional restrictions
on the values permitted for an [=attribute/align=] decoration, nor does it affect the rules
of [=AlignOf=](|T|). Data is laid out with the rules defined in previous
sections and then the resulting layout is validated against the
[=RequiredAlignOf=](|T|, |C|) rules.

The [=address spaces/uniform=] address space also requires that:
* Array elements are aligned to 16 byte boundaries.
    That is, [=StrideOf=](array&lt;|T|,|N|&gt;) = 16 &times; |k|' for some positive integer |k|'.
* If a structure member itself has a structure type `S`, then the number of
    bytes between the start of that member and the start of any following member
    must be at least [=roundUp=](16, [=SizeOf=](S)).

Note: The following examples show how to use [=attribute/align=] and [=attribute/size=] attributes
on structure members to satisfy layout requirements for uniform buffers.
In particular, these techniques can be used mechanically transform a GLSL buffer with std140 layout
to WGSL.

<div class='example wgsl global-scope' heading='Satisfying offset requirements for uniform address space'>
  <xmp highlight='rust'>
    struct S {
      x: f32;
    }
    struct Invalid {
      a: S;
      b: f32; // invalid: offset between a and b is 4 bytes, but must be at least 16
    }
    @group(0) @binding(0) var<uniform> invalid: Invalid;

    struct Valid {
      a: S;
      @align(16) b: f32; // valid: offset between a and b is 16 bytes
    }
    @group(0) @binding(1) var<uniform> valid: Valid;
  </xmp>
</div>

<div class='example wgsl global-scope' heading='Satisfying stride requirements for uniform address space'>
  <xmp highlight='rust'>
    struct small_stride {
      a: array<f32,8>; // stride 4
    }
    @group(0) @binding(0) var<uniform> invalid: small_stride; // Invalid

    struct wrapped_f32 {
      @size(16) elem: f32;
    }
    struct big_stride {
      a: array<wrapped_f32,8>; // stride 16
    }
    @group(0) @binding(1) var<uniform> valid: big_stride;     // Valid
  </xmp>
</div>

## Memory View Types ## {#memory-view-types}

In addition to calculating with [=plain types|plain=] values, a WGSL program will
also often read values from memory or write values to memory, via [=memory access=] operations.
Each memory access is performed via a [=memory view=].

A <dfn noexport>memory view</dfn> comprises:
* a set of [=memory locations=] in a particular [=address space=],
* an interpretation of the contents of those locations as a WGSL [=type=], and
* an [=access mode=].

The access mode of a memory view must be supported by the address space. See [[#address-space]].

WGSL has two kinds of types for representing memory views:
[=reference types=] and [=pointer types=].

<table class='data'>
  <thead>
    <tr><th>Constraint<th>Type<th>Description
  </thead>
  <tr algorithm="memory reference type">
    <td style="width:25%">|S| is a [=address space=],<br>|T| is a [=storable=] type,<br>|A| is an [=access mode=]
    <td>ref&lt;|S|,|T|,|A|&gt;
    <td>The <dfn noexport>reference type</dfn>
        identified with the set of [=memory views=] for memory locations in |S| holding values of type |T|,
        supporting memory accesses described by mode |A|.<br>
        In this context |T| is known as the <dfn noexport>store type</dfn>.<br>
        Reference types are not written in WGSL program source;
        instead they are used to analyze a WGSL program.
  <tr algorithm="pointer type">
    <td>|S| is a [=address space=],<br>|T| is a [=storable=] type,<br>|A| is an [=access mode=]
    <td>ptr&lt;|S|,|T|,|A|&gt;
    <td>The <dfn noexport>pointer type</dfn>
        identified with the set of [=memory views=] for memory locations in |S| holding values of type |T|,
        supporting memory accesses described by mode |A|.<br>
        In this context |T| is known as the <dfn noexport>pointee type</dfn>.<br>
        Pointer types may appear in WGSL program source.
</table>

When *analyzing* a WGSL program, reference and pointer types are fully parameterized by
an address space, a storable type, and an access mode.
In code examples in this specification, the comments show this fully parameterized form.

However, in WGSL *source* text:
* Reference types must not appear.
* Pointer types may appear.  A pointer type is spelled with parameterization by:
    * address space,
    * store type, and
    * sometimes by access mode, as specified in [[#access-mode-defaults]].

<div class='example wgsl' heading='Pointer type'>
  <xmp highlight='rust'>
    fn my_function(
      /* 'ptr<function,i32,read_write>' is the type of a pointer value that references
         memory for keeping an 'i32' value, using memory locations in the 'function'
         address space.  Here 'i32' is the pointee type.
         The implied access mode is 'read_write'. See below for access mode defaults. */
      ptr_int: ptr<function,i32>,

      // 'ptr<private,array<f32,50>,read_write>' is the type of a pointer value that
      // refers to memory for keeping an array of 50 elements of type 'f32', using
      // memory locations in the 'private' address space.
      // Here the pointee type is 'array<f32,50>'.
      // The implied access mode is 'read_write'. See below for access mode defaults.
      ptr_array: ptr<private, array<f32, 50>>
    ) { }
  </xmp>
</div>

Reference types and pointer types are both sets of memory views:
a particular memory view is associated with a unique reference value and also a unique pointer value:

<blockquote algorithm="pointer reference correspondence">
Each pointer value |p| of type ptr&lt;|S|,|T|,|A|&gt; corresponds to a unique reference value |r| of type ref&lt;|S|,|T|,|A|&gt;,
and vice versa,
where |p| and |r| describe the same memory view.
</blockquote>

### Access Mode Defaults ### {#access-mode-defaults}

The access mode for a memory view is often determined by context:

* The [=address spaces/storage=] address space supports both [=access/read=] and [=access/read_write=] access modes.
* Each other address space supports only one access mode, as described in the <a href="#address-space-table">address space</a> table.

When writing a [=variable declaration=] or a [=pointer type=] in WGSL source:
* For the [=address spaces/storage=] address space, the access mode is optional, and defaults to [=access/read=].
* For other address spaces, the access mode must not be written.

### Originating Variable ### {#originating-variable-section}

In WGSL a reference value always corresponds to the memory view
for some or all of the memory locations for some variable.
This defines the <dfn noexport>originating variable</dfn> for the reference value.

A pointer value always corresponds to a reference value, and so the originating variable
of a pointer is the same as the originating variable of the corresponding reference.

Note: The originating variable is a dynamic concept.
The originating variable for a formal parameter of a function depends on the
[=call site|call sites=] for the function.
Different call sites may supply pointers into different originating variables.

If a reference or pointer access is out of bounds, an <dfn noexport>invalid
memory reference</dfn> is produced.
[=Load Rule|Loads=] from an invalid reference return one of:
    * a value from any [=memory locations|memory location(s)=] of the [[WebGPU#buffers|WebGPU buffer]]
        bound to the [=originating variable=]
    * the [=zero value=] for store type of the reference
    * if the loaded value is a vector, the value (0, 0, 0, x), where x is:
        * 0, 1, or the maximum positive value for integer components
        * 0.0 or 1.0 for floating-point components
[=statement/assignment|Stores=] to an invalid reference may either:
    * store the value to any [=memory locations|memory location(s)=] of the
        [[WebGPU#buffers|WebGPU buffer]] bound to the [=originating variable=]
    * not be executed
[[#atomic-rmw|Read-modify-write atomics]] that operate on an invalid memory
reference must load and store from the same [=memory locations|memory
locations=] if they access memory.

### Use Cases for References and Pointers ### {#ref-ptr-use-cases}

References and pointers are distinguished by how they are used:

* The type of a [=variable=] is a reference type.
* The [=address-of=] operation (unary `&`) converts a reference value to its corresponding pointer value.
* The [=indirection=] operation (unary `*`) converts a pointer value to its corresponding reference value.
* A [=let declaration=] can be of pointer type, but not of reference type.
* A [=formal parameter=] can be of pointer type, but not of reference type.
* A [=simple assignment=] statement performs a [=write access=] to update the contents of memory via a reference, where:
    * The [=left-hand side=] of the assignment statement must be of reference type, with access mode [=access/write=] or [=access/read_write=].
    * The [=right-hand side=] of the assignment statement must evaluate to the store type of the left-hand side.
* The <dfn noexport>Load Rule</dfn>: Inside a function, a reference is automatically dereferenced (read from) to satisfy type rules:
    * In a function, when a reference expression |r| with store type |T| is used in a statement or an expression, where
    * |r| has an access mode of [=access/read=] or [=access/read_write=], and
    * The only potentially matching type rules require |r| to have a value of type |T|, then
    * That type rule requirement is considered to have been met, and
    * The result of evaluating |r| in that context is the value (of type |T|) stored in the memory locations
        referenced by |r| at the time of evaluation.
        That is, a [=read access=] is performed to produce the result value.

Defining references in this way enables simple idiomatic use of variables:

<div class='example wgsl' heading='Reference types enable simple use of variables'>
  <xmp highlight='rust'>
    @stage(compute)
    fn main() {
      // 'i' has reference type ref<function,i32,read_write>
      // The memory locations for 'i' store the i32 value 0.
      var i: i32 = 0;

      // 'i + 1' can only match a type rule where the 'i' subexpression is of type i32.
      // So the expression 'i + 1' has type i32, and at evaluation, the 'i' subexpression
      // evaluates to the i32 value stored in the memory locations for 'i' at the time
      // of evaluation.
      let one: i32 = i + 1;

      // Update the value in the locations referenced by 'i' so they hold the value 2.
      i = one + 1;

      // Update the value in the locations referenced by 'i' so they hold the value 5.
      // The evaluation of the right-hand-side occurs before the assignment takes effect.
      i = i + 3;
    }
  </xmp>
</div>

<div class='example wgsl' heading='Returning a reference returns the value loaded via the reference'>
  <xmp highlight='rust'>
    var<private> age: i32;
    fn get_age() -> i32 {
      // The type of the expression in the return statement must be 'i32' since it
      // must match the declared return type of the function.
      // The 'age' expression is of type ref<private,i32,read_write>.
      // Apply the Load Rule, since the store type of the reference matches the
      // required type of the expression, and no other type rule applies.
      // The evaluation of 'age' in this context is the i32 value loaded from the
      // memory locations referenced by 'age' at the time the return statement is
      // executed.
      return age;
    }

    fn caller() {
      age = 21;
      // The copy_age constant will get the i32 value 21.
      let copy_age: i32 = get_age();
    }
  </xmp>
</div>

Defining pointers in this way enables two key use cases:

* Using a let declaration with pointer type, to form a short name for part of the contents of a variable.
* Using a formal parameter of a function to refer to the memory of a variable that is accessible to the [=calling function=].
    * The call to such a function must supply a pointer value for that operand.
        This often requires using an [=address-of=] operation (unary `&`) to get a pointer to the variable's contents.

Note: The following examples use WGSL features explained later in this specification.

<div class='example wgsl' heading='Using a pointer as a short name for part of a variable'>
  <xmp highlight='rust'>
    struct Particle {
      position: vec3<f32>;
      velocity: vec3<f32>;
    }
    struct System {
      active_index: i32;
      timestep: f32;
      particles: array<Particle,100>;
    }
    @group(0) @binding(0) var<storage,read_write> system: System;

    @stage(compute)
    fn main() {
      // Form a pointer to a specific Particle in storage memory.
      let active_particle: ptr<storage,Particle> =
          &system.particles[system.active_index];

      let delta_position: vec3<f32> = (*active_particle).velocity * system.timestep;
      let current_position: vec3<f32>  = (*active_particle).position;
      (*active_particle).position = delta_position + current_position;
    }
  </xmp>
</div>

<div class='example wgsl' heading='Using a pointer as a formal parameter'>
  <xmp highlight='rust'>
    fn add_one(x: ptr<function,i32>) {
      /* Update the locations for 'x' to contain the next higher integer value,
         (or to wrap around to the largest negative i32 value).
         On the left-hand side, unary '*' converts the pointer to a reference that
         can then be assigned to. It has a read_write access mode, by default.
         /* On the right-hand side:
            - Unary '*' converts the pointer to a reference, with a read_write
              access mode.
            - The only matching type rule is for addition (+) and requires '*x' to
              have type i32, which is the store type for '*x'.  So the Load Rule
              applies and '*x' evaluates to the value stored in the memory for '*x'
              at the time of evaluation, which is the i32 value for 0.
            - Add 1 to 0, to produce a final value of 1 for the right-hand side. */
         Store 1 into the memory for '*x'. */
      *x = *x + 1;
    }

    @stage(compute)
    fn main() {
      var i: i32 = 0;

      // Modify the contents of 'i' so it will contain 1.
      // Use unary '&' to get a pointer value for 'i'.
      // This is a clear signal that the called function has access to the memory
      // for 'i', and may modify it.
      add_one(&i);
      let one: i32 = i;  // 'one' has value 1.
    }
  </xmp>
</div>

### Forming Reference and Pointer Values ### {#forming-references-and-pointers}

A reference value is formed in one of the following ways:

* The [=identifier=] [=resolves|resolving=] to an [=in scope|in-scope=] variable *v* denotes the reference value for *v*'s memory.
    * The resolved variable is the [=originating variable=] for the reference.
* Use the [=indirection=] (unary `*`) operation on a pointer.
    * The originating variable of the result is defined as the originating variable of the pointer.
* Use a <dfn noexport>composite reference component expression</dfn>.
    In each case the originating variable of the result is defined as the originating variable of the
    original reference.
    * Given a reference with a vector store type, appending a single-letter vector access phrase
        results in a reference to the named component of the vector.
        See [[#component-reference-from-vector-reference]].
    * Given a reference with a vector store type, appending an array index access phrase
        results in a reference to the indexed component of the vector.
        See [[#component-reference-from-vector-reference]].
    * Given a reference with a matrix store type, appending an array index access phrase
        results in a reference to the indexed column vector of the matrix.
        See [[#matrix-access-expr]].
    * Given a reference with an array store type, appending an array index access phrase
        results in a reference to the indexed element of the array.
        See [[#array-access-expr]].
    * Given a reference with a structure store type, appending a member access phrase
        results in a reference to the named member of the structure.
        See [[#struct-access-expr]].

In all cases, the access mode of the result is the same as the access mode of the original reference.

<div class='example wgsl' heading='Component reference from a composite reference'>
  <xmp highlight='rust'>
    struct S {
        age: i32;
        weight: f32;
    }
    var<private> person: S;
    // Uses of 'person' denote the reference to the memory underlying the variable,
    // and will have type ref<private,S,read_write>.

    fn f() {
        var uv: vec2<f32>;
        // Uses of 'uv' denote the reference to the memory underlying the variable,
        // and will have type ref<function,vec2<f32>,read_write>.

        // Evaluate the left-hand side of the assignment:
        //   Evaluate 'uv.x' to yield a reference:
        //   1. First evaluate 'uv', yielding a reference to the memory for
        //      the 'uv' variable. The result has type ref<function,vec2<f32>,read_write>.
        //   2. Then apply the '.x' vector access phrase, yielding a reference to
        //      the memory for the first component of the vector pointed at by the
        //      reference value from the previous step.
        //      The result has type ref<function,f32,read_write>.
        // Evaluating the right-hand side of the assignment yields the f32 value 1.0.
        // Store the f32 value 1.0 into the storage memory locations referenced by uv.x.
        uv.x = 1.0;

        // Evaluate the left-hand side of the assignment:
        //   Evaluate 'uv[1]' to yield a reference:
        //   1. First evaluate 'uv', yielding a reference to the memory for
        //      the 'uv' variable. The result has type ref<function,vec2<f32>,read_write>.
        //   2. Then apply the '[1]' array index phrase, yielding a reference to
        //      the memory for second component of the vector referenced from
        //      the previous step.  The result has type ref<function,f32,read_write>.
        // Evaluating the right-hand side of the assignment yields the f32 value 2.0.
        // Store the f32 value 2.0 into the storage memory locations referenced by uv[1].
        uv[1] = 2.0;

        var m: mat3x2<f32>;
        // When evaluating 'm[2]':
        // 1. First evaluate 'm', yielding a reference to the memory for
        //    the 'm' variable. The result has type ref<function,mat3x2<f32>,read_write>.
        // 2. Then apply the '[2]' array index phrase, yielding a reference to
        //    the memory for the third column vector pointed at by the reference
        //    value from the previous step.
        //    Therefore the 'm[2]' expression has type ref<function,vec2<f32>,read_write>.
        // The 'let' declaration is for type vec2<f32>, so the declaration
        // statement requires the initializer to be of type vec2<f32>.
        // The Load Rule applies (because no other type rule can apply), and
        // the evaluation of the initializer yields the vec2<f32> value loaded
        // from the memory locations referenced by 'm[2]' at the time the declaration
        // is executed.
        let p_m_col2: vec2<f32> = m[2];

        var A: array<i32,5>;
        // When evaluating 'A[4]'
        // 1. First evaluate 'A', yielding a reference to the memory for
        //    the 'A' variable. The result has type ref<function,array<i32,5>,read_write>.
        // 2. Then apply the '[4]' array index phrase, yielding a reference to
        //    the memory for the fifth element of the array referenced by
        //    the reference value from the previous step.
        //    The result value has type ref<function,i32,read_write>.
        // The let declaration requires the right-hand-side to be of type i32.
        // The Load Rule applies (because no other type rule can apply), and
        // the evaluation of the initializer yields the i32 value loaded from
        // the memory locations referenced by 'A[5]' at the time the declaration
        // is executed.
        let A_4_value: i32 = A[4];

        // When evaluating 'person.weight'
        // 1. First evaluate 'person', yielding a reference to the memory for
        //    the 'person' variable declared at module scope.
        //    The result has type ref<private,S,read_write>.
        // 2. Then apply the '.weight' member access phrase, yielding a reference to
        //    the memory for the second member of the memory referenced by
        //    the reference value from the previous step.
        //    The result has type ref<private,f32,read_write>.
        // The let declaration requires the right-hand-side to be of type f32.
        // The Load Rule applies (because no other type rule can apply), and
        // the evaluation of the initializer yields the f32 value loaded from
        // the memory locations referenced by 'person.weight' at the time the
        // declaration is executed.
        let person_weight: f32 = person.weight;
    }
  </xmp>
</div>

A pointer value is formed in one of the following ways:

* Use the [=address-of=] (unary '&') operator on a reference.
    * The originating variable of the result is defined as the originating variable of the reference.
* If a function [=formal parameter=] has pointer type, then when the function is invoked
    at runtime the uses of the formal parameter denote the pointer value
    provided to the corresponding operand at the [=call site=] in the [=calling function=].
    * The originating variable of the formal parameter (at runtime) is defined as
        the originating variable of the pointer operand at the call site.

In all cases, the access mode of the result is the same as the access mode of the original pointer.

<div class='example wgsl' heading='Pointer from a variable'>
  <xmp highlight='rust'>
    // Declare a variable in the private address space, for storing an f32 value.
    var<private> x: f32;

    fn f() {
        // Declare a variable in the function address space, for storing an i32 value.
        var y: i32;

        // The name 'x' resolves to the module-scope variable 'x',
        // and has reference type ref<private,f32,read_write>.
        // Applying the unary '&' operator converts the reference to a pointer.
        // The access mode is the same as the access mode of the original variable, so
        // the fully specified type is ptr<private,f32,read_write>.  But read_write
        // is the default access mode for function address space, so read_write does not
        // have to be spelled in this case
        let x_ptr: ptr<private,f32> = &x;

        // The name 'y' resolves to the function-scope variable 'y',
        // and has reference type ref<private,i32,read_write>.
        // Applying the unary '&' operator converts the reference to a pointer.
        // The access mode defaults to 'read_write'.
        let y_ptr: ptr<function,i32> = &y;

        // A new variable, distinct from the variable declared at module scope.
        var x: u32;

        // Here, the name 'x' resolves to the function-scope variable 'x' declared in
        // the previous statement, and has type ref<function,u32,read_write>.
        // Applying the unary '&' operator converts the reference to a pointer.
        // The access mode defaults to 'read_write'.
        let inner_x_ptr: ptr<function,u32> = &x;
    }
  </xmp>
</div>

### Comparison with References and Pointers in Other Languages ### {#pointers-other-languages}

This section is informative, not normative.

References and pointers in WGSL are more restricted than in other languages.
In particular:

* In WGSL a reference can't directly be declared as an alias to another reference or variable,
    either as a variable or as a formal parameter.
* In WGSL pointers and references are not [=storable=].
    That is, the content of a WGSL variable may not contain a pointer or a reference.
* In WGSL a function must not return a pointer or reference.
* In WGSL there is no way to convert between integer values and pointer values.
* In WGSL there is no way to forcibly change the type of a pointer value into another pointer type.
    * A composite component reference expression is different:
        it takes a reference to a composite value and yields a reference to
        one of the components or elements inside the composite value.
        These are considered different references in WGSL, even though they may
        have the same machine address at a lower level of implementation abstraction.
* In WGSL there is no way to forcibly change the type of a reference value into another reference type.
* In WGSL there is no way to change the access mode of a pointer or reference.
    * By comparison, C++ automatically converts a non-const pointer to a const pointer,
        and has a `const_cast` to convert a const value to a non-const value.
* In WGSL there is no way to allocate new memory from a "heap".
* In WGSL there is no way to explicitly destroy a variable.
    The memory for a WGSL variable becomes inaccessible only when the variable goes out of scope.

Note: From the above rules, it is not possible to form a "dangling" pointer,
i.e. a pointer that does not reference the memory for a valid (or "live")
originating variable.

## Texture and Sampler Types ## {#texture-types}

A <dfn noexport>texel</dfn> is a scalar or vector used as the smallest independently accessible element of a [=texture=].
The word *texel* is short for *texture element*.

A <dfn noexport>texture</dfn> is a collection of texels supporting special operations useful for rendering.
In WGSL, those operations are invoked via texture builtin functions.
See [[#texture-builtin-functions]] for a complete list.

A WGSL texture corresponds to a [[WebGPU#gputexture|WebGPU GPUTexture]].

A texture is either arrayed, or non-arrayed:

* A <dfn noexport>non-arrayed texture</dfn> is a grid of texels. Each texel has a unique grid coordinate.
* An <dfn noexport>arrayed texture</dfn> is a homogeneous array of grids of texels.
    In an arrayed texture, each texel is identified with its unique combination of array index and grid coordinate.

A texture has the following features:

: texel format
:: The data in each texel. See [[#texel-formats]]
:  dimensionality
:: The number of dimensions in the grid coordinates, and how the coordinates are interpreted.
    The number of dimensions is 1, 2, or 3.
    Most textures use cartesian coordinates.
    Cube textures have six square faces, and are sampled with
    a three dimensional coordinate interpreted as a direction vector from the origin toward
    the cube centered on the origin.
: size
:: The extent of grid coordinates along each dimension
: mip level count
:: The mip level count is at least 1 for sampled textures, and equal to 1 for storage textures.<br>
    <dfn>Mip level</dfn> 0 contains a full size version of the texture.
    Each successive mip level contains a filtered version of the previous mip level
    at half the size (within rounding) of the previous mip level.<br>
    When sampling a texture, an explicit or implicitly-computed level-of-detail is used
    to select the mip levels from which to read texel data.  These are then combined via
    filtering to produce the sampled value.
: arrayed
:: whether the texture is arrayed
: <dfn noexport>array size</dfn>
:: the number of homogeneous grids, if the texture is arrayed

A texture's representation is typically optimized for rendering operations.
To achieve this, many details are hidden from the programmer, including data layouts, data types, and
internal operations that cannot be expressed directly in the shader language.

As a consequence, a shader does not have direct access to the texel memory within a texture variable.
Instead, access is mediated through an opaque handle:

* Within the shader:
    * Declare a module-scope variable
        where the [=store type=] is one of the texture types described in later sections.
        The variable stores an opaque handle to the underlying texture memory, and is
        automatically placed in the [=address spaces/handle=] address space.
    * Inside a function, call one of the texture builtin functions, and provide
        the texture variable or function parameter as the builtin function's
        first parameter.
* When constructing the WebGPU pipeline, the texture variable's store type and binding
    must be compatible with the corresponding bind group layout entry.

In this way, the set of supported operations for a texture type
is determined by the availability of texture builtin functions accepting that texture type
as the first parameter.

Note: The handle stored by a texture variable cannot be changed by the shader.
That is, the variable is read-only, even if the underlying texture to which it provides
access may be mutable (e.g. a write-only storage texture).

A sampler is an opaque handle that controls how [=texel|texels=] are accessed
from a sampled texture.

A WGSL sampler maps to a [[WebGPU#gpusampler|WebGPU GPUSampler]].

Texel access is controlled via several properties of the sampler:

: addressing mode
:: Controls how texture boundaries and out-of-bounds
    coordinates are resolved.
    The addressing mode for each texture dimension can be set independently.
    See [[WebGPU#enumdef-gpuaddressmode|WebGPU GPUAddressMode]].
: filter mode
:: Controls which texels are accessed to produce the final result.
    Filtering can either use the nearest texel or interpolate between multiple
    texels.
    Multiple filter modes can be set independently.
    See [[WebGPU#enumdef-gpufiltermode|WebGPU GPUFilterMode]].
: LOD clamp
:: Controls the min and max levels of details that are accessed.
: comparison
:: Controls the type of comparison done for [=syntax/sampler_comparison|comparison sampler=].
    See [[WebGPU#enumdef-gpucomparefunction|WebGPU GPUCompareFunction]].
: max anisotropy
:: Controls the maximum anisotropy value used by the sampler.

Samplers cannot be created in WGSL programs and their state (e.g. the
properties listed above) are immutable within a shader and can only be set by
the WebGPU API.

It is a [=pipeline-creation error=] if a filtering sampler (i.e. any sampler
using interpolative filtering) is used with texture that has a non-filterable
format.

Note: The handle stored by a sampler variable cannot be changed by the shader.

### Texel Formats ### {#texel-formats}

In WGSL, certain texture types are parameterized by texel format.

A <dfn noexport>texel format</dfn> is characterized by:

: <dfn noexport>channels</dfn>
:: Each channel contains a scalar.
    A texel format has up to four channels: `r`, `g`, `b`, and `a`,
    normally corresponding to the concepts of red, green, blue, and alpha channels.
: <dfn noexport>channel format</dfn>
:: The number of bits in the channel, and how those bits are interpreted.

Each texel format in WGSL corresponds to a [[WebGPU#enumdef-gputextureformat|WebGPU GPUTextureFormat]]
with the same name.

Only certain texel formats are used in WGSL source code.
The channel formats used to define those texel formats are listed in the
<dfn dfn>Channel Formats</dfn> table.
The last column specifies the conversion from the stored channel bits to the value used in the shader.
This is also known as the <dfn noexport>channel transfer function</dfn>, or CTF.

<table class='data'>
  <caption>Channel Formats</caption>
  <thead>
    <tr><th>Channel format
        <th>Number of stored bits
        <th>Interpretation of stored bits
        <th>Shader type<td style="width:25%">Shader value
(Channel Transfer Function)
  </thead>
  <tr><td>8unorm<td>8<td>unsigned integer |v| &isinv; {0,...,255}<td>f32<td> |v| &div; 255
  <tr><td>8snorm<td>8<td>signed integer |v| &isinv; {-128,...,127}<td>f32<td> max(-1, |v| &div; 127)
  <tr><td>8uint<td>8<td>unsigned integer |v| &isinv; {0,...,255}<td>u32<td> |v|
  <tr><td>8sint<td>8<td>signed integer |v| &isinv; {-128,...,127}<td>i32<td> |v|
  <tr><td>16uint<td>16<td>unsigned integer |v| &isinv; {0,...,65535}<td>u32<td> |v|
  <tr><td>16sint<td>16<td>signed integer |v| &isinv; {-32768,...,32767}<td>i32<td> |v|
  <tr><td>16float<td>16<td>[[!IEEE-754|IEEE-754]] binary16 16-bit floating point value |v|, with 1 sign bit, 5 exponent bits, 10 mantissa bits<td>f32<td>|v|
  <tr><td>32uint<td>32<td>32-bit unsigned integer value |v|<td>u32<td>|v|
  <tr><td>32sint<td>32<td>32-bit signed integer value |v|<td>i32<td>|v|
  <tr><td>32float<td>32<td>[[!IEEE-754|IEEE-754]] binary32 32-bit floating point value |v|<td>f32<td>|v|
</table>

The texel formats listed in the
<dfn lt="storage-texel-formats">Texel Formats for Storage Textures</dfn> table
correspond to the [[WebGPU#plain-color-formats|WebGPU plain color formats]]
which support the [[WebGPU#dom-gputextureusage-storage|WebGPU STORAGE]] usage.
These texel formats are used to parameterize the storage texture types defined
in [[#texture-storage]].

When the texel format does not have all four channels, then:

* When reading the texel:
    * If the texel format has no green channel, then the second component of the shader value is 0.
    * If the texel format has no blue channel, then the third component of the shader value is 0.
    * If the texel format has no alpha channel, then the fourth component of the shader value is 1.
* When writing the texel, shader value components for missing channels are ignored.

The last column in the table below uses the format-specific
[=channel transfer function=] from the [=channel formats=] table.

<table class='data'>
  <caption>Texel Formats for Storage Textures</caption>
  <thead>
    <tr><th>Texel format
        <th>Channel format
        <th>Channels in memory order
        <th style="width:50%">Corresponding shader value
  </thead>
  <tr><td>rgba8unorm<td>8unorm<td>r, g, b, a<td>vec4&lt;f32&gt;(CTF(r), CTF(g), CTF(b), CTF(a))
  <tr><td>rgba8snorm<td>8snorm<td>r, g, b, a<td>vec4&lt;f32&gt;(CTF(r), CTF(g), CTF(b), CTF(a))
  <tr><td>rgba8uint<td>8uint<td>r, g, b, a<td>vec4&lt;u32&gt;(CTF(r), CTF(g), CTF(b), CTF(a))
  <tr><td>rgba8sint<td>8sint<td>r, g, b, a<td>vec4&lt;i32&gt;(CTF(r), CTF(g), CTF(b), CTF(a))
  <tr><td>rgba16uint<td>16uint<td>r, g, b, a<td>vec4&lt;u32&gt;(CTF(r), CTF(g), CTF(b), CTF(a))
  <tr><td>rgba16sint<td>16sint<td>r, g, b, a<td>vec4&lt;i32&gt;(CTF(r), CTF(g), CTF(b), CTF(a))
  <tr><td>rgba16float<td>16float<td>r, g, b, a<td>vec4&lt;f32&gt;(CTF(r), CTF(g), CTF(b), CTF(a))
  <tr><td>r32uint<td>32uint<td>r<td>vec4&lt;u32&gt;(CTF(r), 0u, 0u, 1u)
  <tr><td>r32sint<td>32sint<td>r<td>vec4&lt;i32&gt;(CTF(r), 0, 0, 1)
  <tr><td>r32float<td>32float<td>r<td>vec4&lt;f32&gt;(CTF(r), 0.0, 0.0, 1.0)
  <tr><td>rg32uint<td>32uint<td>r, g<td>vec4&lt;u32&gt;(CTF(r), CTF(g), 0.0, 1.0)
  <tr><td>rg32sint<td>32sint<td>r, g<td>vec4&lt;i32&gt;(CTF(r), CTF(g), 0.0, 1.0)
  <tr><td>rg32float<td>32float<td>r, g<td>vec4&lt;f32&gt;(CTF(r), CTF(g), 0.0, 1.0)
  <tr><td>rgba32uint<td>32uint<td>r, g, b, a<td>vec4&lt;u32&gt;(CTF(r), CTF(g), CTF(b), CTF(a))
  <tr><td>rgba32sint<td>32sint<td>r, g, b, a<td>vec4&lt;i32&gt;(CTF(r), CTF(g), CTF(b), CTF(a))
  <tr><td>rgba32float<td>32float<td>r, g, b, a<td>vec4&lt;f32&gt;(CTF(r), CTF(g), CTF(b), CTF(a))
</table>

### Sampled Texture Types ### {#sampled-texture-type}

<pre class='def'>
`texture_1d<type>`
`texture_2d<type>`
`texture_2d_array<type>`
`texture_3d<type>`
`texture_cube<type>`
`texture_cube_array<type>`
</pre>
* type must be `f32`, `i32` or `u32`
* The parameterized type for the images is the type after conversion from sampling.
    E.g. you can have an image with texels with 8bit unorm components, but when you sample
    them you get a 32-bit float result (or vec-of-f32).

### Multisampled Texture Types ### {#multisampled-texture-type}

<pre class='def'>
`texture_multisampled_2d<type>`
</pre>
* type must be `f32`, `i32` or `u32`

### External Sampled Texture Types ### {#external-texture-type}

<pre class='def'>
`texture_external`
</pre>

`texture_external` is an opaque 2d float-sampled texture type similar to `texture_2d<f32>`
but potentially with a different representation.
It can be read using `textureLoad` or `textureSampleLevel`,
which handle these different representations opaquely.

See [[WebGPU#GPUExternalTexture]].

### Storage Texture Types ### {#texture-storage}

A <dfn noexport>storage texture</dfn> supports accessing a single texel without the use of a sampler.

* A <dfn noexport>write-only storage texture</dfn>
     supports writing a single texel, with automatic conversion of the shader value to a
     stored texel value.

A storage texture type must be parameterized by one of the
[=storage-texel-format|texel formats for storage textures=].
The texel format determines the conversion function as specified in [[#texel-formats]].

For a write-only storage texture the *inverse* of the conversion function is used to convert the shader value to
the stored texel.

See [[#texture-builtin-functions]].

TODO(dneto): Move description of the conversion to the builtin function that actually does the reading.

<pre class='def'>
`texture_storage_1d<texel_format,access>`
`texture_storage_2d<texel_format,access>`
`texture_storage_2d_array<texel_format,access>`
`texture_storage_3d<texel_format,access>`
</pre>

* `texel_format` must be one of the texel types specified in [=storage-texel-formats=]
* `access` must be [=access/write=].

### Depth Texture Types ### {#texture-depth}
<pre class='def'>
`texture_depth_2d`
`texture_depth_2d_array`
`texture_depth_cube`
`texture_depth_cube_array`
`texture_depth_multisampled_2d`
</pre>

### Sampler Type ### {#sampler-type}

A <dfn>sampler</dfn> mediates access to a sampled texture or a depth texture, by performing a combination of:
* coordinate transformation.
* optionally modifying mip-level selection.
* for a sampled texture, optionally filtering retrieved texel values.
* for a depth texture, determining the comparison function applied to the retrieved texel.

<table class='data'>
  <thead>
    <tr><th>Type<th>Description
  </thead>
  <tr algorithm="sampler type">
    <td>sampler
    <td>Sampler. Mediates access to a sampled texture.</td>
  <tr algorithm="comparison sampler type">
    <td>sampler_comparison
    <td>Comparison sampler.
        Mediates access to a depth texture.</td>
</table>

Samplers are parameterized when created in the WebGPU API.
They cannot be modified by a WGSL program.

Samplers can only be used by the [[#texture-builtin-functions|texture builtin functions]].

<pre class='def'>
sampler
sampler_comparison
</pre>

### Texture Types Grammar ### {#texture-types-grammar}

<div class='syntax' noexport='true'>
  <dfn for=syntax>texture_sampler_types</dfn> :

    | [=syntax/sampler_type=]

    | [=syntax/depth_texture_type=]

    | [=syntax/sampled_texture_type=] [=syntax/less_than=] [=syntax/type_decl=] [=syntax/greater_than=]

    | [=syntax/multisampled_texture_type=] [=syntax/less_than=] [=syntax/type_decl=] [=syntax/greater_than=]

    | [=syntax/storage_texture_type=] [=syntax/less_than=] [=syntax/texel_format=] [=syntax/comma=] [=syntax/access_mode=] [=syntax/greater_than=]
</div>
<div class='syntax' noexport='true'>
  <dfn for=syntax>sampler_type</dfn> :

    | [=syntax/sampler=]

    | [=syntax/sampler_comparison=]
</div>
<div class='syntax' noexport='true'>
  <dfn for=syntax>sampled_texture_type</dfn> :

    | [=syntax/texture_1d=]

    | [=syntax/texture_2d=]

    | [=syntax/texture_2d_array=]

    | [=syntax/texture_3d=]

    | [=syntax/texture_cube=]

    | [=syntax/texture_cube_array=]
</div>
<div class='syntax' noexport='true'>
  <dfn for=syntax>multisampled_texture_type</dfn> :

    | [=syntax/texture_multisampled_2d=]
</div>
<div class='syntax' noexport='true'>
  <dfn for=syntax>storage_texture_type</dfn> :

    | [=syntax/texture_storage_1d=]

    | [=syntax/texture_storage_2d=]

    | [=syntax/texture_storage_2d_array=]

    | [=syntax/texture_storage_3d=]
</div>
<div class='syntax' noexport='true'>
  <dfn for=syntax>depth_texture_type</dfn> :

    | [=syntax/texture_depth_2d=]

    | [=syntax/texture_depth_2d_array=]

    | [=syntax/texture_depth_cube=]

    | [=syntax/texture_depth_cube_array=]

    | [=syntax/texture_depth_multisampled_2d=]
</div>
<div class='syntax' noexport='true'>
  <dfn for=syntax>texel_format</dfn> :

    | `'rgba8unorm'`

    | `'rgba8snorm'`

    | `'rgba8uint'`

    | `'rgba8sint'`

    | `'rgba16uint'`

    | `'rgba16sint'`

    | `'rgba16float'`

    | `'r32uint'`

    | `'r32sint'`

    | `'r32float'`

    | `'rg32uint'`

    | `'rg32sint'`

    | `'rg32float'`

    | `'rgba32uint'`

    | `'rgba32sint'`

    | `'rgba32float'`
</div>

## Type Aliases ## {#type-aliases}

A <dfn noexport>type alias</dfn> declares a new name for an existing type.
The declaration must appear at [=module scope=], and its [=scope=] is the entire program.

<div class='syntax' noexport='true'>
  <dfn for=syntax>type_alias_decl</dfn> :

    | [=syntax/type=] [=syntax/ident=] [=syntax/equal=] [=syntax/type_decl=]
</div>

<div class='example wgsl global-scope' heading='Type Alias'>
  <xmp>
    type Arr = array<i32, 5>;

    type RTArr = array<vec4<f32>>;

    type single = f32;     // Declare an alias for f32
    let pi_approx: single = 3.1415;
    fn two_pi() -> single {
      return single(2) * pi_approx;
    }
  </xmp>
</div>

## Type Declaration Grammar ## {#type-declarations}

<div class='syntax' noexport='true'>
  <dfn for=syntax>type_decl</dfn> :

    | [=syntax/ident=]

    | [=syntax/bool=]

    | [=syntax/float32=]

    | [=syntax/int32=]

    | [=syntax/uint32=]

    | [=syntax/vec2=] [=syntax/less_than=] [=syntax/type_decl=] [=syntax/greater_than=]

    | [=syntax/vec3=] [=syntax/less_than=] [=syntax/type_decl=] [=syntax/greater_than=]

    | [=syntax/vec4=] [=syntax/less_than=] [=syntax/type_decl=] [=syntax/greater_than=]

    | [=syntax/pointer=] [=syntax/less_than=] [=syntax/address_space=] [=syntax/comma=] [=syntax/type_decl=] ( [=syntax/comma=] [=syntax/access_mode=] ) ? [=syntax/greater_than=]

    | [=syntax/array_type_decl=]

    | [=syntax/mat2x2=] [=syntax/less_than=] [=syntax/type_decl=] [=syntax/greater_than=]

    | [=syntax/mat2x3=] [=syntax/less_than=] [=syntax/type_decl=] [=syntax/greater_than=]

    | [=syntax/mat2x4=] [=syntax/less_than=] [=syntax/type_decl=] [=syntax/greater_than=]

    | [=syntax/mat3x2=] [=syntax/less_than=] [=syntax/type_decl=] [=syntax/greater_than=]

    | [=syntax/mat3x3=] [=syntax/less_than=] [=syntax/type_decl=] [=syntax/greater_than=]

    | [=syntax/mat3x4=] [=syntax/less_than=] [=syntax/type_decl=] [=syntax/greater_than=]

    | [=syntax/mat4x2=] [=syntax/less_than=] [=syntax/type_decl=] [=syntax/greater_than=]

    | [=syntax/mat4x3=] [=syntax/less_than=] [=syntax/type_decl=] [=syntax/greater_than=]

    | [=syntax/mat4x4=] [=syntax/less_than=] [=syntax/type_decl=] [=syntax/greater_than=]

    | [=syntax/atomic=] [=syntax/less_than=] [=syntax/type_decl=] [=syntax/greater_than=]

    | [=syntax/texture_sampler_types=]
</div>

When the type declaration is an [=identifier=], then the expression must be in scope of a
[=declaration=] of the identifier as a type alias or structure type.

<div class='example' heading="Type Declarations">
  <xmp>
    identifier
      Allows to specify types created by the type command

    bool
    f32
    i32
    u32
    vec2<f32>
    array<f32, 4>
    array<f32>
    mat2x3<f32>
  </xmp>
</div>

<div class='example wgsl global-scope' heading='Access modes for buffers'>
  <xmp>
    // Storage buffers
    @group(0) @binding(0)
    var<storage,read> buf1: Buffer;       // Can read, cannot write.
    @group(0) @binding(0)
    var<storage> buf2: Buffer;            // Can read, cannot write.
    @group(0) @binding(1)
    var<storage,read_write> buf3: Buffer; // Can both read and write.

    // Uniform buffer. Always read-only, and has more restrictive layout rules.
    struct ParamsTable {weight: f32;}
    @group(0) @binding(2)
    var<uniform> params: ParamsTable;     // Can read, cannot write.
  </xmp>
</div>

# Variable and Value Declarations # {#var-and-value}

## Value Declarations ## {#value-decls}

WGSL authors can declare names for immutable values using one of the following methods:

  * [=let declarations=]
  * [=override declarations=]

Value declarations do not have any associated storage.
That is, there are no [=memory locations=] associated with the declaration.

### `let` Declarations ### {#let-decls}

A <dfn noexport>let declaration</dfn> specifies a name for a value.
Once the value for a let-declaration is computed, it is immutable.
When an [=identifier=] use [=resolves=] to a let-declaration, the identifier denotes that value.

When a `let` identifier is declared without an explicitly specified type,
e.g. `let foo = 4`, the type is automatically inferred from the expression to the right of the equals token (`=`).
When the type is specified, e.g `let foo: i32 = 4`, the initializer expression must evaluate to that type.

Some rules about `let`-declarations depend on where the declaration appears.
See [[#module-constants]] and [[#function-scope-variables]].

<div class='example wgsl let declaration at module-scope' heading='let-declared constants at module scope'>
  <xmp highlight='rust'>
    // 'blockSize' denotes the i32 value 1024.
    let blockSize: i32 = 1024;

    // 'row_size' denotes the u32 value 16u.  The type is inferred.
    let row_size = 16u;
  </xmp>
</div>

### `override` Declarations ### {#override-decls}

An <dfn noexport>override declaration</dfn> specifies a name for a
[=pipeline-overridable=] constant value.
The value of a <dfn noexport>pipeline-overridable</dfn> constant is fixed at
pipeline-creation time.
The value is the one specified by the WebGPU pipeline-creation method, if
specified, and otherwise is the value of its initializer expression.
When an [=identifier=] use [=resolves=] to a override-declaration, the identifier denotes that value.
`override`-declarations must meet the following restrictions:

  * The declaration must only occur at [=module scope=].
  * The declaration must have at least one of a declared type, an initializer
      expression, or both.
  * The declared type, if present, must be a [=scalar=].
  * The initializer expression, if present, must:
      * evaluate to a [=scalar=] type.
      * evaluate to the declared type if it is present.
      * be composed only [=syntax/const_expression|const_expressions=] or
          expressions where all identifiers [=resolve=] to overridable constants.
  * If the declaration has the [=attribute/id=] applied, the literal operand is
      known as the <dfn noexport>pipeline constant ID</dfn>, and must be an
      integer value between 0 and 65535.
  * Pipeline constant IDs must be unique within the WGSL program: Two `override`-declarations
    must not use the same pipeline constant ID.
  * The application can specify its own value for the constant at pipeline-creation time.
    The pipeline creation API accepts a mapping from overridable constant to a
    value of the constant's type.
    The constant is identified by a <dfn export>pipeline-overridable constant identifier string</dfn>,
    which is the base-10 representation of the [=pipeline constant ID=] if specified, and otherwise
    the declared [=name=] of the constant.
  * The <dfn export>pipeline-overridable constant has a default value</dfn> if
    its declaration has an initializer expression.
    If it doesn't, a value must be provided at pipeline-creation time.

<div class='example wgsl global-scope' heading='Module constants, pipeline-overrideable'>
  <xmp>
    @id(0)    override has_point_light: bool = true;  // Algorithmic control
    @id(1200) override specular_param: f32 = 2.3;     // Numeric control
    @id(1300) override gain: f32;                     // Must be overridden
              override width: f32 = 0.0;              // Specified at the API level using
                                                      // the name "width".
              override depth: f32;                    // Specified at the API level using
                                                      // the name "depth".
                                                      // Must be overridden.
              override height = 2 * depth;            // The default value
                                                      // (if not set at the API level),
                                                      // depends on another
                                                      // overridable constant.

  </xmp>
</div>

## `var` Declarations ## {#var-decls}

A <dfn noexport>variable</dfn> is a named reference to memory that can contain a value of a
particular [=storable=] type.

Two types are associated with a variable: its [=store type=] (the type of value
that may be placed in the referenced memory) and its [=reference type=] (the type
of the variable itself).
If a variable has store type *T*, [=address space=] *S*, and [=access mode=] *A*,
then its reference type is ref&lt;*S*,*T*,*A*&gt;.

A <dfn noexport>variable declaration</dfn>:

* Specifies the variable’s name.
* Specifies the [=address space=], [=store type=], and [=access mode=].
    Together these comprise the variable's [=reference type=].
* Ensures the execution environment allocates memory for a value of the store type, in the specified address space,
    supporting the given access mode, for the [=lifetime=] of the variable.
* Optionally has an *initializer* expression, if the variable is in the [=address spaces/private=] or [=address spaces/function=] address spaces.
    If present, the initializer expression must evaluate to the variable's store type.

When an [=identifier=] use [=resolves=] to a variable declaration,
the identifier is an expression denoting the reference [=memory view=] for the variable's memory,
and its type is the variable's [=reference type=].
See [[#var-identifier-expr]].

See [[#module-scope-variables]] and [[#function-scope-variables]] for rules about where
a variable in a particular address space can be declared,
and when the address space decoration is required, optional, or forbidden.

The access mode always has a default, and except for variables in the [=address spaces/storage=] address space,
must not be written in WGSL source text. See [[#access-mode-defaults]].

The <dfn noexport>lifetime</dfn> of a variable is the period during shader
execution for which the variable exists.
The lifetime of a [=module scope=] variable is the entire execution of the shader stage.

For a [=function scope=] variable, each invocation has its own independent
version of the variable.
The lifetime of the variable is determined by its scope:
* It begins when control enters the variable's declaration.
* It includes the entire execution of any function called from within the variable's scope.
* It ends when control leaves the variable's scope, other than calling a function from
    within the variable's scope.

Two variables with overlapping lifetimes will not have [=overlap|overlapping memory=].
When a variable's lifetime ends, its memory may be used for another variable.

When a variable is created, its memory contains an initial value as follows:

* For variables in the [=address spaces/private=] or [=address spaces/function=] address spaces:
    * The [=zero value=] for the store type, if the variable declaration has no initializer.
    * Otherwise, it is the result of evaluating the initializer expression at that point in the program execution.
* For variables in the [=address spaces/workgroup=] address space:
    * When the store type is [=constructible=], the [=zero value=] for the store type.
    * Otherwise, the store type is an array of construcible elements, and each element
        is initialized to its zero value.
* Variables in other address spaces are [=resources=]
    set by bindings in the [=draw command=] or [=dispatch command=].

Consider the following snippet of WGSL:
<div class='example wgsl function-scope' heading='Variable initial values'>
  <xmp highlight='rust'>
    var i: i32;         // Initial value is 0.  Not recommended style.
    loop {
      var twice: i32 = 2 * i;   // Re-evaluated each iteration.
      i++;
      if i == 5 { break; }
    }
  </xmp>
</div>
The loop body will execute five times.
Variable `i` will take on values 0, 1, 2, 3, 4, 5, and variable `twice` will take on values 0, 2, 4, 6, 8.

Consider the following snippet of WGSL:
<div class='example wgsl function-scope' heading='Reading a variable multiple times'>
  <xmp highlight='rust'>
    var x: f32 = 1.0;
    let y = x * x + x + 1;
  </xmp>
</div>
Because `x` is a variable, all accesses to it turn into load and store operations.
However, it is expected that either the browser or the driver optimizes this intermediate representation
such that the redundant loads are eliminated.

## Module Scope Variables ## {#module-scope-variables}

A variable declared outside all functions is at [=module scope=].
The variable name is [=in scope=] for the entire program.

Variables at [=module scope=] are restricted as follows:

* The variable must not be in the [=address spaces/function=] address space.
* A variable in the [=address spaces/private=], [=address spaces/workgroup=], [=address spaces/uniform=], or [=address spaces/storage=] address spaces:
    * Must be declared with an explicit address space decoration.
    * Must use a [=store type=] as described in [[#address-space]].
* If the [=store type=] is a texture type or a sampler type, then the variable declaration must not
    have an address space decoration.  The address space will always be [=address spaces/handle=].

A variable in the [=address spaces/uniform=] address space is a <dfn noexport>uniform buffer</dfn> variable.
Its [=store type=] must be a [=host-shareable=] [=constructible=] type,
and must satisfy [address space layout constraints](#address-space-layout-constraints).

A variable in the [=address spaces/storage=] address space is a <dfn noexport>storage buffer</dfn> variable.
Its [=store type=] must be a [=host-shareable=] type
and must satisfy [address space layout constraints](#address-space-layout-constraints).
The variable may be declared with a [=access/read=] or [=access/read_write=] access mode; the default is [=access/read=].

As described in [[#resource-interface]],
uniform buffers, storage buffers, textures, and samplers form the
[=resource interface of a shader=].
Such variables are declared with [=attribute/group=] and [=attribute/binding=] decorations.


WGSL defines the following attributes that can be applied to global variables:
 * [=attribute/binding=]
 * [=attribute/group=]

<div class='example wgsl global-scope' heading="Module scope variable declarations">
  <xmp>
    var<private> decibels: f32;
    var<workgroup> worklist: array<i32,10>;

    struct Params {
      specular: f32;
      count: i32;
    }
    @group(0) @binding(2)
    var<uniform> param: Params;    // A uniform buffer

    // A storage buffer, for reading and writing
    @group(0) @binding(0)
    var<storage,read_write> pbuf: array<vec2<f32>>;

    // Textures and samplers are always in "handle" space.
    @group(0) @binding(1)
    var filter_params: sampler;
  </xmp>
</div>

## Module Constants ## {#module-constants}

A [[#value-decls|value declaration]] appearing outside all functions declares a
[=module scope|module-scope=] constant.
The name is [=in scope=] for the entire program.

A module-scope [=let declaration|let-declared=] constant must be of
[=constructible=] type.
An initializer expression must be present for a module-scope `let`-declaration
and the name denotes the value of that expression.

TODO: define creation-time constant that allows const_expression and module
scope let declarations.

A [=pipeline-overridable=] constant must be one of the [=scalar=] types.
An initializer expression is optional for pipeline-overridable constants.

<div class='example wgsl global-scope' heading='Module constants'>
  <xmp>
    // The golden ratio.
    let golden: f32 = 1.61803398875;

    // The second unit vector for three dimensions, with inferred type.
    let e2 = vec3<i32>(0,1,0);
  </xmp>
</div>

When a variable or feature is used within control flow that depends on the
value of a constant, then that variable or feature is considered to be used by the
program.
This is true regardless of the value of the constant, whether that value
is the one from the constant's declaration or from a pipeline override.

## Function Scope Variables and Constants ## {#function-scope-variables}

A variable or constant declared in a declaration statement in a function body is in <dfn noexport>function scope</dfn>.
The name is available for use immediately after its declaration statement,
and until the end of the brace-delimited list of statements immediately enclosing the declaration.

A function-scope [=let declaration|let-declared=] constant must be of
[=constructible=] type, or of [=pointer type=].

For a variable declared in function scope:
* The variable is always in the [=address spaces/function=] address space.
* The address space decoration is optional.
* The [=store type=] must be a [=constructible=] type.
* When an initializer is specified, the store type may be omitted from the declaration.
    In this case the store type is the type of the result of evaluating the initializer.

<div class='example wgsl global-scope' heading="Function scope variables and constants">
  <xmp highlight='rust'>
    fn f() {
       var<function> count: u32;  // A variable in function address space.
       var delta: i32;            // Another variable in the function address space.
       var sum: f32 = 0.0;        // A function address space variable with initializer.
       var pi = 3.14159;          // Infer the f32 store type from the initializer.
       let unit: i32 = 1;         // Let-declared constants don't use an address space.
    }
  </xmp>
</div>

A variable or constant declared in the first clause of a `for` statement is available for use in the second
and third clauses and in the body of the `for` statement.

An instance of a function scope variable is a [=dynamic context=].
Each variable that is [=in scope=] for some invocation has an overlapping
[=lifetime=] and, therefore, has non-overlapping memory.
Variables with non-overlapping lifetimes may reuse the memory of previous
variables; however, new instances of the same variable are not guaranteed to
use the same memory.

## Variable and Value Declaration Grammar Summary ## {#var-and-value-decl-grammar}

<div class='syntax' noexport='true'>
  <dfn for=syntax>variable_statement</dfn> :

    | [=syntax/variable_decl=]

    | [=syntax/variable_decl=] [=syntax/equal=] [=syntax/expression=]

    | [=syntax/let=] ( [=syntax/ident=] | [=syntax/variable_ident_decl=] ) [=syntax/equal=] [=syntax/expression=]
</div>
<div class='syntax' noexport='true'>
  <dfn for=syntax>variable_decl</dfn> :

    | [=syntax/var=] [=syntax/variable_qualifier=] ? ( [=syntax/ident=] | [=syntax/variable_ident_decl=] )
</div>
<div class='syntax' noexport='true'>
  <dfn for=syntax>variable_ident_decl</dfn> :

    | [=syntax/ident=] [=syntax/colon=] [=syntax/type_decl=]
</div>
<div class='syntax' noexport='true'>
  <dfn for=syntax>variable_qualifier</dfn> :

    | [=syntax/less_than=] [=syntax/address_space=] ( [=syntax/comma=] [=syntax/access_mode=] ) ? [=syntax/greater_than=]
</div>

<div class='syntax' noexport='true'>
  <dfn for=syntax>global_variable_decl</dfn> :

    | [=syntax/attribute=] * [=syntax/variable_decl=] ( [=syntax/equal=] [=syntax/const_expression=] ) ?
</div>

<div class='syntax' noexport='true'>
  <dfn for=syntax>global_constant_decl</dfn> :

    | [=syntax/let=] ( [=syntax/ident=] | [=syntax/variable_ident_decl=] ) [=syntax/equal=] [=syntax/const_expression=]

    | [=syntax/attribute=] * [=syntax/override=] ( [=syntax/ident=] | [=syntax/variable_ident_decl=] ) ( [=syntax/equal=] [=syntax/expression=] ) ?
</div>
<div class='syntax' noexport='true'>
  <dfn for=syntax>const_expression</dfn> :

    | [=syntax/type_decl=] [=syntax/paren_left=] ( ( [=syntax/const_expression=] [=syntax/comma=] ) * [=syntax/const_expression=] [=syntax/comma=] ? ) ? [=syntax/paren_right=]

    | [=syntax/const_literal=]
</div>

# Expressions # {#expressions}

Expressions specify how values are computed.

## Literal Expressions ## {#literal-expressions}

<table class='data'>
  <caption>Scalar literal type rules</caption>
  <thead>
    <tr><th>Precondition<th>Conclusion<th>Notes
  </thead>
  <tr><td><td>`true`: bool<td>`true` boolean value.
  <tr><td><td>`false`: bool<td>`false` boolean value.
  <tr><td><td>*INT_LITERAL*: i32<td>Signed integer value.
  <tr><td><td>*UINT_LITERAL*: u32<td>Unsigned integer value.
  <tr><td><td>*FLOAT_LITERAL*: f32<td>Floating-point value.
</table>

## Parenthesized Expressions ## {#parenthesized-expressions}

<table class='data'>
  <caption>Parenthesized expression type rules</caption>
  <thead>
    <tr><th>Precondition<th>Conclusion<th>Description
  </thead>
  <tr algorithm="parenthesized expression">
      <td>|e| : |T|
      <td>`(` |e| `)` : |T|
      <td>Evaluates to |e|.<br>
          Use parentheses to isolate an expression from the surrounding text.
</table>

## Type Constructor Expressions ## {#type-constructor-expr}

Type constructor expressions explicitly create a value of a given [=constructible=] type.
Type constructor expressions explicitly create a value of a given type.

The scalar forms are redundant, but provide symmetry with scalar [[#conversion-expr|conversion expressions]],
and can be used to enhance readability.

The vector and matrix forms construct vector and matrix values from various combinations of components and subvectors
with matching component types.
There are overloads for constructing vectors and matrices that specify the dimensions of the target type without having to
specify the component type; the component type is inferred from the constructor arguments.

See also [[#zero-value-expr]] and [[#conversion-expr]].

<table class='data'>
  <caption>Scalar constructor type rules</caption>
  <thead>
    <tr><th>Precondition<th>Conclusion
  </thead>
  <tr><td>*e*: bool<td>`bool(e)`: bool<td>Identity.
  <tr><td>*e*: i32<td>`i32(e)`: i32<td>Identity.
  <tr><td>*e*: u32<td>`u32(e)`: u32<td>Identity.
  <tr><td>*e*: f32<td>`f32(e)`: f32<td>Identity.
</table>

<table class='data'>
  <caption>Vector constructor type rules, where *T* is a scalar type</caption>
  <thead>
    <tr><th>Precondition<th>Conclusion<th>Notes
  </thead>
  <tr algorithm="construct a vector from copies of a single scalar">
    <td rowspan=2>|e|: |T|
    <td>`vec`|N|`<`|T|`>(`|e|`)`: vec|N|&lt;|T|&gt;
    <td rowspan=2>Evaluates |e| once. Results in the |N|-component vector where each component has the value of |e|.
  <tr>
    <td>`vec`|N|`(`|e|`)`: vec|N|&lt;|T|&gt;
  <tr>
    <td rowspan=2>*e1*: *T*<br>
        *e2*: *T*
    <td>`vec2<T>(e1,e2)`: vec2<*T*>
    <td rowspan=2>
  <tr>
    <td>`vec2(e1,e2)`: vec2<*T*>
  <tr>
    <td rowspan=2>*e*: vec2&lt;T&gt;
    <td>`vec2<T>(e)`: vec2<*T*>
    <td rowspan=2>Identity. The result is |e|.
  <tr>
    <td>`vec2(e)`: vec2<*T*>
  <tr>
    <td rowspan=2>*e1*: *T*<br>
        *e2*: *T*<br>
        *e3*: *T*
    <td>`vec3<T>(e1,e2,e3)`: vec3<*T*>
    <td rowspan=2>
  <tr>
    <td>`vec3(e1,e2,e3)`: vec3<*T*>
  <tr>
    <td rowspan=2>*e1*: *T*<br>
        *e2*: vec2<*T*>
    <td>`vec3<T>(e1,e2)`: vec3<*T*><br>
        `vec3<T>(e2,e1)`: vec3<*T*>
    <td rowspan=2>
  <tr>
    <td>`vec3(e1,e2)`: vec3<*T*><br>
        `vec3(e2,e1)`: vec3<*T*>
  <tr>
    <td rowspan=2>*e*: vec3&lt;T&gt;
    <td>`vec3<T>(e)`: vec3<*T*>
    <td rowspan=2>Identity. The result is |e|.
  <tr>
    <td>`vec3(e)`: vec3<*T*>
  <tr>
    <td rowspan=2>*e1*: *T*<br>
        *e2*: *T*<br>
        *e3*: *T*<br>
        *e4*: *T*
    <td class=nowrap>`vec4<T>(e1,e2,e3,e4)`: vec4<*T*>
    <td rowspan=2>
  <tr>
    <td class=nowrap>`vec4(e1,e2,e3,e4)`: vec4<*T*>
  <tr>
    <td rowspan=2>*e1*: *T*<br>
        *e2*: *T*<br>
        *e3*: vec2<*T*>
    <td class=nowrap>`vec4<T>(e1,e2,e3)`: vec4<*T*><br>
        `vec4<T>(e1,e3,e2)`: vec4<*T*><br>
        `vec4<T>(e3,e1,e2)`: vec4<*T*>
    <td rowspan=2>
  <tr>
    <td class=nowrap>`vec4(e1,e2,e3)`: vec4<*T*><br>
        `vec4(e1,e3,e2)`: vec4<*T*><br>
        `vec4(e3,e1,e2)`: vec4<*T*>
  <tr>
    <td rowspan=2>*e1*: vec2<*T*><br>
        *e2*: vec2<*T*>
    <td class=nowrap>`vec4<T>(e1,e2)`: vec4<*T*>
    <td rowspan=2>
  <tr>
    <td class=nowrap>`vec4(e1,e2)`: vec4<*T*>
  <tr>
    <td rowspan=2>*e1*: *T*<br>
        *e2*: vec3<*T*>
    <td class=nowrap>`vec4<T>(e1,e2)`: vec4<*T*><br>
        `vec4<T>(e2,e1)`: vec4<*T*>
    <td rowspan=2>
  <tr>
    <td>`vec4(e1,e2)`: vec4<*T*><br>
        `vec4(e2,e1)`: vec4<*T*>
  <tr>
    <td rowspan=2>*e*: vec4&lt;T&gt;
    <td class=nowrap>`vec4<T>(e)`: vec4<*T*>
    <td rowspan=2>Identity. The result is |e|.
  <tr>
    <td class=nowrap>`vec4(e)`: vec4<*T*>
</table>

<table class='data'>
  <caption>Matrix constructor type rules</caption>
  <thead>
    <tr><th>Precondition<th>Conclusion<th>Notes
  </thead>
  <tr>
    <td rowspan=2>|e1|: |f32|<br>
        ...<br>
        |eN|: |f32|
    <td>`mat2x2<f32>(e1,e2,e3,e4)`: mat2x2&lt;f32&gt;<br>
        `mat3x2<f32>(e1,...,e6)`: mat3x2&lt;f32&gt;<br>
        `mat2x3<f32>(e1,...,e6)`: mat2x3&lt;f32&gt;<br>
        `mat4x2<f32>(e1,...,e8)`: mat4x2&lt;f32&gt;<br>
        `mat2x4<f32>(e1,...,e8)`: mat2x4&lt;f32&gt;<br>
        `mat3x3<f32>(e1,...,e9)`: mat3x3&lt;f32&gt;<br>
        `mat4x3<f32>(e1,...,e12)`: mat4x3&lt;f32&gt;<br>
        `mat3x4<f32>(e1,...,e12)`: mat3x4&lt;f32&gt;<br>
        `mat4x4<f32>(e1,...,e16)`: mat4x4&lt;f32&gt;
    <td rowspan=2>Column-major construction by elements.<br>
  <tr>
    <td>`mat2x2(e1,e2,e3,e4)`: mat2x2&lt;f32&gt;<br>
        `mat3x2(e1,...,e6)`: mat3x2&lt;f32&gt;<br>
        `mat2x3(e1,...,e6)`: mat2x3&lt;f32&gt;<br>
        `mat4x2(e1,...,e8)`: mat4x2&lt;f32&gt;<br>
        `mat2x4(e1,...,e8)`: mat2x4&lt;f32&gt;<br>
        `mat3x3(e1,...,e9)`: mat3x3&lt;f32&gt;<br>
        `mat4x3(e1,...,e12)`: mat4x3&lt;f32&gt;<br>
        `mat3x4(e1,...,e12)`: mat3x4&lt;f32&gt;<br>
        `mat4x4(e1,...,e16)`: mat4x4&lt;f32&gt;
  <tr>
    <td rowspan=2>*e1*: vec2&lt;f32&gt;<br>
        *e2*: vec2&lt;f32&gt;<br>
        *e3*: vec2&lt;f32&gt;<br>
        *e4*: vec2&lt;f32&gt;
    <td>`mat2x2<f32>(e1,e2)`: mat2x2&lt;f32&gt;<br>
        `mat3x2<f32>(e1,e2,e3)`: mat3x2&lt;f32&gt;<br>
        `mat4x2<f32>(e1,e2,e3,e4)`: mat4x2&lt;f32&gt;
    <td rowspan=2>Column by column construction.<br>
  <tr>
    <td>`mat2x2(e1,e2)`: mat2x2&lt;f32&gt;<br>
        `mat3x2(e1,e2,e3)`: mat3x2&lt;f32&gt;<br>
        `mat4x2(e1,e2,e3,e4)`: mat4x2&lt;f32&gt;
  <tr>
    <td rowspan=2>*e1*: vec3&lt;f32&gt;<br>
        *e2*: vec3&lt;f32&gt;<br>
        *e3*: vec3&lt;f32&gt;<br>
        *e4*: vec3&lt;f32&gt;
    <td>`mat2x3<f32>(e1,e2)`: mat2x3&lt;f32&gt;<br>
        `mat3x3<f32>(e1,e2,e3)`: mat3x3&lt;f32&gt;<br>
        `mat4x3<f32>(e1,e2,e3,e4)`: mat4x3&lt;f32&gt;
    <td rowspan=2>Column by column construction.<br>
  <tr>
    <td>`mat2x3(e1,e2)`: mat2x3&lt;f32&gt;<br>
        `mat3x3(e1,e2,e3)`: mat3x3&lt;f32&gt;<br>
        `mat4x3(e1,e2,e3,e4)`: mat4x3&lt;f32&gt;
  <tr>
    <td rowspan=2>*e1*: vec4&lt;f32&gt;<br>
        *e2*: vec4&lt;f32&gt;<br>
        *e3*: vec4&lt;f32&gt;<br>
        *e4*: vec4&lt;f32&gt;
    <td>`mat2x4<f32>(e1,e2)`: mat2x4&lt;f32&gt;<br>
        `mat3x4<f32>(e1,e2,e3)`: mat3x4&lt;f32&gt;<br>
        `mat4x4<f32>(e1,e2,e3,e4)`: mat4x4&lt;f32&gt;
    <td rowspan=2>Column by column construction.<br>
  <tr>
    <td>`mat2x4(e1,e2)`: mat2x4&lt;f32&gt;<br>
        `mat3x4(e1,e2,e3)`: mat3x4&lt;f32&gt;<br>
        `mat4x4(e1,e2,e3,e4)`: mat4x4&lt;f32&gt;
</table>

<table class='data'>
  <caption>Array constructor type rules</caption>
  <thead>
    <tr><th>Precondition<th>Conclusion<th>Notes
  </thead>
  <tr algorithm="array value construction">
    <td>|e1|: |T|<br>
        ...<br>
        |eN|: |T|,<br>
        |T| is [=constructible=]<br>
    <td class="nowrap">`array<`|T|,|N|`>(`|e1|,...,|eN|`)` : array&lt;|T|,|N|&gt;
    <td>Construction of an array from elements.

        Note: array&lt;|T|,|N|&gt; is [=constructible=] because its [=element count=]
        is equal to the number of arguments to the constructor, and hence
        fully determined at [=shader module creation|shader-creation=] time.
</table>

<table class='data'>
  <caption>Structure constructor type rules</caption>
  <thead>
    <tr><th>Precondition<th>Conclusion<th>Notes
  </thead>
  <tr algorithm="structure value construction">
    <td>|e1|: |T1|<br>
        ...<br>
        |eN|: |TN|,<br>
        |S| is a [=constructible=] structure type with members having types |T1| ... |TN|.<br>
        The expression is in the scope of declaration of |S|.
    <td class="nowrap">|S|`(`|e1|,...,|eN|`)`: |S|
    <td>Construction of a structure from members.
</table>

## Zero Value Expressions ## {#zero-value-expr}

Each [=constructible=] *T* has a unique <dfn noexport>zero value</dfn>
written in WGSL as the type followed by an empty pair of parentheses: *T* `()`.

The zero values are as follows:

* `bool()` is `false`
* `i32()` is 0
* `u32()` is 0
* `f32()` is 0.0
* The zero value for an *N*-component vector of type *T* is the *N*-component vector of the zero value for *T*.
* The zero value for an *N*-column *M*-row matrix of `f32` is the matrix of those dimensions filled with 0.0 entries.
* The zero value for a [=constructible=] *N*-element array with element type *E* is an array of *N* elements of the zero value for *E*.
* The zero value for a [=constructible=] structure type *S* is the structure value *S* with zero-valued members.

Note: WGSL does not have zero expression for [=atomic types=],
[=runtime-sized=] arrays, or other types that are not [=constructible=].

<table class='data'>
  <caption>Scalar zero value type rules</caption>
  <thead>
    <tr><th>Precondition<th>Conclusion<th>Notes
  </thead>
  <tr><td><td>`bool()`: bool<td>false<br>Zero value
  <tr><td><td>`i32()`: i32<td>0<br>Zero value
  <tr><td><td>`u32()`: u32<td>0u<br>Zero value
  <tr><td><td>`f32()`: f32<td>0.0<br>Zero value
</table>

<table class='data'>
  <caption>Vector zero type rules, where *T* is a scalar type</caption>
  <thead>
    <tr><th>Precondition<th>Conclusion<th>Notes
  </thead>
  <tr>
    <td>
    <td>`vec2<T>()`: vec2<*T*>
    <td>Zero value
  <tr>
    <td>
    <td>`vec3<T>()`: vec3<*T*>
    <td>Zero value
  <tr>
    <td>
    <td>`vec4<T>()`: vec4<*T*>
    <td>Zero value
</table>


<div class='example' heading="Zero-valued vectors">
  <xmp highlight='rust'>
    vec2<f32>()                 // The zero-valued vector of two f32 components.
    vec2<f32>(0.0, 0.0)         // The same value, written explicitly.

    vec3<i32>()                 // The zero-valued vector of three i32 components.
    vec3<i32>(0, 0, 0)          // The same value, written explicitly.
  </xmp>
</div>

<table class='data'>
  <caption>Matrix zero type rules</caption>
  <thead>
    <tr><th>Precondition<th>Conclusion<th>Notes
  </thead>
  <tr>
    <td>
    <td>`mat2x2<f32>()`: mat2x2&lt;f32&gt;<br>
        `mat3x2<f32>()`: mat3x2&lt;f32&gt;<br>
        `mat4x2<f32>()`: mat4x2&lt;f32&gt;
    <td>Zero value
  <tr>
    <td>
    <td>`mat2x3<f32>()`: mat2x3&lt;f32&gt;<br>
        `mat3x3<f32>()`: mat3x3&lt;f32&gt;<br>
        `mat4x3<f32>()`: mat4x3&lt;f32&gt;
    <td>Zero value
  <tr>
    <td>
    <td>`mat2x4<f32>()`: mat2x4&lt;f32&gt;<br>
        `mat3x4<f32>()`: mat3x4&lt;f32&gt;<br>
        `mat4x4<f32>()`: mat4x4&lt;f32&gt;
    <td>Zero value
</table>

<table class='data'>
  <caption>Array zero type rules</caption>
  <thead>
    <tr><th>Precondition<th>Conclusion<th>Notes
  </thead>
  <tr algorithm="array zero value">
    <td>|T| is a [=constructible=]
    <td>`array<`|T|,|N|`>()`: array&lt;|T|,|N|&gt;
    <td>Zero-valued array
</table>

<div class='example' heading="Zero-valued arrays">
  <xmp highlight='rust'>
    array<bool, 2>()               // The zero-valued array of two booleans.
    array<bool, 2>(false, false)   // The same value, written explicitly.
  </xmp>
</div>

<table class='data'>
  <caption>Structure zero type rules</caption>
  <thead>
    <tr><th>Precondition<th>Conclusion<th>Notes
  </thead>
  <tr algorithm="structure zero value">
    <td>|S| is a [=constructible=] structure type.<br>
         The expression is in the scope of declaration of |S|.
    <td>|S|`()`: |S|
    <td>Zero-valued structure: a structure of type |S| where each member is the zero value for its member type.
</table>

<div class='example wgsl global-scope' heading="Zero-valued structures">
  <xmp highlight='rust'>
    struct Student {
      grade: i32;
      GPA: f32;
      attendance: array<bool,4>;
    }

    fn func() {
      var s: Student;

      // The zero value for Student
      s = Student();

      // The same value, written explicitly.
      s = Student(0, 0.0, array<bool,4>(false, false, false, false));

      // The same value, written with zero-valued members.
      s = Student(i32(), f32(), array<bool,4>());
    }
  </xmp>
</div>


## Conversion Expressions ## {#conversion-expr}

WGSL does not implicitly convert or promote a numeric or boolean value to another type.
Instead use conversion expressions as defined in the tables below.

For details on conversion to and from floating point types, see [[#floating-point-conversion]].

See also [[#type-constructor-expr]].

<table class='data'>
  <caption>Scalar conversion type rules</caption>
  <thead>
    <tr><th>Precondition<th>Conclusion<th>Notes
  </thead>
  <tr algorithm="coercion to boolean from unsigned">
      <td>|e|: u32<td>`bool(`|e|`)`: bool
      <td>Coercion to boolean.<br>
          The result is false if |e| is 0, and true otherwise.
  <tr algorithm="coercion to boolean from signed">
      <td>|e|: i32<td>`bool(`|e|`)`: bool
      <td>Coercion to boolean.<br>
          The result is false if |e| is 0, and true otherwise.
  <tr algorithm="coercion to boolean from floating point">
      <td>|e|: f32<td>`bool(`|e|`)`: bool
      <td>Coercion to boolean.<br>
          The result is false if |e| is 0.0 or -0.0, and true otherwise.
          In particular NaN and infinity values map to true.
  <tr algorithm="conversion from boolean to signed">
      <td>|e|: bool<td>`i32(`|e|`)`: i32
      <td>Conversion of a boolean value to a signed integer<br>
          The result is 1 if |e| is true and 0 otherwise.<br>
  <tr algorithm="scalar reinterpretation from unsigned to signed">
      <td>|e|: u32<td>`i32(`|e|`)`: i32
      <td>Reinterpretation of bits.<br>
          The result is the unique value in [=i32=] that is equal to (|e| mod 2<sup>32</sup>).
  <tr algorithm="scalar conversion from floating point to signed integer">
      <td>|e|: f32<td>`i32(`|e|`)`: i32
      <td>Value conversion, rounding toward zero.
  <tr algorithm="conversion from boolean to unsigned">
      <td>|e|: bool<td>`u32(`|e|`)`: u32
      <td>Conversion of a boolean value to an unsigned integer<br>
          The result is 1u if |e| is true and 0u otherwise.
  <tr algorithm="scalar conversion from signed integer to unsigned integer">
      <td>|e|: i32<td>`u32(`|e|`)`: u32
      <td>Reinterpretation of bits.<br>
          The result is the unique value in [=u32=] that is equal to (|e| mod 2<sup>32</sup>).
  <tr algorithm="scalar conversion from floating point to unsigned integer">
      <td>|e|: f32<td>`u32(`|e|`)`: u32
      <td>Value conversion, rounding toward zero.
  <tr algorithm="conversion from boolean to floating point">
      <td>|e|: bool<td>`f32(`|e|`)`: f32
      <td>Conversion of a boolean value to floating point<br>
          The result is 1.0 if |e| is true and 0.0 otherwise.
  <tr algorithm="scalar conversion from signed integer to floating point">
      <td>|e|: i32<td>`f32(`|e|`)`: f32<td>Value conversion, including invalid cases.
  <tr algorithm="scalar conversion from unsigned integer to floating point">
      <td>|e|: u32<td>`f32(`|e|`)`: f32<td>Value conversion, including invalid cases.
</table>

Details of conversion to and from floating point are explained in [[#floating-point-conversion]].

<table class='data'>
  <caption>Vector conversion type rules</caption>
  <thead>
    <tr><th>Precondition<th>Conclusion<th>Notes
  </thead>
  <tr algorithm="vector coercion of unsigned integer to boolean">
     <td>|e|: vec|N|&lt;u32&gt;
     <td>`vec`|N|&lt;`bool`&gt;`(`|e|`)`: vec|N|&lt;bool&gt
     <td>[=Component-wise=] coercion of a unsigned integer vector to a boolean vector.

  <tr algorithm="vector coercion of signed integer to boolean">
     <td>|e|: vec|N|&lt;i32&gt;
     <td>`vec`|N|&lt;`bool`&gt;`(`|e|`)`: vec|N|&lt;bool&gt
     <td>[=Component-wise=] coercion of a signed integer vector to a boolean vector.

  <tr algorithm="vector coercion of floating point to boolean">
     <td>|e|: vec|N|&lt;f32&gt;
     <td>`vec`|N|&lt;`bool`&gt;`(`|e|`)`: vec|N|&lt;bool&gt
     <td>[=Component-wise=] coercion of a floating point vector to a boolean vector.

  <tr algorithm="vector conversion from bool to signed">
     <td>|e|: vec|N|&lt;bool&gt;
     <td>`vec`|N|&lt;`i32`&gt;`(`|e|`)`: vec|N|&lt;i32&gt
     <td>[=Component-wise=] conversion of a boolean vector to signed.<br>
         Component |i| of the result is `i32(`|e|`[`|i|`])`

  <tr algorithm="vector reinterpretation from unsigned to signed">
     <td>|e|: vec|N|&lt;u32&gt;
     <td>`vec`|N|&lt;`i32`&gt;`(`|e|`)`: vec|N|&lt;i32&gt
     <td>[=Component-wise=] reinterpretation of bits.<br>
         Component |i| of the result is `i32(`|e|`[`|i|`])`

  <tr algorithm="vector conversion from floating point to signed integer">
     <td>|e|: vec|N|&lt;f32&gt;
     <td>`vec`|N|&lt;`i32`&gt;`(`|e|`)`: vec|N|&lt;i32&gt;
     <td>[=Component-wise=] value conversion to signed integer, including invalid cases.

  <tr algorithm="vector conversion from bool to unsigned">
     <td>|e|: vec|N|&lt;bool&gt;
     <td>`vec`|N|&lt;`u32`&gt;`(`|e|`)`: vec|N|&lt;u32&gt
     <td>[=Component-wise=] conversion of a boolean vector to unsigned.<br>
         Component |i| of the result is `u32(`|e|`[`|i|`])`

  <tr algorithm="vector reinterpretation from signed to unsigned">
     <td>|e|: vec|N|&lt;i32&gt;
     <td>`vec`|N|&lt;`u32`&gt;`(`|e|`)`: vec|N|&lt;u32&gt;
     <td>[=Component-wise=] reinterpretation of bits.

  <tr algorithm="vector conversion from floating point to unsigned integer">
     <td>|e|: vec|N|&lt;f32&gt;
     <td>`vec`|N|&lt;`u32`&gt;`(`|e|`)`: vec|N|&lt;u32&gt;
     <td>[=Component-wise=] value conversion to unsigned integer, including invalid cases.

  <tr algorithm="vector conversion from bool to floating point">
     <td>|e|: vec|N|&lt;bool&gt;
     <td>`vec`|N|&lt;`u32`&gt;`(`|e|`)`: vec|N|&lt;u32&gt
     <td>[=Component-wise=] conversion of a boolean vector to floating point.<br>
         Component |i| of the result is `f32(`|e|`[`|i|`])`

  <tr algorithm="vector conversion from signed integer to floating point">
     <td>|e|: vec|N|&lt;i32&gt;
     <td>`vec`|N|&lt;`f32`&gt;`(`|e|`)`: vec|N|&lt;f32&gt;
     <td>[=Component-wise=] value conversion to floating point, including invalid cases.

  <tr algorithm="vector conversion from unsigned integer to floating point">
     <td>|e|: vec|N|&lt;u32&gt;
     <td>`vec`|N|&lt;`f32`&gt;`(`|e|`)`: vec|N|&lt;f32&gt;
     <td>[=Component-wise=] value conversion to floating point, including invalid cases.

</table>

## Reinterpretation of Representation Expressions ## {#bitcast-expr}

A `bitcast` expression is used to reinterpet the bit representation of a
value in one type as a value in another type.

<table class='data'>
  <caption>Bitcast type rules</caption>
  <thead>
    <tr><th>Precondition<th>Conclusion<th>Notes
  </thead>

  <tr algorithm="identity reinterpretation">
    <td>|e|: |T|<br>
    |T| is a [=numeric scalar=] or [=numeric vector=] type
    <td class="nowrap">bitcast&lt;|T|&gt;(|e|): |T|
    <td>Identity transform. [=Component-wise=] when |T| is a vector.<br>
    The result is |e|.

  <tr algorithm="general reinterpretation">
    <td>|e|: |T1|<br>
    |T1| is a [=numeric scalar=] or [=numeric vector=] type<br>
    |T2| is not |T1| and is a numeric scalar type if |T1| is a scalar, or<br>
    a numeric vector type if |T1| is a vector
    <td class="nowrap">bitcast&lt;|T2|&gt;(|e|): |T2|
    <td>Reinterpretation of bits as |T2|. [=Component-wise=] when |T1| is a vector.<br>
    The result is the reinterpretation of the bits in |e| as a |T2| value.
</table>

## Composite Value Decomposition Expressions ## {#composite-value-decomposition-expr}

### Vector Access Expression ### {#vector-access-expr}

Accessing components of a vector can be done either using array subscripting (e.g. `a[2]`) or using a sequence of convenience names, each mapping to a component of the source vector.

<ul>
  <li>The colour set of convenience names: `r`, `g`, `b`, `a` for vector components 0, 1, 2, and 3 respectively.
  <li>The dimensional set of convenience names: `x`, `y`, `z`, `w` for vector components 0, 1, 2, and 3, respectively.
</ul>

The convenience names are accessed using the `.` notation. (e.g. `color.bgra`).

NOTE: the convenience letterings can not be mixed. (i.e. you can not use `rybw`).

Using a convenience letter, or array subscript, which accesses a component past the end of the vector is an error.

The convenience letterings can be applied in any order, including duplicating letters as needed. You can provide 1 to 4 letters when extracting components from a vector. Providing more then 4 letters is an error.

The result type depends on the number of letters provided. Assuming a `vec4<f32>`
<table>
  <thead>
    <tr><th>Accessor<th>Result type
  </thead>
  <tr><td>r<td>`f32`
  <tr><td>rg<td>`vec2<f32>`
  <tr><td>rgb<td>`vec3<f32>`
  <tr><td>rgba<td>`vec4<f32>`
</table>

<div class='example wgsl function-scope'>
  <xmp highlight='rust'>
    var a: vec3<f32> = vec3<f32>(1., 2., 3.);
    var b: f32 = a.y;          // b = 2.0
    var c: vec2<f32> = a.bb;   // c = (3.0, 3.0)
    var d: vec3<f32> = a.zyx;  // d = (3.0, 2.0, 1.0)
    var e: f32 = a[1];         // e = 2.0
  </xmp>
</div>

#### Vector Single Component Selection #### {#vector-single-component}

<table class='data'>
  <caption>Vector decomposition: single component selection</caption>
  <thead>
    <tr><th>Precondition<th>Conclusion<th>Description
  </thead>
  <tr algorithm="first vector component selection"><td>|e|: vec|N|&lt;|T|&gt;<br>
       <td class="nowrap">
           |e|`.x`: |T|<br>
           |e|`.r`: |T|
       <td>Select the first component of |e|
  <tr algorithm="second vector component selection"><td>|e|: vec|N|&lt;|T|&gt;<br>
       <td class="nowrap">
           |e|`.y`: |T|<br>
           |e|`.g`: |T|
       <td>Select the second component of |e|
  <tr algorithm="third vector component selection"><td>|e|: vec|N|&lt;|T|&gt;<br>
          |N| is 3 or 4
       <td class="nowrap">
           |e|`.z`: |T|<br>
           |e|`.b`: |T|
       <td>Select the third component of |e|
  <tr algorithm="fourth vector component selection"><td>|e|: vec4&lt;|T|&gt;
       <td class="nowrap">
           |e|`.w`: |T|<br>
           |e|`.a`: |T|
       <td>Select the fourth component of |e|
  <tr algorithm="vector indexed component selection"><td>|e|: vec|N|&lt;|T|&gt;<br>
          |i|: [INT]
       <td class="nowrap">
           |e|[|i|]: |T|
       <td>Select the |i|'<sup>th</sup> component of vector<br>
           The first component is at index |i|=0.<br>
           If |i| is outside the range [0,|N|-1], then any valid value for |T|
           may be returned.
</table>

#### Vector Multiple Component Selection #### {#vector-multi-component}

<table class='data'>
  <caption>Vector decomposition: multiple component selection
  <thead>
    <tr><th>Precondition<th>Conclusion<th>Description
  </thead>
  <tr algorithm="two component vector selection using .x .y">
       <td class="nowrap">
          |e|: vec|N|&lt;|T|&gt;<br>
          |I| is the letter `x`, `y`, `z`, or `w`<br>
          |J| is the letter `x`, `y`, `z`, or `w`<br>
       <td class="nowrap">
           |e|`.`|I||J|: vec2&lt;|T|&gt;<br>
       <td>Computes the two-component vector with first component |e|.|I|, and second component |e|.|J|.<br>
           Letter `z` is valid only when |N| is 3 or 4.<br>
           Letter `w` is valid only when |N| is 4.
  <tr algorithm="two component vector selection using .r .g">
       <td class="nowrap">
          |e|: vec|N|&lt;|T|&gt;<br>
          |I| is the letter `r`, `g`, `b`, or `a`<br>
          |J| is the letter `r`, `g`, `b`, or `a`<br>
       <td class="nowrap">
           |e|`.`|I||J|: vec2&lt;|T|&gt;<br>
       <td>Computes the two-component vector with first component |e|.|I|, and second component |e|.|J|.<br>
           Letter `b` is valid only when |N| is 3 or 4.<br>
           Letter `a` is valid only when |N| is 4.
  <tr algorithm="three component vector selection using .x .y">
       <td class="nowrap">
          |e|: vec|N|&lt;|T|&gt;<br>
          |I| is the letter `x`, `y`, `z`, or `w`<br>
          |J| is the letter `x`, `y`, `z`, or `w`<br>
          |K| is the letter `x`, `y`, `z`, or `w`<br>
       <td class="nowrap">
           |e|`.`|I||J||K|: vec3&lt;|T|&gt;<br>
       <td>Computes the three-component vector with first component |e|.|I|, second component |e|.|J|, and third component |e|.|K|.<br>
           Letter `z` is valid only when |N| is 3 or 4.<br>
           Letter `w` is valid only when |N| is 4.
  <tr algorithm="three component vector selection using .r .g">
       <td class="nowrap">
          |e|: vec|N|&lt;|T|&gt;<br>
          |I| is the letter `r`, `g`, `b`, or `a`<br>
          |J| is the letter `r`, `g`, `b`, or `a`<br>
          |K| is the letter `r`, `g`, `b`, or `a`<br>
       <td class="nowrap">
           |e|`.`|I||J||K|: vec3&lt;|T|&gt;<br>
       <td>Computes the three-component vector with first component |e|.|I|, second component |e|.|J|, and third component |e|.|K|.<br>
           Letter `b` is only valid when |N| is 3 or 4.<br>
           Letter `a` is only valid when |N| is 4.
  <tr algorithm="four component vector selection using .x .y">
       <td class="nowrap">
          |e|: vec|N|&lt;|T|&gt;<br>
          |I| is the letter `x`, `y`, `z`, or `w`<br>
          |J| is the letter `x`, `y`, `z`, or `w`<br>
          |K| is the letter `x`, `y`, `z`, or `w`<br>
          |L| is the letter `x`, `y`, `z`, or `w`<br>
       <td class="nowrap">
           |e|`.`|I||J||K||L|: vec4&lt;|T|&gt;<br>
       <td>Computes the four-component vector with first component |e|.|I|, second component |e|.|J|, third component |e|.|K|, and fourth component |e|.|L|.<br>
           Letter `z` is valid only when |N| is 3 or 4.<br>
           Letter `w` is valid only when |N| is 4.
  <tr algorithm="four component vector selection using .r .g">
       <td class="nowrap">
          |e|: vec|N|&lt;|T|&gt;<br>
          |I| is the letter `r`, `g`, `b`, or `a`<br>
          |J| is the letter `r`, `g`, `b`, or `a`<br>
          |K| is the letter `r`, `g`, `b`, or `a`<br>
          |L| is the letter `r`, `g`, `b`, or `a`<br>
       <td class="nowrap">
           |e|`.`|I||J||K||L|: vec4&lt;|T|&gt;<br>
       <td>Computes the four-component vector with first component |e|.|I|, second component |e|.|J|, third component |e|.|K|, and fourth component |e|.|L|.<br>
           Letter `b` is only valid when |N| is 3 or 4.<br>
           Letter `a` is only valid when |N| is 4.
</table>

#### Component Reference from Vector Reference #### {#component-reference-from-vector-reference}

A [=write access=] to component of a vector **may** access all of the [=memory
location|memory locations=] associated with that vector.

Note: This means accesses to different components of a vector by different
invocations must be synchronized if at least one access is a [=write access=].
See [[#sync-builtin-functions]].

<table class='data'>
  <caption>Getting a reference to a component from a reference to a vector</caption>
  <thead>
    <tr><th>Precondition<th>Conclusion<th>Description
  </thead>
  <tr algorithm="first vector component reference selection">
       <td>|r|: ref&lt;|S|,vec|N|&lt;|T|&gt;&gt;<br>
       <td class="nowrap">
           |r|`.x`: ref&lt;|S|,|T|&gt;<br>
           |r|`.r`: ref&lt;|S|,|T|&gt;<br>
       <td>Compute a reference to the first component of the vector referenced by the reference |r|.<br>
           The [=originating variable=] of the resulting reference is
           the same as the originating variable of |r|.
  <tr algorithm="second vector component reference selection">
       <td>|r|: ref&lt;|S|,vec|N|&lt;|T|&gt;&gt;<br>
       <td class="nowrap">
           |r|`.y`: ref&lt;|S|,|T|&gt;<br>
           |r|`.g`: ref&lt;|S|,|T|&gt;<br>
       <td>Compute a reference to the second component of the vector referenced by the reference |r|.<br>
           The [=originating variable=] of the resulting reference is
           the same as the originating variable of |r|.
  <tr algorithm="third vector component reference selection">
       <td>|r|: ref&lt;|S|,vec|N|&lt;|T|&gt;&gt;<br>
           |N| is 3 or 4
       <td class="nowrap">
           |r|`.z`: ref&lt;|S|,|T|&gt;<br>
           |r|`.b`: ref&lt;|S|,|T|&gt;<br>
       <td>Compute a reference to the third component of the vector referenced by the reference |r|.<br>
           The [=originating variable=] of the resulting reference is
           the same as the originating variable of |r|.
  <tr algorithm="fourth vector component reference selection">
       <td>|r|: ref&lt;|S|,vec4&lt;|T|&gt;&gt;<br>
       <td class="nowrap">
           |r|`.w`: ref&lt;|S|,|T|&gt;<br>
           |r|`.a`: ref&lt;|S|,|T|&gt;<br>
       <td>Compute a reference to the fourth component of the vector referenced by the reference |r|.<br>
           The [=originating variable=] of the resulting reference is
           the same as the originating variable of |r|.
  <tr algorithm="vector indexed component reference selection">
       <td>|r|: ref&lt;|S|,vec|N|&lt;|T|&gt;&gt;<br>
          |i|: [INT]
       <td class="nowrap">
           |r|[|i|] : ref&lt;|S|,|T|&gt;
       <td>Compute a reference to the |i|'<sup>th</sup> component of the vector
           referenced by the reference |r|.

           If |i| is outside the range [0,|N|-1], then the expression evaluates
           to [=invalid memory reference=].

           The [=originating variable=] of the resulting reference is
           the same as the originating variable of |r|.
</table>

### Matrix Access Expression ### {#matrix-access-expr}

<table class='data'>
  <caption>Column vector extraction</caption>
  <thead>
    <tr><th>Precondition<th>Conclusion<th>Description
  </thead>
  <tr algorithm="matrix indexed column vector selection">
       <td class="nowrap">
          |e|: mat|N|x|M|&lt;|T|&gt;<br>
          |i|: [INT]
       <td class="nowrap">
           |e|[|i|]: vec|M|&lt;|T|&gt;
       <td>The result is the |i|'<sup>th</sup> column vector of |e|.

           If |i| is outside the range [0,|N|-1], then any valid value for
           vec|M|&lt;|T|&gt; may be returned.
</table>

<table class='data'>
  <caption>Getting a reference to a column vector from a reference to a matrix</caption>
  <thead>
    <tr><th>Precondition<th>Conclusion<th>Description
  </thead>
  <tr algorithm="matrix indexed column vector reference selection">
       <td class="nowrap">
          |r|: ref&lt;|S|,mat|N|x|M|&lt;|T|&gt;&gt;<br>
          |i|: [INT]
       <td class="nowrap">
           |r|[|i|] : ref&lt;vec|M|&lt;|S|,|T|&gt;&gt;
       <td>Compute a reference to the |i|'<sup>th</sup> column vector of the
           matrix referenced by the reference |r|.

           If |i| is outside the range [0,|N|-1], then the expression evaluates to
           [=invalid memory reference=].

           The [=originating variable=] of the resulting reference is
           the same as the originating variable of |r|.
</table>

### Array Access Expression ### {#array-access-expr}

<table class='data'>
  <caption>Array element extraction</caption>
  <thead>
    <tr><th>Precondition<th>Conclusion<th>Description
  </thead>
  <tr algorithm="fixed-size array indexed element selection">
       <td class="nowrap">
          |e|: array&lt;|T|,|N|&gt;<br>
          |i|: [INT]
       <td class="nowrap">
           |e|[|i|] : |T|
       <td>The result is the value of the |i|'<sup>th</sup> element of the array value |e|.

           If |i| is outside the range [0,|N|-1], then any valid value for |T|
           may be returned.
</table>

<table class='data'>
  <caption>Getting a reference to an array element from a reference to an array</caption>
  <thead>
    <tr><th>Precondition<th>Conclusion<th>Description
  </thead>
  <tr algorithm="fixed-size array indexed reference selection">
       <td class="nowrap">
          |r|: ref&lt;|S|,array&lt;|T|,|N|&gt;&gt;<br>
          |i|: [INT]
       <td class="nowrap">
           |r|[|i|] : ref&lt;|S|,|T|&gt;
       <td>Compute a reference to the |i|'<sup>th</sup> element of the array
           referenced by the reference |r|.

           If |i| is outside the range [0,|N|-1], then the expression evaluates
           to an [=invalid memory reference=].

           The [=originating variable=] of the resulting reference is
           the same as the originating variable of |r|.
  <tr algorithm="array indexed reference selection">
       <td>|r|: ref&lt;|S|,array&lt;|T|&gt;&gt;<br>
          |i|: [INT]
       <td class="nowrap">
           |r|[|i|] : ref&lt;|S|,|T|&gt;
       <td>Compute a reference to the |i|'<sup>th</sup> element of the
           runtime-sized array referenced by the reference |r|.

           If at runtime the array has |N| elements, and |i| is outside the range
           [0,|N|-1], then the expression evaluates to an [=invalid memory
           reference=].

           The [=originating variable=] of the resulting reference is
           the same as the originating variable of |r|.
</table>


### Structure Access Expression ### {#struct-access-expr}

<table class='data'>
  <caption>Structure member extraction</caption>
  <thead>
    <tr><th>Precondition<th>Conclusion<th>Description
  </thead>
  <tr algorithm="structure member extraction">
       <td class="nowrap">
          |S| is a structure type<br>
          |M| is the identifier name of a member of |S|, having type |T|<br>
          |e|: |S|<br>
       <td class="nowrap">
           |e|.|M|: |T|
       <td>The result is the value of the member with name |M| from the structure value |e|.
</table>

<table class='data'>
  <caption>Getting a reference to a structure member from a reference to a structure</caption>
  <thead>
    <tr><th>Precondition<th>Conclusion<th>Description
  </thead>
  <tr algorithm="structure member reference selection">
       <td class="nowrap">
          |S| is a structure type<br>
          |M| is the name of a member of |S|, having type |T|<br>
          |r|: ref&lt;|S|,|S|&gt;<br>
       <td class="nowrap">
           |r|.|M|: ref&lt;|S|,|T|&gt;
       <td>Given a reference to a structure, the result is a reference to the structure member with identifier name |M|.<br>
           The [=originating variable=] of the resulting reference is
           the same as the originating variable of |r|.
</table>

## Logical Expressions ## {#logical-expr}
<table class='data'>
  <caption>Unary logical operations</caption>
  <thead>
    <tr><th>Precondition<th>Conclusion<th>Notes
  </thead>
  <tr algorithm="boolean negation"><td>|e|: bool<br>|T| is bool or vec|N|&lt;bool&gt;
  <td>`!`|e|: |T|
  <td>Logical negation.
  The result is `true` when |e| is `false` and `false` when |e| is `true`.
  [=Component-wise=] when |T| is a vector.
</table>

<table class='data'>
  <caption>Binary logical expressions</caption>
  <thead>
    <tr><th>Precondition<th>Conclusion<th>Notes
  </thead>
  <tr algorithm="short-circuiting or"><td>|e1|: bool<br>|e2|: bool<td>|e1| `||` |e2|`: bool`
  <td>Short-circuiting "or". Yields `true` if either |e1| or |e2| are true;
  evaluates |e2| only if |e1| is false.

  <tr algorithm="short-circuiting and"><td>|e1|: bool<br>|e2|: bool
  <td>|e1| `&&` |e2|`: bool`
  <td>Short-circuiting "and". Yields `true` if both |e1| and |e2| are true;
  evaluates |e2| only if |e1| is true.

  <tr algorithm="logical or"><td>|e1|: |T|<br>|e2|: |T|<br>|T| is bool or vec|N|&lt;bool&gt;
  <td>|e1| `|` |e2|`:` |T|
  <td>Logical "or". [=Component-wise=] when |T| is a vector. Evaluates both |e1| and |e2|.

  <tr algorithm="logical and"><td>|e1|: |T|<br>|e2|: |T|<br>|T| is bool or vec|N|&lt;bool&gt;
  <td>|e1| `&` |e2|`:` |T|
  <td>Logical "and". [=Component-wise=] when |T| is a vector. Evaluates both |e1| and |e2|.
</table>


## Arithmetic Expressions ## {#arithmetic-expr}

<table class='data'>
  <caption>Unary arithmetic expressions</caption>
  <thead>
    <tr><th>Precondition<th>Conclusion<th>Notes
  </thead>
  <tr algorithm="integer negation"><td>|e|: |T|<br>
  |T| is [SIGNEDINTEGRAL]
  <td>`-`|e|`:` |T|
  <td>Signed integer negation. [=Component-wise=] when |T| is a vector.
  If |e| evaluates to the largest negative value, then the result is |e|.

  <tr algorithm="floating point negation"><td>|e|: |T|<br>|T| is [FLOATING]
  <td>`-`|e|`:` |T|
  <td>Floating point negation. [=Component-wise=] when |T| is a vector.
</table>

<table class='data'>
  <caption>Binary arithmetic expressions</caption>
  <thead>
    <tr><th>Precondition<th>Conclusion<th>Notes
  </thead>

  <tr algorithm="integer addition">
    <td>|e1| : |T|<br>|e2| : |T|<br>|T| is [INTEGRAL]
    <td>|e1| `+` |e2| : |T|
    <td>Integer addition, modulo 2<sup>32</sup>. [=Component-wise=] when |T| is a vector.
  <tr algorithm="floating point addition">
    <td>|e1| : |T|<br>|e2| : |T|<br>|T| is [FLOATING]
    <td>|e1| `+` |e2| : |T|
    <td>Floating point addition. [=Component-wise=] when |T| is a vector.

  <tr algorithm="integer subtraction">
    <td>|e1| : |T|<br>|e2| : |T|<br>|T| is [INTEGRAL]
    <td>|e1| `-` |e2| : |T|
    <td>Integer subtraction, modulo 2<sup>32</sup>. [=Component-wise=] when |T| is a vector.
  <tr algorithm="floating point subtraction">
    <td>|e1| : |T|<br>|e2| : |T|<br>|T| is [FLOATING]
    <td>|e1| `-` |e2| : |T|
    <td>Floating point subtraction. [=Component-wise=] when |T| is a vector.

  <tr algorithm="integer multiplication">
    <td>|e1| : |T|<br>|e2| : |T|<br>|T| is [INTEGRAL]
    <td>|e1| `*` |e2| : |T|
    <td>Integer multiplication, modulo 2<sup>32</sup>. [=Component-wise=] when |T| is a vector.
  <tr algorithm="floating point multiplication">
    <td>|e1| : |T|<br>|e2| : |T|<br>|T| is [FLOATING]
    <td>|e1| `*` |e2| : |T|
    <td>Floating point multiplication. [=Component-wise=] when |T| is a vector.

  <tr algorithm="signed integer division">
    <td>|e1| : |T|<br>|e2| : |T|<br>|T| is [SIGNEDINTEGRAL]
    <td>|e1| `/` |e2| : |T|
    <td>Signed integer division. [=Component-wise=] when |T| is a vector.

        In the scalar case, evaluates to:
        * |e1|, when |e2| is zero.
        * |e1|, when |e1| is the most negative value in |T|, and |e2| is -1.
        * [=truncate=](|x|) otherwise, where |x| is the
            real-valued quotient |e1|&nbsp;&div;&nbsp;|e2|.

        Note:
        The need to ensure truncation behaviour may require an implementation
        to perform more operations than when computing an unsigned division.
        Use unsigned division when both operands are known to have the same sign.

        <!--
               where MINIT = most negative value in |T|
               where Divisor = select(e2, 1, (e2==0) | ((e1 == MININT) & (e2 == -1)))
               result is truncate(e1/Divisor)
        -->

  <tr algorithm="unsigned integer division">
    <td>|e1| : |T|<br>|e2| : |T|<br>|T| is [UNSIGNEDINTEGRAL]
    <td>|e1| `/` |e2| : |T|
    <td>Unsigned integer division. [=Component-wise=] when |T| is a vector.

        In the scalar case, evaluates to:
        * |e1|, when |e2| is zero.
        * Otherwise, the integer |q| such that
            |e1|&nbsp;=&nbsp;|q|&nbsp;&times;&nbsp;|e2|&nbsp;+&nbsp;|r|,
            where 0 &le; |r| &lt; |e2|.

  <tr algorithm="floating point division">
    <td>|e1| : |T|<br>|e2| : |T|<br>|T| is [FLOATING]
    <td>|e1| `/` |e2| : |T|
    <td>Floating point division. [=Component-wise=] when |T| is a vector.

  <tr algorithm="signed integer remainder">
    <td>|e1| : |T|<br>|e2| : |T|<br>|T| is [SIGNEDINTEGRAL]
    <td>|e1| `%` |e2| : |T|
    <td>Signed integer remainder. [=Component-wise=] when |T| is a vector.

       In the scalar case, evaluates |e1| and |e2| once, and evaluates to:
       * 0, when |e2| is zero.
       * 0, when |e1| is the most negative value in |T|, and |e2| is -1.
       * Otherwise, |e1|&nbsp;-&nbsp;[=truncate=](|e1|&nbsp;&div;&nbsp;|e2|)&nbsp;&times;&nbsp;|e2|
           where the quotient is computed as a real value.

       Note:
       When non-zero, the result has the same sign as |e1|.

       Note:
       The need to ensure consistent behaviour may require an implementation
       to perform more operations than when computing an unsigned remainder.

        <!--
               where MINIT = most negative value in |T|
               where Divisor = select(e2, 1, (e2==0) | ((e1 == MININT) & (e2 == -1)))
               result is e1 - truncate(e1/Divisor) * Divisor
        -->

  <tr algorithm="unsigned integer remainder">
    <td>|e1| : |T|<br>|e2| : |T|<br>|T| is [UNSIGNEDINTEGRAL]
    <td>|e1| `%` |e2| : |T|
    <td>Unsigned integer remainder. [=Component-wise=] when |T| is a vector.

        In the scalar case, evaluates to:
        * 0, when |e2| is zero.
        * Otherwise, the integer |r| such that
            |e1|&nbsp;=&nbsp;|q|&nbsp;&times;&nbsp;|e2|&nbsp;+&nbsp;|r|,
            where |q| is an integer and 0 &le; |r| &lt; |e2|.

  <tr algorithm="floating point remainder">
    <td>|e1| : |T|<br>|e2| : |T|<br>|T| is [FLOATING]
    <td>|e1| `%` |e2| : |T|
    <td>Floating point remainder, where sign of non-zero result matches sign of |e1|. [=Component-wise=] when |T| is a vector.<br>
        Result equal to: |e1| - |e2| * trunc(|e1| / |e2|)<br>

</table>

<table class='data'>
  <caption>Binary arithmetic expressions with mixed scalar and vector operands</caption>
  <thead>
    <th>Preconditions<th>Conclusions<th>Semantics
  </thead>
  <tr algorithm="vector-scalar arithmetic, any scalar type">
    <td rowspan="10">|S| is one of f32, i32, u32<br>
        |V| is vec|N|&lt;|S|&gt<br>
        |es|: |S|<br>
        |ev|: |V|
    <td>|ev| `+` |es|: |V|
    <td>|ev| `+` |V|(|es|)
  <tr>
    <td>|es| `+` |ev|: |V|
    <td>|V|(|es|) `+` |ev|
  <tr>
    <td>|ev| `-` |es|: |V|
    <td>|ev| `-` |V|(|es|)
  <tr>
    <td>|es| `-` |ev|: |V|
    <td>|V|(|es|) `-` |ev|
  <tr>
    <td>|ev| `*` |es|: |V|
    <td>|ev| `*` |V|(|es|)
  <tr>
    <td>|es| `*` |ev|: |V|
    <td>|V|(|es|) `*` |ev|
  <tr>
    <td>|ev| `/` |es|: |V|
    <td>|ev| `/` |V|(|es|)
  <tr>
    <td>|es| `/` |ev|: |V|
    <td>|V|(|es|) `/` |ev|
  <tr>
    <td>|ev| `%` |es|: |V|
    <td>|ev| `%` |V|(|es|)
  <tr>
    <td>|es| `%` |ev|: |V|
    <td>|V|(|es|) `%` |ev|
</table>

<table class='data'>
  <caption>Matrix arithmetic</caption>
  <thead>
    <th>Preconditions<th>Conclusions<th>Semantics
  </thead>
  <tr algorithm="matrix addition">
    <td rowspan=2>|e1|, |e2|: mat|M|x|N|&lt;f32&gt
    <td>|e1| `+` |e2|: mat|M|x|N|&lt;f32&gt<br>
    <td>Matrix addition: column |i| of the result is |e1|[i] + |e2|[i]
  <tr algorithm="matrix subtraction">
    <td>|e1| `-` |e2|: mat|M|x|N|&lt;f32&gt
    <td>Matrix subtraction: column |i| of the result is |e1|[|i|] - |e2|[|i|]
  <tr algorithm="matrix-scalar multiply">
    <td rowspan=2>|m|: mat|M|x|N|&lt;f32&gt<br>
        |s|: f32
    <td>|m| `*` |s|:  mat|M|x|N|&lt;f32&gt<br>
    <td>Component-wise scaling: (|m| `*` |s|)[i][j] is |m|[i][j] `*` |s|
  <tr algorithm="scalar-matrix multiply">
    <td>|s| `*` |m|:  mat|M|x|N|&lt;f32&gt<br>
    <td>Component-wise scaling: (|s| `*` |m|)[i][j] is |m|[i][j] `*` |s|
  <tr algorithm="matrix-column-vector multiply">
    <td>|m|: mat|M|x|N|&lt;f32&gt<br>
        |v|: vec|M|&lt;f32&gt
    <td>|m| `*` |v|:  vec|N|&lt;f32&gt<br>
    <td>Linear algebra matrix-column-vector product:
        Component |i| of the result is `dot`(|m|[|i|],|v|)
  <tr algorithm="matrix-row-vector multiply">
    <td>
        |m|: mat|M|x|N|&lt;f32&gt<br>
        |v|: vec|N|&lt;f32&gt
    <td>|v| `*` |m|:  vec|M|&lt;f32&gt<br>
    <td>Linear algebra row-vector-matrix product:<br>
        [=transpose=](transpose(|m|) `*` transpose(|v|))
  <tr algorithm="matrix-matrix multiply">
    <td>|e1|: mat|K|x|N|&lt;f32&gt<br>
        |e2|: mat|M|x|K|&lt;f32&gt
    <td>|e1| `*` |e2|:  mat|M|x|N|&lt;f32&gt<br>
    <td>Linear algebra matrix product.

</table>

## Comparison Expressions ## {#comparison-expr}

<table class='data'>
  <caption>Comparisons</caption>
  <thead>
    <tr><th>Precondtion<th>Conclusion<th>Notes
  </thead>

  <tr algorithm="bool equality">
    <td>|e1|: |T|<br>|e2|: |T|<br>|T| is bool or vec|N|&lt;bool&gt;
    <td class="nowrap">|e1| `==` |e2|`:` |T|
    <td>Equality. [=Component-wise=] when |T| is a vector.
  <tr algorithm="bool inequality">
    <td>|e1|: |T|<br>|e2|: |T|<br>|T| is bool or vec|N|&lt;bool&gt;
    <td class="nowrap">|e1| `!=` |e2|`:` |T|
    <td>Inequality. [=Component-wise=] when |T| is a vector.

  <tr algorithm="integer equality">
    <td>|e1|: |TI|<br>|e2|: |TI|<br>
    |TI| is [INTEGRAL]<br>
    |TB| is bool if |TI| is scalar, or<br>
    vec|N|&lt;bool&gt; if |TI| is a vector
    <td class="nowrap">|e1| `==` |e2|`:` |TB|
    <td>Equality. [=Component-wise=] when |TI| is a vector.
  <tr algorithm="integer inequality">
    <td>|e1|: |TI|<br>|e2|: |TI|<br>
    |TI| is [INTEGRAL]<br>
    |TB| is bool if |TI| is scalar, or<br>
    vec|N|&lt;bool&gt; if |TI| is a vector
    <td class="nowrap">|e1| `!=` |e2|`:` |TB|
    <td>Inequality. [=Component-wise=] when |TI| is a vector.

  <tr algorithm="signed integer less than">
    <td>|e1|: |TI|<br>|e2|: |TI|<br>|TI| is [SIGNEDINTEGRAL]<br>
    |TB| is bool if |TI| is scalar, or<br>
    vec|N|&lt;bool&gt; if |TI| is a vector
    <td class="nowrap">|e1| `<` |e2|`:` |TB|
    <td>Less than. [=Component-wise=] when |TI| is a vector.
  <tr algorithm="signed integer less than equal">
    <td>|e1|: |TI|<br>|e2|: |TI|<br>|TI| is [SIGNEDINTEGRAL]<br>
    |TB| is bool if |TI| is scalar, or<br>
    vec|N|&lt;bool&gt; if |TI| is a vector
    <td class="nowrap">|e1| `<=` |e2|`:` |TB|
    <td>Less than or equal. [=Component-wise=] when |TI| is a vector.
  <tr algorithm="signed integer greater than">
    <td>|e1|: |TI|<br>|e2|: |TI|<br>|TI| is [SIGNEDINTEGRAL]<br>
    |TB| is bool if |TI| is scalar, or<br>
    vec|N|&lt;bool&gt; if |TI| is a vector
    <td class="nowrap">|e1| `>` |e2|`:` |TB|
    <td>Greater than. [=Component-wise=] when |TI| is a vector.
  <tr algorithm="signed integer greater than equal">
    <td>|e1|: |TI|<br>|e2|: |TI|<br>|TI| is [SIGNEDINTEGRAL]<br>
    |TB| is bool if |TI| is scalar, or<br>
    vec|N|&lt;bool&gt; if |TI| is a vector
    <td class="nowrap">|e1| `>=` |e2|`:` |TB|
    <td>Greater than or equal. [=Component-wise=] when |TI| is a vector.

  <tr algorithm="unsigned integer less than">
    <td>|e1|: |TI|<br>|e2|: |TI|<br>|TI| is [UNSIGNEDINTEGRAL]<br>
    |TB| is bool if |TI| is scalar, or<br>
    vec|N|&lt;bool&gt; if |TI| is a vector
    <td class="nowrap">|e1| `<` |e2|`:` |TB|
    <td>Less than. [=Component-wise=] when |TI| is a vector.
  <tr algorithm="unsigned integer less than equal">
    <td>|e1|: |TI|<br>|e2|: |TI|<br>|TI| is [UNSIGNEDINTEGRAL]<br>
    |TB| is bool if |TI| is scalar, or<br>
    vec|N|&lt;bool&gt; if |TI| is a vector
    <td class="nowrap">|e1| `<=` |e2|`:` |TB|
    <td>Less than or equal. [=Component-wise=] when |TI| is a vector.
  <tr algorithm="unsigned integer greater than">
    <td>|e1|: |TI|<br>|e2|: |TI|<br>|TI| is [UNSIGNEDINTEGRAL]<br>
    |TB| is bool if |TI| is scalar, or<br>
    vec|N|&lt;bool&gt; if |TI| is a vector
    <td class="nowrap">|e1| `>` |e2|`:` |TB|
    <td>Greater than. [=Component-wise=] when |TI| is a vector.
  <tr algorithm="unsigned integer greater than equal">
    <td>|e1|: |TI|<br>|e2|: |TI|<br>|TI| is [UNSIGNEDINTEGRAL]<br>
    |TB| is bool if |TI| is scalar, or<br>
    vec|N|&lt;bool&gt; if |TI| is a vector
    <td class="nowrap">|e1| `>=` |e2|`:` |TB|
    <td>Greater than or equal. [=Component-wise=] when |TI| is vector.

  <tr algorithm="floating point equality">
    <td>|e1|: |TF|<br>|e2|: |TF|<br>|TF| is [FLOATING]<br>
    |TB| is bool if |TF| is scalar, or<br>
    vec|N|&lt;bool&gt; if |TF| is a vector.
    <td class="nowrap">|e1| == |e2|: |TB|
    <td>Equality. [=Component-wise=] when |TF| is a vector.
  <tr algorithm="floating point inequality">
    <td>|e1|: |TF|<br>|e2|: |TF|<br>|TF| is [FLOATING]<br>
    |TB| is bool if |TF| is scalar, or<br>
    vec|N|&lt;bool&gt; if |TF| is a vector.
    <td class="nowrap">|e1| != |e2|: |TB|
    <td>Inequality. [=Component-wise=] when |TF| is a vector.
  <tr algorithm="floating point less than">
    <td>|e1|: |TF|<br>|e2|: |TF|<br>|TF| is [FLOATING]<br>
    |TB| is bool if |TF| is scalar, or<br>
    vec|N|&lt;bool&gt; if |TF| is a vector.
    <td class="nowrap">|e1| < |e2|: |TB|
    <td>Less than. [=Component-wise=] when |TF| is a vector.
  <tr algorithm="floating point less than equal">
    <td>|e1|: |TF|<br>|e2|: |TF|<br>|TF| is [FLOATING]<br>
    |TB| is bool if |TF| is scalar, or<br>
    vec|N|&lt;bool&gt; if |TF| is a vector.
    <td class="nowrap">|e1| <= |e2|: |TB|
    <td>Less than or equal. [=Component-wise=] when |TF| is a vector.
  <tr algorithm="floating point greater than">
    <td>|e1|: |TF|<br>|e2|: |TF|<br>|TF| is [FLOATING]<br>
    |TB| is bool if |TF| is scalar, or<br>
    vec|N|&lt;bool&gt; if |TF| is a vector.
    <td class="nowrap">|e1| > |e2|: |TB|
    <td>Greater than. [=Component-wise=] when |TF| is a vector.
  <tr algorithm="floating point greater than equal">
    <td>|e1|: |TF|<br>|e2|: |TF|<br>|TF| is [FLOATING]<br>
    |TB| is bool if |TF| is scalar, or<br>
    vec|N|&lt;bool&gt; if |TF| is a vector.
    <td class="nowrap">|e1| >= |e2|: |TB|
    <td>Greater than or equal. [=Component-wise=] when |TF| is a vector.

</table>

## Bit Expressions ## {#bit-expr}

<table class='data'>
  <caption>Unary bitwise operations</caption>
  <thead>
    <tr><th>Precondition<th>Conclusion<th>Notes
  </thead>
  <tr algorithm="complement">
    <td>|e|: |T|<br>
    |T| is [INTEGRAL]
    <td class="nowrap">`~`|e| : |T|
    <td>Bitwise complement on |e|.
    Each bit in the result is the opposite of the corresponding bit in |e|.
    [=Component-wise=] when |T| is a vector.
</table>

<table class='data'>
  <caption>Binary bitwise operations</caption>
  <thead>
    <tr><th>Precondition<th>Conclusion<th>Notes
  </thead>
  <tr algorithm="bitwise or">
    <td>*e1*: *T*<br>
       *e2*: *T*<br>
       *T* is [INTEGRAL]
    <td class="nowrap">`e1 | e2`: *T*
    <td>Bitwise-or. [=Component-wise=] when |T| is a vector.
  <tr algorithm="bitwise and">
    <td>*e1*: *T*<br>
       *e2*: *T*<br>
       *T* is [INTEGRAL]
    <td class="nowrap">`e1 & e2`: *T*
    <td>Bitwise-and. [=Component-wise=] when |T| is a vector.
  <tr algorithm="bitwise exclusive or">
    <td>*e1*: *T*<br>
       *e2*: *T*<br>
       *T* is [INTEGRAL]
    <td class="nowrap">`e1 ^ e2`: *T*
    <td>Bitwise-exclusive-or. [=Component-wise=] when |T| is a vector.
</table>


<table class='data'>
  <caption>Bit shift expressions</caption>
  <thead>
    <tr><th>Precondition<th>Conclusion<th>Notes
  </thead>

  <tr algorithm="logical shift left">
    <td>|e1|: |T|<br>
    |e2|: |TS|<br>
    |T| is [INTEGRAL]<br>
    |TS| is u32 if |e1| is a scalar, or<br>
    vec|N|&lt;u32&gt;.
    <td class="nowrap">|e1| `<<` |e2|: |T|
    <td>Logical shift left:<br>
        Shift |e1| left, inserting zero bits at the least significant positions,
        and discarding the most significant bits.
        The number of bits to shift is the value of |e2| modulo the bit width of |e1|.<br>
        [=Component-wise=] when |T| is a vector.

  <tr algorithm="logical shift right">
    <td>|e1|: |T|<br>
    |e2|: |T|<br>
    |T| is [UNSIGNEDINTEGRAL]
    <td class="nowrap">|e1| >> |e2|: |T|
    <td>Logical shift right:<br>
        Shift |e1| right, inserting zero bits at the most significant positions,
        and discarding the least significant bits.
        The number of bits to shift is the value of |e2| modulo the bit width of |e1|.
        [=Component-wise=] when |T| is a vector.

  <tr algorithm="arithmetic shift right">
    <td>|e1|: |T|<br>
    |e2|: |TS|<br>
    |T| is [SIGNEDINTEGRAL]<br>
    |TS| is u32 if |e1| is a scalar, or<br>
    vec|N|&lt;u32&gt;.
    <td class="nowrap">|e1| >> |e2|: |T|
    <td>Arithmetic shift right:<br>
        Shift |e1| right, copying the sign bit of |e1| into the most significant positions,
        and discarding the least significant bits.
        The number of bits to shift is the value of |e2| modulo the bit width of |e1|.
        [=Component-wise=] when |T| is a vector.
</table>

## Function Call Expression ## {#function-call-expr}

A function call expression executes a [=function call=] where the called
function has a [=return type=].
If the called function does not return a value, a function call statement
should be used instead.
See [[#function-call-statement]].

## Variable Identifier Expression ## {#var-identifier-expr}

<table class='data'>
  <caption>Getting a reference from a variable name</caption>
  <thead>
    <tr><th>Precondition<th>Conclusion<th>Description
  </thead>
  <tr algorithm="variable reference">
       <td>
          |v| is an [=identifier=] [=resolves|resolving=] to
          an [=in scope|in-scope=] variable declared in [=address space=] |S|
          with [=store type=] |T|
       <td class="nowrap">
          |v|: ref&lt;|S|,|T|&gt;
       <td>Result is a reference to the memory for the named variable |v|.
</table>

## Formal Parameter Expression  ## {#formal-parameter-expr}

<table class='data'>
  <caption>Getting the value of an identifier declared as a formal parameter to a function</caption>
  <thead>
    <tr><th>Precondition<th>Conclusion<th>Description
  </thead>
  <tr algorithm="formal parameter value">
       <td>
          |a| is an [=identifier=] [=resolves|resolving=] to
          an [=in scope|in-scope=] formal parameter declaration with type |T|
       <td class="nowrap">
          |a|: |T|
       <td>Result is the value supplied for the corresponding function call operand at the [=call site=]
           invoking this instance of the function.
</table>

## Address-Of Expression  ## {#address-of-expr}

The <dfn noexport>address-of</dfn> operator converts a reference to its corresponding pointer.

<table class='data'>
  <caption>Getting a pointer from a reference</caption>
  <thead>
    <tr><th>Precondition<th>Conclusion<th>Description
  </thead>
  <tr algorithm="address-of expression">
       <td>
          |r|: ref&lt;|S|,|T|,|A|&gt;
       <td class="nowrap">
          `&`|r|: ptr&lt;|S|,|T|,|A|&gt;
       <td>Result is the pointer value corresponding to the
           same [=memory view=] as the reference value |r|.

           If |r| is an [=invalid memory reference=], then the resulting
           pointer is also an invalid memory reference.

           It is a [=shader-creation error=] if |S| is the [=address spaces/handle=] address space.

           It is a [=shader-creation error=] if |r| is a
           [[#component-reference-from-vector-reference|reference to a vector component]].

</table>

## Indirection Expression  ## {#indirection-expr}

The <dfn noexport>indirection</dfn> operator converts a pointer to its corresponding reference.

<table class='data'>
  <caption>Getting a reference from a pointer</caption>
  <thead>
    <tr><th>Precondition<th>Conclusion<th>Description
  </thead>
  <tr algorithm="indirection expression">
       <td>
          |p|: ptr&lt;|S|,|T|,|A|&gt;
       <td class="nowrap">
          `*`|p|: ref&lt;|S|,|T|,|A|&gt;
       <td>Result is the reference value corresponding to the
           same [=memory view=] as the pointer value |p|.

           If |p| is an [=invalid memory reference=], then the resulting
           reference is also an invalid memory reference.

</table>

## Constant Identifier Expression  ## {#constant-identifier-expr}

<table class='data'>
  <caption>Getting the value of a `let`-declared identifier</caption>
  <thead>
    <tr><th>Precondition<th>Conclusion<th>Description
  </thead>
  <tr algorithm="pipeline-overridable constant value">
       <td>
          |c| is an [=identifier=] [=resolves|resolving=] to
          an [=in scope|in-scope=] [=override declaration=] with type |T|
       <td class="nowrap">
          |c|: |T|
       <td>If pipeline creation specified a value for the [=pipeline constant ID|constant ID=],
           then the result is that value.
           This value may be different for different pipeline instances.<br>
           Otherwise, the result is the value computed for the initializer expression.
           Pipeline-overridable constants appear at module-scope, so evaluation occurs
           before the shader begins execution.<br>
           Note: Pipeline creation fails if no initial value was specified in the API call
           and the `let`-declaration has no initializer expression.
  <tr algorithm="constant value">
       <td>
          |c| is an [=identifier=] [=resolves|resolving=] to
          an [=in scope|in-scope=] `let` declaration with type |T|
       <td class="nowrap">
          |c|: |T|
       <td>Result is the value computed for the initializer expression.<br>
           For a `let` declaration at module scope, evaluation occurs before the shader begins execution.<br>
           For a `let` declaration inside a function, evaluation occurs each time control reaches
           the declaration.<br>
</table>


## Expression Grammar Summary ## {#expression-grammar}

<div class='syntax' noexport='true'>
  <dfn for=syntax>primary_expression</dfn> :

    | [=syntax/ident=] [=syntax/argument_expression_list=] ?

    | [=syntax/type_decl=] [=syntax/argument_expression_list=]

    | [=syntax/const_literal=]

    | [=syntax/paren_expression=]

    | [=syntax/bitcast=] [=syntax/less_than=] [=syntax/type_decl=] [=syntax/greater_than=] [=syntax/paren_expression=]
</div>
<div class='syntax' noexport='true'>
  <dfn for=syntax>paren_expression</dfn> :

    | [=syntax/paren_left=] [=syntax/expression=] [=syntax/paren_right=]
</div>
<div class='syntax' noexport='true'>
  <dfn for=syntax>argument_expression_list</dfn> :

    | [=syntax/paren_left=] ( ( [=syntax/expression=] [=syntax/comma=] ) * [=syntax/expression=] [=syntax/comma=] ? ) ? [=syntax/paren_right=]
</div>
<div class='syntax' noexport='true'>
  <dfn for=syntax>postfix_expression</dfn> :

    | [=syntax/bracket_left=] [=syntax/expression=] [=syntax/bracket_right=] [=syntax/postfix_expression=] ?

    | [=syntax/period=] [=syntax/ident=] [=syntax/postfix_expression=] ?
</div>
<div class='syntax' noexport='true'>
  <dfn for=syntax>unary_expression</dfn> :

    | [=syntax/singular_expression=]

    | [=syntax/minus=] [=syntax/unary_expression=]

    | [=syntax/bang=] [=syntax/unary_expression=]

    | [=syntax/tilde=] [=syntax/unary_expression=]

    | [=syntax/star=] [=syntax/unary_expression=]

    | [=syntax/and=] [=syntax/unary_expression=]
</div>
<div class='syntax' noexport='true'>
  <dfn for=syntax>singular_expression</dfn> :

    | [=syntax/primary_expression=] [=syntax/postfix_expression=] ?
</div>
<div class='syntax' noexport='true'>
  <dfn for=syntax>lhs_expression</dfn> :

    | ( [=syntax/star=] | [=syntax/and=] ) * [=syntax/core_lhs_expression=] [=syntax/postfix_expression=] ?
</div>
<div class='syntax' noexport='true'>
  <dfn for=syntax>core_lhs_expression</dfn> :

    | [=syntax/ident=]

    | [=syntax/paren_left=] [=syntax/lhs_expression=] [=syntax/paren_right=]
</div>
<div class='syntax' noexport='true'>
  <dfn for=syntax>multiplicative_expression</dfn> :

    | [=syntax/unary_expression=]

    | [=syntax/multiplicative_expression=] [=syntax/star=] [=syntax/unary_expression=]

    | [=syntax/multiplicative_expression=] [=syntax/forward_slash=] [=syntax/unary_expression=]

    | [=syntax/multiplicative_expression=] [=syntax/modulo=] [=syntax/unary_expression=]
</div>
<div class='syntax' noexport='true'>
  <dfn for=syntax>additive_expression</dfn> :

    | [=syntax/multiplicative_expression=]

    | [=syntax/additive_expression=] [=syntax/plus=] [=syntax/multiplicative_expression=]

    | [=syntax/additive_expression=] [=syntax/minus=] [=syntax/multiplicative_expression=]
</div>
<div class='syntax' noexport='true'>
  <dfn for=syntax>shift_expression</dfn> :

    | [=syntax/additive_expression=]

    | [=syntax/unary_expression=] [=syntax/shift_left=] [=syntax/unary_expression=]

    | [=syntax/unary_expression=] [=syntax/shift_right=] [=syntax/unary_expression=]
</div>
<div class='syntax' noexport='true'>
  <dfn for=syntax>relational_expression</dfn> :

    | [=syntax/shift_expression=]

    | [=syntax/shift_expression=] [=syntax/less_than=] [=syntax/shift_expression=]

    | [=syntax/shift_expression=] [=syntax/greater_than=] [=syntax/shift_expression=]

    | [=syntax/shift_expression=] [=syntax/less_than_equal=] [=syntax/shift_expression=]

    | [=syntax/shift_expression=] [=syntax/greater_than_equal=] [=syntax/shift_expression=]

    | [=syntax/shift_expression=] [=syntax/equal_equal=] [=syntax/shift_expression=]

    | [=syntax/shift_expression=] [=syntax/not_equal=] [=syntax/shift_expression=]
</div>
<div class='syntax' noexport='true'>
  <dfn for=syntax>short_circuit_and_expression</dfn> :

    | [=syntax/relational_expression=]

    | [=syntax/short_circuit_and_expression=] [=syntax/and_and=] [=syntax/relational_expression=]
</div>
<div class='syntax' noexport='true'>
  <dfn for=syntax>short_circuit_or_expression</dfn> :

    | [=syntax/relational_expression=]

    | [=syntax/short_circuit_or_expression=] [=syntax/or_or=] [=syntax/relational_expression=]
</div>
<div class='syntax' noexport='true'>
  <dfn for=syntax>binary_or_expression</dfn> :

    | [=syntax/unary_expression=]

    | [=syntax/binary_or_expression=] [=syntax/or=] [=syntax/unary_expression=]
</div>
<div class='syntax' noexport='true'>
  <dfn for=syntax>binary_and_expression</dfn> :

    | [=syntax/unary_expression=]

    | [=syntax/binary_and_expression=] [=syntax/and=] [=syntax/unary_expression=]
</div>
<div class='syntax' noexport='true'>
  <dfn for=syntax>binary_xor_expression</dfn> :

    | [=syntax/unary_expression=]

    | [=syntax/binary_xor_expression=] [=syntax/xor=] [=syntax/unary_expression=]
</div>
<div class='syntax' noexport='true'>
  <dfn for=syntax>expression</dfn> :

    | [=syntax/relational_expression=]

    | [=syntax/short_circuit_or_expression=] [=syntax/or_or=] [=syntax/relational_expression=]

    | [=syntax/short_circuit_and_expression=] [=syntax/and_and=] [=syntax/relational_expression=]

    | [=syntax/binary_and_expression=] [=syntax/and=] [=syntax/unary_expression=]

    | [=syntax/binary_or_expression=] [=syntax/or=] [=syntax/unary_expression=]

    | [=syntax/binary_xor_expression=] [=syntax/xor=] [=syntax/unary_expression=]
</div>


# Statements # {#statements}

Statements are program fragments that control its execution.
Statements are generally executed in sequential order; however,
[[#control-flow|control flow statements]] may cause a program to execute in
non-sequential order.

## Compound Statement ## {#compound-statement-section}

A <dfn>compound statement</dfn> is a brace-enclosed sequence of zero or more statements.
When a [=declaration=] is one of those statements, its [=identifier=] is [=in scope=]
from the start of the next statement until the end of the compound statement.

<div class='syntax' noexport='true'>
  <dfn for=syntax>compound_statement</dfn> :

    | [=syntax/brace_left=] [=syntax/statement=] * [=syntax/brace_right=]
</div>

## Assignment Statement ## {#assignment}

An <dfn noexport dfn-for="statement">assignment</dfn> evaluates an expression,
and optionally stores it in memory (thus updating the contents of a variable).


<div class='syntax' noexport='true'>
  <dfn for=syntax>assignment_statement</dfn> :

    | [=syntax/lhs_expression=] ( [=syntax/equal=] | [=syntax/compound_assignment_operator=] ) [=syntax/expression=]

    | [=syntax/underscore=] [=syntax/equal=] [=syntax/expression=]
</div>


The text to the left of the operator token is the <dfn noexport>left-hand side</dfn>,
and the
expression to the right of the operator token is the <dfn noexport>right-hand side</dfn>.

### Simple Assignment ### {#simple-assignment-section}

An [=statement/assignment=] is a <dfn noexport>simple assignment</dfn> when the 
[=left-hand side=] is an expression, and the operator is the [=syntax/equal=] token.
In this case the value of the [=right-hand side=] is written to the memory referenced by the left-hand side.

<table class='data'>
  <thead>
    <tr><th style="width:40%">Precondition<th>Statement<th>Description
  </thead>
  <tr algorithm="updating assignment">
    <td>|r|: ref<|S|,|T|,|A|>,<br>
        |A| is [=access/write=] or [=access/read_write=]<br>
        |e|: |T|,<br>
        |T| is a [=constructible=] type,<br>
        |S| is a writable [=address space=]
    <td class="nowrap">|r| = |e|
    <td>Evaluates |e|, evaluates |r|, then writes the value computed for |e| into
        the [=memory locations=] referenced by |r|.
        Note: if the reference is an [=invalid memory reference=], the write
        may not execute, or may write to a different memory location than
        expected.
</table>

In the simplest case, the left hand side is the name of a variable.
See [[#forming-references-and-pointers]] for other cases.

    <div class='example wgsl' heading='Assignments'>
      <xmp highlight='rust'>
        struct S {
            age: i32;
            weight: f32;
        }
        var<private> person: S;

        fn f() {
            var a: i32 = 20;
            a = 30;           // Replace the contents of 'a' with 30.

            person.age = 31;  // Write 31 into the age field of the person variable.

            var uv: vec2<f32>;
            uv.y = 1.25;      // Place 1.25 into the second component of uv.

            let uv_x_ptr: ptr<function,f32> = &uv.x;
            *uv_x_ptr = 2.5;   // Place 2.5 into the first component of uv.

            var friend: S;
            // Copy the contents of the 'person' variable into the 'friend' variable.
            friend = person;
        }
      </xmp>
    </div>

### Phony Assignment ### {#phony-assignment-section}

An [=statement/assignment=] is a <dfn noexport>phony assignment</dfn> when the 
[=left-hand side=] is an underscore token.
In this case the [=right-hand side=] is evaluated, and then ignored.

<table class='data'>
  <thead>
    <tr><th>Precondition<th>Statement<th>Description
  </thead>
  <tr algorithm="phony-assignment">
    <td>|e|: |T|,<br>
        |T| is [=constructible=], a [=pointer type=], a [=texture=] type, or a [=sampler=] type
    <td class="nowrap">_ = |e|
    <td>Evaluates |e|.

        Note: The resulting value is not stored.
        The `_` token is not an identifier, and therefore cannot be used in an expression.
</table>

A phony-assignment is useful for:
* Calling a function that returns a value, but clearly expressing that the resulting value
    is not needed.
* [=statically accessed|Statically accessing=] a variable, thus establishing it as a part of
    the [=resource interface of a shader|shader's resource interface=].

    Note: A buffer variable's store type may not be constructible, e.g. it contains an atomic type, or a runtime-sized array.
    In these cases, use a pointer to the variable's contents instead.

<div class='example wgsl global-scope' heading='Using phony-assignment to throw away an un-needed function result'>
  <xmp highlight=rust>
    var<private> counter: i32;

    fn increment_and_yield_previous() -> i32 {
      let previous = counter;
      counter = counter + 1;
      return previous;
    }

    fn user() {
      // Increment the counter, but don't use the result.
      _ = increment_and_yield_previous();
    }
  </xmp>
</div>


<div class='example wgsl global-scope' heading='Using phony-assignment to occupy bindings without using them'>
  <xmp highlight=rust>
    struct BufferContents {
        counter: atomic<u32>;
        data: array<vec4<f32>>;
    }
    @group(0) @binding(0) var<storage> buf: BufferContents;
    @group(0) @binding(1) var t: texture_2d<f32>;
    @group(0) @binding(2) var s: sampler;

    @stage(fragment)
    fn shade_it() -> @location(0) vec4<f32> {
      // Declare that buf, t, and s are part of the shader interface, without
      // using them for anything.
      _ = &buf;
      _ = t;
      _ = s;
      return vec4<f32>();
    }
  </xmp>
</div>

### Compound assignment ### {#compound-assignment-sec}

An [=statement/assignment=] is a <dfn noexport>compound assignment</dfn> when the
[=left-hand side=] is an expression, and the operator is one of the [=syntax/compound_assignment_operators=].

<div class='syntax' noexport='true'>
  <dfn for=syntax>compound_assignment_operator</dfn> :

    | [=syntax/plus_equal=]

    | [=syntax/minus_equal=]

    | [=syntax/times_equal=]

    | [=syntax/division_equal=]

    | [=syntax/modulo_equal=]

    | [=syntax/and_equal=]

    | [=syntax/or_equal=]

    | [=syntax/xor_equal=]

    | [=syntax/shift_right_equal=]

    | [=syntax/shift_left_equal=]
</div>

The type requirements, semantics, and behavior of each statement is defined as if
the compound assignment expands as in the following table, except that the reference expression |e1| is evaluated only once.

<table class='data'>
  <thead>
    <tr><th>Statement<th>Expansion
  </thead>
<tr algorithm="add-assign">
    <td class="nowrap">|e1| += |e2|
    <td>|e1| = |e1| + (|e2|)
<tr algorithm="subtract-assign">
    <td class="nowrap">|e1| -= |e2|
    <td>|e1| = |e1| - (|e2|)
<tr algorithm="multiply-assign">
    <td class="nowrap">|e1| *= |e2|
    <td>|e1| = |e1| * (|e2|)
<tr algorithm="divide-assign">
    <td class="nowrap">|e1| /= |e2|
    <td>|e1| = |e1| / (|e2|)
<tr algorithm="modulus-assign">
    <td class="nowrap">|e1| %= |e2|
    <td>|e1| = |e1| % (|e2|)
<tr algorithm="bitwise-and-assign">
    <td class="nowrap">|e1| &= |e2|
    <td>|e1| = |e1| & (|e2|)
<tr algorithm="bitwise-or-assign">
    <td class="nowrap">|e1| |= |e2|
    <td>|e1| = |e1| | (|e2|)
<tr algorithm="bitwise-xor-assign">
    <td class="nowrap">|e1| ^= |e2|
    <td>|e1| = |e1| ^ (|e2|)
<tr algorithm="bitwise-shiftright-assign">
    <td class="nowrap">|e1| >>= |e2|
    <td>|e1| = |e1| >> (|e2|)
<tr algorithm="bitwise-shiftleft-assign">
    <td class="nowrap">|e1| <<= |e2|
    <td>|e1| = |e1| << (|e2|)
</table>

Note: The syntax does not allow a [=compound assignment=] to also be a [=phony assignment=].

Note: Even though the reference |e1| is evaluated once, its underlying memory is accessed twice:
first a [=read access=] gets the old value, and then a [=write access=] stores the updated value.

<div class='example wgsl global-scope' heading="Compound assignment">
  <xmp>
    var<private> next_item: i32 = 0;

    fn advance_item() -> i32 {
       next_item += 1;   // Adds 1 to next_item.
       return next_item - 1;
    }

    fn bump_item() {
      var data: array<f32,10>;
      next_item = 0;
      // Adds 5.0 to data[0], calling advance_item() only once.
      data[advance_item()] += 5.0;
      // next_item will be 1 here.
    }

    fn precedence_example() {
      var value = 1;
      // The right-hand side of a compound assignment is its own expression.
      value *= 2 + 3; // Same as value = value * (2 + 3);
      // 'value' now holds 5.
    }
  </xmp>
</div>

Note: A compound assignment can rewritten as different WGSL code that uses a [=simple assignment=] instead.
The idea is to use a pointer to hold the result of evaluating the reference once.

<p class="note" algorithm="translation compound assignment not vector component">For example,
when |e1| is *not* a reference to a component inside a vector, then
|e1|` += `|e2| can be rewritten as
`{let p = &(`|e1|`); *p = *p + (`|e2|`);}`,
where the identifier `p` is chosen to be different from all other identifiers in the program.
</p>

<p class="note" algorithm="translation compound assignment vector component">When
|e1| is a reference to a component inside a vector, the above technique
needs to be modified because WGSL does not allow [[#address-of-expr|taking the address]] in that case.
For example, if |ev| is a reference to a vector, the statement |ev|`[`|c|`] += ` |e2|
can be rewritten as `{let p = &(`|ev|`); let c0 = ` |c|`; (*p)[c0] = (*p)[c0] + (`|e2|`);}`, where
identifiers `c0` and `p` are chosen to be different from all other identifiers in the program.
</p>

## Increment and Decrement Statements ## {#increment-decrement}

An <dfn noexport>increment statement</dfn> adds 1 to the contents of a variable.
A <dfn noexport>decrement statement</dfn> subtracts 1 from the contents of a variable.

<div class='syntax' noexport='true'>
  <dfn for=syntax>increment_statement</dfn> :

    | [=syntax/lhs_expression=] [=syntax/plus_plus=]
</div>

<div class='syntax' noexport='true'>
  <dfn for=syntax>decrement_statement</dfn> :

    | [=syntax/lhs_expression=] [=syntax/minus_minus=]
</div>

The expression must evaluate to a reference with an [=integer scalar=] [=store type=] and [=access/read_write=] [=access mode=].

<table class='data'>
  <thead>
    <tr><th>Precondition<th>Statement<th>Description
  </thead>
  <tr algorithm="increment statement">
    <td class="nowrap">|r| : ref&lt;<var ignore>SC</var>,|T|,[=access/read_write=]&gt;,<br>
        |T| is [=integer scalar=]<br>
    <td class="nowrap">|r|`++`
    <td>Adds 1 to the contents of memory referenced by |r|.
        <br>Same as |r| += |T|(1)
  <tr algorithm="decrement statement">
    <td class="nowrap">|r| : ref&lt;<var ignore>SC</var>,|T|,[=access/read_write=]&gt;,<br>
        |T| is [=integer scalar=]<br>
    <td class="nowrap">|r|`--`
    <td>Subtracts 1 from the contents of memory referenced by |r|.
        <br>Same as |r| -= |T|(1)
</table>

    <div class='example wgsl' heading='Increment and decrement'>
      <xmp highlight='rust'>
        fn f() {
            var a: i32 = 20;
            a++;
            // Now a contains 21
            a--;
            // Now a contains 20
        }
      </xmp>
    </div>

## Control Flow ## {#control-flow}

Control flow statements may cause the program to execute in non-sequential order.

### If Statement ### {#if-statement}

<div class='syntax' noexport='true'>
  <dfn for=syntax>if_statement</dfn> :

    | [=syntax/if=] [=syntax/expression=] [=syntax/compound_statement=] ( [=syntax/else=] [=syntax/else_statement=] ) ?
</div>
<div class='syntax' noexport='true'>
  <dfn for=syntax>else_statement</dfn> :

    | [=syntax/compound_statement=]

    | [=syntax/if_statement=]
</div>

An <dfn noexport dfn-for="statement">if</dfn> statement conditionally executes at most one [=compound statement=] based on
the evaluation of the condition expressions.

The `if` statements in WGSL use an if/else if/else structure, that contains a single required
`if` clause, zero or more `else if` clauses and a single optional `else` clause.
Each of the expressions for the `if` and `else if` clause conditions must be scalar boolean expressions.

An `if` statement is executed as follows:
* The condition associated with the `if` clause is evaluated.
    If the result is `true`,
    control transfers to the first compound statement (immediately after the parenthesized condition expression).
* Otherwise, the condition of the next `else if` clause in textual order (if one exists) is evaluated
     and, if the result is `true`, control transfers to the associated compound statement.
     * This behavior is repeated for all `else if` clauses until one of the conditions evaluates to `true`.
* If no condition evaluates to `true`, then control transfers to the compound statement
    associated with the `else` clause (if it exists).

### Switch Statement ### {#switch-statement}

<div class='syntax' noexport='true'>
  <dfn for=syntax>switch_statement</dfn> :

    | [=syntax/switch=] [=syntax/expression=] [=syntax/brace_left=] [=syntax/switch_body=] + [=syntax/brace_right=]
</div>
<div class='syntax' noexport='true'>
  <dfn for=syntax>switch_body</dfn> :

    | [=syntax/case=] [=syntax/case_selectors=] [=syntax/colon=] [=syntax/brace_left=] [=syntax/case_body=] ? [=syntax/brace_right=]

    | [=syntax/default=] [=syntax/colon=] [=syntax/brace_left=] [=syntax/case_body=] ? [=syntax/brace_right=]
</div>
<div class='syntax' noexport='true'>
  <dfn for=syntax>case_selectors</dfn> :

    | [=syntax/const_literal=] ( [=syntax/comma=] [=syntax/const_literal=] ) * [=syntax/comma=] ?
</div>
<div class='syntax' noexport='true'>
  <dfn for=syntax>case_body</dfn> :

    | [=syntax/statement=] [=syntax/case_body=] ?

    | [=syntax/fallthrough=] [=syntax/semicolon=]
</div>

A <dfn noexport dfn-for="statement">switch</dfn> statement transfers control to one of a set of case clauses, or to the `default` clause,
depending on the evaluation of a selector expression.

The selector expression must be of a scalar integer type.
If the selector value equals a value in a case selector list, then control is transferred to
the body of that case clause.
If the selector value does not equal any of the case selector values, then control is
transferred to the `default` clause.

Each switch statement must have exactly one default clause.

The case selector values must have the same type as the result of evaluating the selector expression.

A literal value must not appear more than once in the case selectors for a switch statement.

Note: The value of the literal is what matters, not the spelling.
For example `0`, `00`, and `0x0000` all denote the zero value.

When control reaches the end of a case body, control normally transfers to the first statement
after the switch statement.
Alternately, executing a <dfn noexport dfn-for="statement">fallthrough</dfn> statement
transfers control to the body of the next case clause or
default clause, whichever appears next in the switch body.
A `fallthrough` statement must not appear as the last statement in the last clause of a switch.
When a [=declaration=] appears in a case body, its [=identifier=] is [=in scope=] from
the start of the next statement until the end of the case body.

Note: Identifiers declared in a case body are not [=in scope=] of case bodies
which are reachable via a `fallthrough` statement.


### Loop Statement ### {#loop-statement}

<div class='syntax' noexport='true'>
  <dfn for=syntax>loop_statement</dfn> :

    | [=syntax/loop=] [=syntax/brace_left=] [=syntax/statement=] * [=syntax/continuing_statement=] ? [=syntax/brace_right=]
</div>

A <dfn noexport dfn-for="statement">loop</dfn> statement repeatedly executes a <dfn noexport>loop body</dfn>;
the loop body is specified as a [=compound statement=].
Each execution of the loop body is called an <dfn noexport>iteration</dfn>.

The [=identifier=] of a [=declaration=] in a loop is [=in scope=] from the start of the
next statement until the end of the loop body.
The declaration is executed each time it is reached, so each new iteration
creates a new instance of the variable or constant, and re-initializes it.

This repetition can be interrupted by a [=statement/break=], [=statement/return=], or
[=statement/discard=] statement.

Optionally, the last statement in the loop body may be a
[=statement/continuing=] statement.

Note: The loop statement is one of the biggest differences from other shader
languages.

This design directly expresses loop idioms commonly found in compiled code.
In particular, placing the loop update statements at the end of the loop body
allows them to naturally use values defined in the loop body.

<div class='example glsl' heading='GLSL Loop'>
  <xmp>
    int a = 2;
    for (int i = 0; i < 4; i++) {
      a *= 2;
    }
  </xmp>
</div>

<div class='example wgsl function-scope' heading="WGSL Loop">
  <xmp>
    let a: i32 = 2;
    var i: i32 = 0;      // <1>
    loop {
      if i >= 4 { break; }

      a = a * 2;

      i++;
    }
  </xmp>
</div>
* <1> The initialization is listed before the loop.

<div class='example glsl' heading='GLSL Loop with continue'>
  <xmp>
    int a = 2;
    let int step = 1;
    for (int i = 0; i < 4; i += step) {
      if i % 2 == 0 continue;
      a *= 2;
    }
  </xmp>
</div>

<div class='example wgsl function-scope' heading="WGSL Loop with continue">
  <xmp>
    var a: i32 = 2;
    var i: i32 = 0;
    loop {
      if i >= 4 { break; }

      let step: i32 = 1;

      i = i + step;
      if i % 2 == 0 { continue; }

      a = a * 2;
    }
  </xmp>
</div>

<div class='example wgsl function-scope' heading="WGSL Loop with continue and continuing">
  <xmp>
    var a: i32 = 2;
    var i: i32 = 0;
    loop {
      if i >= 4 { break; }

      let step: i32 = 1;

      if i % 2 == 0 { continue; }

      a = a * 2;

      continuing {   // <2>
        i = i + step;
      }
    }
  </xmp>
</div>
* <2> The continue construct is placed at the end of the `loop`

### For Statement ### {#for-statement}

<div class='syntax' noexport='true'>
  <dfn for=syntax>for_statement</dfn> :

    | [=syntax/for=] [=syntax/paren_left=] [=syntax/for_header=] [=syntax/paren_right=] [=syntax/compound_statement=]
</div>

<div class='syntax' noexport='true'>
  <dfn for=syntax>for_header</dfn> :

    | [=syntax/for_init=] ? [=syntax/semicolon=] [=syntax/expression=] ? [=syntax/semicolon=] [=syntax/for_update=] ?
</div>

<div class='syntax' noexport='true'>
  <dfn for=syntax>for_init</dfn> :

    | [=syntax/variable_statement=]

    | [=syntax/assignment_statement=]

    | [=syntax/func_call_statement=]
</div>
<div class='syntax' noexport='true'>
  <dfn for=syntax>for_update</dfn> :

    | [=syntax/increment_statement=]

    | [=syntax/decrement_statement=]

    | [=syntax/assignment_statement=]

    | [=syntax/func_call_statement=]
</div>

The <dfn dfn-for="statement">for</dfn> statement takes the form
`for (initializer; condition; update_part) { body }` and is syntactic sugar on top of a [=statement/loop=] statement with the same `body`.
Additionally:
* If `initializer` is non-empty, it is executed inside an additional [=scope=] before the first [=iteration=].
    The scope of a declaration in the initializer extends to the end of the loop body.
* If `condition` is non-empty, it is checked at the beginning of the loop body and if unsatisfied then a [[#break-statement]] is executed.
* If `update_part` is non-empty, it becomes a [=statement/continuing=] statement at the end of the loop body.

The `initializer` of a for loop is executed once prior to executing the loop.
When a [=declaration=] appears in the initializer, its [=identifier=] is [=in scope=] until the end of the `body`.
Unlike declarations in the `body`, the declaration is not re-initialized each iteration.

The `condition`, `body` and `update_part` execute in that order to form a loop [=iteration=].
The `body` is a special form of [=compound statement=].
The identifier of a declaration in the `body` is [=in scope=] from the start of
the next statement until the end of the `body`.
The declaration is executed each time it is reached, so each new iteration
creates a new instance of the variable or constant, and re-initializes it.

<div class='example glsl' heading="For to Loop transformation">
  <xmp>
    for(var i: i32 = 0; i < 4; i++) {
      if a == 0 {
        continue;
      }
      a = a + 2;
    }
  </xmp>
</div>

Converts to:

<div class='example wgsl function-scope' heading="For to Loop transformation">
  <xmp>
    { // Introduce new scope for loop variable i
      var i: i32 = 0;
      var a: i32 = 0;
      loop {
        if !(i < 4) {
          break;
        }

        if a == 0 {
          continue;
        }
        a = a + 2;

        continuing {
          i++;
        }
      }
    }
  </xmp>
</div>

### While Statement ### {#while-statement}

<div class='syntax' noexport='true'>
  <dfn for=syntax>while_statement</dfn> :

    | [=syntax/while=] [=syntax/expression=] [=syntax/compound_statement=]
</div>

The <dfn noexport dfn-for="statement">while</dfn> statement is a kind of loop parameterized by a condition.
At the start of each loop [=iteration=], a boolean condition is evaluated.
If the condition is false, the while loop ends execution.
Otherwise, the rest of the iteration is executed.

A while loop can be viewed as syntactic sugar over either a [=statement/loop=] or [=statement/for=] statement.
The following statement forms are equivalent:
* `while`  *condition*  `{` *body_statements* `}`
* `loop { if !` *condition* `{break;}` *body_statements* `}`
* `for (;`  *condition* `;) {` *body_statements*  `}`

### Break Statement ### {#break-statement}

<div class='syntax' noexport='true'>
  <dfn for=syntax>break_statement</dfn> :

    | [=syntax/break=]
</div>

A <dfn noexport dfn-for="statement">break</dfn> statement transfers control to the first statement
after the body of the nearest-enclosing [=statement/loop=]
or [=statement/switch=] statement.
A `break` statement must only be used within [=statement/loop=], [=statement/for=], and [=statement/switch=] statements.

When a `break` statement is placed such that it would exit from a loop's [=statement/continuing=] statement,
then:

* The `break` statement must appear as either:
    * The only statement in the `if` clause of an `if` statement that has:
        * no `else` clause or an empty `else` clause
        * no `else if` clauses
    * The only statement in the `else` clause of an `if` statement that has an empty `if` clause and no `else if` clauses.
* That `if` statement must appear last in the `continuing` clause.

<div class='example wgsl function-scope' heading="WGSL Valid loop if-break from a continuing clause">
  <xmp>
    var a: i32 = 2;
    var i: i32 = 0;
    loop {
      let step: i32 = 1;

      if i % 2 == 0 { continue; }

      a = a * 2;

      continuing {
        i = i + step;
        if i >= 4 { break; }
      }
    }
  </xmp>
</div>

<div class='example wgsl function-scope' heading="WGSL Valid loop if-else-break from a continuing clause">
  <xmp>
    var a: i32 = 2;
    var i: i32 = 0;
    loop {
      let step: i32 = 1;

      if i % 2 == 0 { continue; }

      a = a * 2;

      continuing {
        i = i + step;
        if i < 4 {} else { break; }
      }
    }
  </xmp>
</div>

<div class='example wgsl function-scope expect-error' heading="WGSL Invalid breaks from a continuing clause">
  <xmp>
    var a: i32 = 2;
    var i: i32 = 0;

    loop {
      let step: i32 = 1;

      if i % 2 == 0 { continue; }

      a = a * 2;

      continuing {
        i = i + step;
        break;                               // Invalid: too early
        if i < 4 { i++; } else { break; }  // Invalid: if is too complex, and too early
        if i >= 4 { break; } else { i++; } // Invalid: if is too complex
      }
    }
  </xmp>
</div>

### Continue Statement ### {#continue-statement}

<div class='syntax' noexport='true'>
  <dfn for=syntax>continue_statement</dfn> :

    | [=syntax/continue=]
</div>

A <dfn noexport dfn-for="statement">continue</dfn> statement transfers control in the nearest-enclosing [=statement/loop=]:

*  forward to the [=statement/continuing=] statement at the end of the body of that loop, if it exists.
*  otherwise backward to the first statement in the loop body, starting the next [=iteration=].

A `continue` statement must only be used in a [=statement/loop=] or [=statement/for=] statement.
A `continue` statement must not be placed such that it would transfer
control to an enclosing [=statement/continuing=] statement.
(It is a *forward* branch when branching to a `continuing` statement.)

A `continue` statement must not be placed such that it would transfer
control past a declaration used in the targeted [=statement/continuing=] statement.

<div class='example wgsl function-scope expect-error' heading="Invalid continue bypasses declaration">
  <xmp>
    var i: i32 = 0;
    loop {
      if i >= 4 { break; }
      if i % 2 == 0 { continue; } // <3>

      let step: i32 = 2;

      continuing {
        i = i + step;
      }
    }
  </xmp>
</div>
* <3> The `continue` is invalid because it bypasses the declaration of `step` used in the `continuing` construct

### Continuing Statement ### {#continuing-statement}

<div class='syntax' noexport='true'>
  <dfn for=syntax>continuing_statement</dfn> :

    | [=syntax/continuing=] [=syntax/compound_statement=]
</div>

A <dfn dfn-for="statement">continuing</dfn> statement specifies a [=compound statement=] to be executed at the end of a loop [=iteration=].
The construct is optional.

The compound statement must not contain a [=statement/return=] at any compound statement nesting level.

The compound statement must not contain a [=statement/discard=] at any compound statement nesting level nor through function calls.
See [[#behaviors]] for a more formal description of this rule.

### Return Statement ### {#return-statement}

<div class='syntax' noexport='true'>
  <dfn for=syntax>return_statement</dfn> :

    | [=syntax/return=] [=syntax/expression=] ?
</div>

A <dfn noexport dfn-for="statement">return</dfn> statement ends execution of the current function.
If the function is an [=entry point=], then the current shader invocation
is terminated.
Otherwise, evaluation continues with the next expression or statement after
the evaluation of the [=call site=] of the current function invocation.

If the function does not have a [=return type=], then the [=statement/return=] statement is
optional. If the return statement is provided for such a function, it must not
supply a value.
Otherwise the expression must be present, and is called the <dfn>return value</dfn>.
In this case the call site of this function invocation evaluates to the return value.
The type of the return value must match the return type of the function.

### Discard Statement ### {#discard-statement}

A <dfn dfn-for="statement">discard</dfn> statement immediately ends execution of a fragment shader invocation and throws away the fragment.
The `discard` statement must only be used in a [=fragment=] shader stage.

More precisely, executing a `discard` statement will:

* immediately terminate the current invocation, and
* prevent evaluation and generation of a [=return value=] for the [=entry point=], and
* prevent the current fragment from being processed downstream in the [=GPURenderPipeline=].

Only statements
executed prior to the `discard` statement will have observable effects.

Note: A `discard` statement may be executed by any
[=functions in a shader stage|function in a fragment stage=] and the effect is the same:
immediate termination of the invocation.

After a `discard` statement is executed, control flow is non-uniform for the
duration of the entry point.

<div class='example wgsl' heading='Using the discard statement to throw away a fragment'>
  <xmp>
  var<private> will_emit_color: bool = false;

  fn discard_if_shallow(pos: vec4<f32>) {
    if pos.z < 0.001 {
      // If this is executed, then the will_emit_color flag will
      // never be set to true.
      discard;
    }
    will_emit_color = true;
  }

  @stage(fragment)
  fn main(@builtin(position) coord_in: vec4<f32>)
    -> @location(0) vec4<f32>
  {
    discard_if_shallow(coord_in);

    // Set the flag and emit red, but only if the helper function
    // did not execute the discard statement.
    will_emit_color = true;
    return vec4<f32>(1.0, 0.0, 0.0, 1.0);
  }
  </xmp>
</div>

## Function Call Statement ## {#function-call-statement}

<div class='syntax' noexport='true'>
  <dfn for=syntax>func_call_statement</dfn> :

    | [=syntax/ident=] [=syntax/argument_expression_list=]
</div>

A function call statement executes a [=function call=].

Note: If the function [=return value|returns a value=], that value is ignored.

## Statements Grammar Summary ## {#statements-summary}

<div class='syntax' noexport='true'>
  <dfn for=syntax>statement</dfn> :

    | [=syntax/semicolon=]

    | [=syntax/return_statement=] [=syntax/semicolon=]

    | [=syntax/if_statement=]

    | [=syntax/switch_statement=]

    | [=syntax/loop_statement=]

    | [=syntax/for_statement=]

    | [=syntax/while_statement=]

    | [=syntax/func_call_statement=] [=syntax/semicolon=]

    | [=syntax/variable_statement=] [=syntax/semicolon=]

    | [=syntax/break_statement=] [=syntax/semicolon=]

    | [=syntax/continue_statement=] [=syntax/semicolon=]

    | [=syntax/discard=] [=syntax/semicolon=]

    | [=syntax/assignment_statement=] [=syntax/semicolon=]

    | [=syntax/compound_statement=]

    | [=syntax/increment_statement=] [=syntax/semicolon=]

    | [=syntax/decrement_statement=] [=syntax/semicolon=]
</div>


## Statements Behavior Analysis ## {#behaviors}

### Rules ### {#behaviors-rules}

Some statements affecting control-flow are only valid in some contexts.
For example, `fallthrough` is invalid outside of a switch, and `continue` is invalid outside of a loop.
Additionally, the uniformity analysis (see [[#uniformity]]) needs to know when control flow can exit a statement in multiple different ways.

Both goals are achieved by a system for summarizing execution behaviors of statements and expressions. Behavior analysis maps each statement and expression to the set of possible ways execution proceeds after evaluation of the statement or expression completes.
As with type analysis for values and expressions, behavior analysis proceeds bottom up: first determine behaviors for certain basic statements, and then determine behavior for higher level constructs by applying combining rules.

A <dfn export>behavior</dfn> is a set, whose elements may be:
- Return
- Discard
- Break
- Continue
- Fallthrough
- Next

Each of those correspond to a way to exit a compound statement: either through a keyword, or by falling to the next statement ("Next").

We note "*s*: *B*" to say that *s* respects the rules regarding behaviors, and has [=behavior=] *B*.

For each function:
- Its body must be a valid statement by these rules.
- If the function has a return type, the [=behavior=] of its body must be one of {Return} or {Return, Discard}.
- Otherwise, the [=behavior=] of its body must be a subset of {Next, Return, Discard}.

We assign a [=behavior=] to each function: it is its body's [=behavior=] (treating the body as a regular statement), with any "Return" replaced by "Next".
As a consequence of the rules above, a function behavior is always one of {}, {Next}, {Discard}, or {Next, Discard}.

Similarly, we assign a [=behavior=] to each expression, since expressions can include function calls, which can discard.
Like functions, expression behaviors are always one of {}, {Next}, {Discard}, or {Next, Discard}.

Note: There is currently no valid program with an expression that does not have Next in its [=behavior=].
The reason is that only functions without a return type can have such a [=behavior=], and there is no compound expression in which such a function can be called.

<table class='data'>
  <caption>Rules for analyzing and validating the behaviors of statements</caption>
  <thead>
    <tr><th>Statement<th>Preconditions<th>Resulting behavior
  </thead>
  <tr>
    <td class="nowrap">*empty statement*
    <td>
    <td class="nowrap">{Next}
  <tr algorithm="braced statement behavior">
    <td class="nowrap">{|s|}
    <td>|s|: |B|
    <td class="nowrap">|B|
  <tr algorithm="statement sequence behavior">
    <td class="nowrap">|s1| |s2|

        Note: |s1| often ends in a semicolon.

    <td class="nowrap">|s1|: |B1|<br>
        Next in |B1|<br>
        |s2|: |B2|
    <td class="nowrap">(|B1|&#x2216;{Next}) &cup; |B2|
  <tr algorithm="variable declaration behavior">
    <td class="nowrap">var x:T;
    <td>
    <td>{Next}
  <tr algorithm="let declaration behavior">
    <td class="nowrap">let x = |e|;
    <td class="nowrap">|e|: |B|
    <td>|B|
  <tr algorithm="initialized variable declaration behavior">
    <td class="nowrap">var x = |e|;
    <td class="nowrap">|e|: |B|
    <td>|B|
  <tr algorithm="assignment behavior">
    <td class="nowrap">|x| = |e|;
    <td class="nowrap">|x|: |B1|<br>
      |e|: |B2|<br>
      |x| is not `_`
    <td>|B1| &cup; |B2|
  <tr algorithm="phony assignment behavior">
    <td class="nowrap">_ = |e|;
    <td class="nowrap">|e|: |B|
    <td>|B|
  <tr algorithm="function call statement behavior">
    <td class="nowrap">|f|(|e1|, ..., |en|);
    <td class="nowrap">|e1|: |B1|<br>
        ...<br>
        |en|: |Bn|<br>
        |f| has behavior |B|
    <td class="nowrap">|B| &cup; ((|B1| &cup; ... &cup; |Bn|)&#x2216;{Next})
  <tr algorithm="return behaviour">
    <td>return;
    <td>
    <td>{Return}
  <tr algorithm="return value behavior">
    <td class="nowrap">return |e|;
    <td class="nowrap">|e|: |B|<br>
    <td class="nowrap">(|B|&#x2216;{Next}) &cup; {Return}
  <tr algorithm="discard behaviour">
    <td>discard;
    <td>
    <td>{Discard}
  <tr algorithm="break behavior">
    <td>break;
    <td>
    <td>{Break}
  <tr algorithm="continue behavior">
    <td>continue;
    <td>
    <td>{Continue}
  <tr algorithm="fallthrough behavior">
    <td>fallthrough;
    <td>
    <td>{Fallthrough}
  <tr algorithm="if statement behavior">
    <td class="nowrap">if |e| |s1| else |s2|
    <td class="nowrap">|e|: |B|<br>
        |s1|: |B1|<br>
        |s2|: |B2|
    <td class="nowrap">(|B|&#x2216;{Next}) &cup; |B1| &cup; |B2|
  <tr algorithm="loop with continuing without break behavior">
    <td class="nowrap" rowspan=2>loop {|s1| continuing {|s2|}}
    <td class="nowrap">|s1|: |B1|<br>
        |s2|: |B2|<br>
        None of {Continue, Return, Discard} are in |B2|<br>
        Break is not in (|B1| &cup; |B2|)
    <td class="nowrap">(|B1| &cup; |B2|)&#x2216;{Continue, Next}
  <tr algorithm="loop with continuing with break behavior">
    <td class="nowrap">|s1|: |B1|<br>
        |s2|: |B2|<br>
        None of {Continue, Return, Discard} are in |B2|<br/>
        Break is in (|B1| &cup; |B2|)
    <td class="nowrap">(|B1| &cup; |B2| &cup; {Next})&#x2216;{Break, Continue}
  <tr algorithm="switch behavior">
    <td class="nowrap" rowspan=2>switch |e|  {case <var ignore>c1</var>: |s1| ... case <var ignore>cn</var>: |sn|}
    <td class="nowrap">|e|: |B|<br>
        |s1|: |B1|<br>
        ...<br>
        |sn|: |Bn|<br>
        Fallthrough is not in |Bn|<br>
        Break is not in (|B1| &cup; ... &cup; |Bn|)
    <td class="nowrap">((|B|&#x2216;{Next}) &cup; |B1| &cup; ... &cup; |Bn|)&#x2216;{Fallthrough}
  <tr algorithm="switch with break behavior">
    <td class="nowrap">|e|: |B|<br>
        |s1|: |B1|<br>
        ...<br>
        |sn|: |Bn|<br>
        Fallthrough is not in |Bn|<br>
        Break is in (|B1| &cup; ... &cup; |Bn|)
    <td class="nowrap">(|B| &cup; |B1| &cup; ... &cup; |Bn| &cup; {Next})&#x2216;{Break, Fallthrough}
</table>

Note: The empty statement case occurs when a `loop` has an empty body, or when a `for` loop lacks an initialization or update statement.

For the purpose of this analysis:
- `for` loops get desugared (see [[#for-statement]])
- `while` loops get desugared (see [[#while-statement]])
- `loop {s}` is treated as `loop {s continuing {}}`
- `if` statements without an `else` branch are treated as if they had an empty else branch (which adds Next to their [=behavior=])
- `if` statements with `else if` branches are treated as if they were nested simple `if/else` statements
- a [=syntax/switch_body=] starting with `default` behaves just like a [=syntax/switch_body=] starting with `case _:`

<table class='data'>
  <caption>Rules for analyzing and validating the behaviors of expressions</caption>
  <thead>
    <tr><th>Expression<th>Preconditions<th>Resulting behavior
  </thead>
  <tr algorithm="function call behavior">
    <td class="nowrap">|f|(|e1|, ..., |en|)
    <td class="nowrap">|e1|: |B1|<br>
        ...<br>
        |en|: |Bn|<br>
        |f| has behavior |B|
    <td class="nowrap">|B| &cup; ((|B1| &cup; ... &cup; |Bn|)&#x2216;{Next})
  <tr algorithm="literal expression behavior">
    <td class="nowrap">Any literal
    <td>
    <td class="nowrap">{Next}
  <tr algorithm="variable expression behavior">
    <td class="nowrap">Any variable reference
    <td>
    <td class="nowrap">{Next}
  <tr algorithm="array-like index expression behavior">
    <td class="nowrap">|e1|[|e2|]
    <td class="nowrap">|e1|: |B1|<br>
        |e2|: |B2|
    <td class="nowrap">|B1| &cup; |B2|
  <tr algorithm="structure member expression behavior">
    <td class="nowrap">|e|.field
    <td class="nowrap">|e|: |B|
    <td class="nowrap">|B|
  <tr algorithm="short-circuiting or expression behavior">
    <td class="nowrap">|e1| || |e2|
    <td class="nowrap">|e1|: |B1|<br>
        |e2|: |B2|
    <td class="nowrap">|B1| &cup; |B2|
  <tr algorithm="short-circuiting and expression behavior">
    <td class="nowrap">|e1| && |e2|
    <td class="nowrap">|e1|: |B1|<br>
        |e2|: |B2|
    <td class="nowrap">|B1| &cup; |B2|
</table>

Each [=built-in function=] has a [=behavior=] of {Next}.
And each operator application not listed in the table above has the same [=behavior=] as if it were a function call with the same operands and with a function's [=behavior=] of {Next}.

A [=shader-creation error=] results if behavior analysis fails:
- Behavior analysis must be able to determine a non-empty [=behavior=] for each statement, expression, and function.
- The function behaviors must satisfy the rules given above.
- The behaviors of compute and vertex entry points must not contain Discard.

### Notes ### {#behaviors-notes}

This section is informative, non-normative.

Here is the full list of ways that these rules can cause a program to be rejected (this is just restating information already listed above):
- The body of a function (treated as a regular statement) has a behavior not included in {Next, Return, Discard}.
- The body of a function with a return type has a behavior which is neither {Return} nor {Return, Discard}
- A statement without Next in its behavior is not the last in a sequence of statements
- The behavior of a continuing block contains any of Continue, Return, or Discard
- The behavior of the last case of a switch contains Fallthrough
- The behavior of a compute or vertex entry point function contains Discard
- Some obviously infinite loops have an empty behaviour set, and are therefore invalid.

This analysis can be run in linear time, by analyzing the call-graph bottom-up (since the behavior of a function call can depend on the function's code).

### Examples ### {#behaviors-examples}

Here are some examples showing this analysis in action:
<div class='example wgsl expect-error' heading='Trivially dead code is rejected'>
   <xmp highlight='rust'>
    fn simple() -> i32 {
      var a: i32;
      return 0;  // Behavior: {Return}
      a = 1;     // Error: by the rule for sequences of statements, the previous statement should have a behavior that include "Next"
      return 2;
    }
   </xmp>
</div>

<div class='example wgsl expect-error' heading='Compound statements are supported'>
   <xmp highlight='rust'>
    fn nested() -> i32 {
      var a: i32;
      {             // The start of a compound statement.
        a = 2;      // Behavior: {Next}
        return 1;   // Behavior: {Return}
      }             // The compound statement as a whole has behavior {Return}
      a = 1;        // Error: for the same reason as in the previous example, the previous statement is missing "Next" in its behavior
      return 2;
    }
   </xmp>
</div>

<div class='example wgsl' heading='if/then behaves as if there is an empty else'>
   <xmp highlight='rust'>
    fn if_example() {
      var a: i32 = 0;
      loop {
        if a == 5 {
          break;      // Behavior: {Break}
        }             // Behavior of the whole if compound statement: {Break, Next}, as the if has an implicit empty else
        a = a + 1;    // valid, as the previous statement had "Next" in its behavior
      }
    }
   </xmp>
</div>

<div class='example wgsl expect-error' heading='if/then/else has the behavior of both sides'>
   <xmp highlight='rust'>
    fn if_example() {
      var a: i32 = 0;
      loop {
        if a == 5 {
          break;      // Behavior: {Break}
        } else {
          continue;   // Behavior: {Continue}
        }             // Behavior of the whole if compound statement: {Break, Continue}
        a = a + 1;    // Error: the previous statement is missing "Next" in its behavior
      }
    }
   </xmp>
</div>

<div class='example wgsl' heading='if/else if/else behaves like a nested if/else'>
   <xmp highlight='rust'>
    fn if_example() {
      var a: i32 = 0;
      loop {
        // if e1 s1 else if e2 s2 else s3
        // is identical to
        // if e1 else { if e2 s2 else s3 }
        if a == 5 {
          break;      // Behavior: {Break}
        } else if a == 42 {
          continue;   // Behavior: {Continue}
        } else {
          return;     // Behavior {Return}
        }             // Behavior of the whole if compound statement {Break, Continue, Return}
      }               // Behavior of the whole loop compound statement {Next, Return}
    }                 // Behavior of the whole function {Next}
   </xmp>
</div>

<div class='example wgsl' heading='Break in switch becomes Next'>
   <xmp highlight='rust'>
    fn switch_example() {
      var a: i32 = 0;
      switch a {
        default: {
          break;   // Behavior: {Break}
        }
      }            // Behavior: {Next}, as switch replaces Break by Next
      a = 5;       // valid, as the previous statement had Next in its behavior
    }
   </xmp>
</div>

<div class='example wgsl' heading='Obviously infinite loops'>
   <xmp highlight='rust'>
    fn invalid_infinite_loop() {
      loop { }     // Behavior: { }.  Invalid because it's empty.
    }
   </xmp>
</div>

<div class='example wgsl' heading='A conditional continue with continuing statement'>
   <xmp highlight='rust'>
    fn conditional_continue() {
      var a: i32;
      loop {
        if a == 5 { break; } // Behavior: {Break, Next}
        if a % 2 == 1 {      // valid, as the previous statement has Next in its behavior
          continue;            // Behavior: {Continue}
        }                      // Behavior: {Continue, Next}
        a = a * 2;             // valid, as the previous statement has Next in its behavior
        continuing {           // valid as the continuing statement has behavior {Next} which does not include any of {Break, Continue, Discard, Return}
          a = a + 1;
        }
      }                        // The loop as a whole has behavior {Next}, as it absorbs "Continue" and "Next", then replaces "Break" with "Next"
    }
   </xmp>
</div>

<div class='example wgsl' heading='A redundant continue with continuing statement'>
   <xmp highlight='rust'>
    fn redundant_continue_with_continuing() {
      var a: i32;
      loop {
        if a == 5 { break; }
        continue;   // Valid. This is redundant, branching to the next statement.
        continuing {
          a = a + 1;
        }
      }
    }
   </xmp>
</div>

<div class='example wgsl' heading='A continue at the end of a loop body'>
   <xmp highlight='rust'>
    fn continue_end_of_loop_body() {
      for (var i: i32 = 0; i < 5; i++ ) {
        continue;   // Valid. This is redundant, branching to the end of the loop body.
      }             // Behavior: {Next}, as loops absorb "Continue", and "for" loops always add "Next"
    }
   </xmp>
</div>
`for` loops desugar to `loop` with a conditional break. As shown in a previous example, the conditional break has [=behavior=] {Break, Next}, which leads to adding "Next" to the loop's [=behavior=].

<div class='example wgsl expect-error' heading='Effect of a function that discards unconditionally'>
   <xmp highlight='rust'>
    fn always_discard() {
      discard;
    }                   // The whole function has behavior {Discard}
    fn code_after_discard() {
      var a: i32;
      always_discard(); // Behavior: {Discard}
      a = a + 1;        // Error: the previous statement is missing "Next" in its behavior
    }
   </xmp>
</div>

<div class='example wgsl' heading='Effect of a function that discards conditionally'>
   <xmp highlight='rust'>
    fn sometimes_discard(a: i32) {
      if a {
        discard;        // Behavior: {Discard}
      }                 // Behavior: {Next, Discard}
    }                   // The whole function has behavior {Next, Discard}
    fn code_after_discard() {
      var a: i32;
      a = 42;
      sometimes_discard(a);  // Behavior: {Next, Discard}
      a = a + 1;             // Valid
    }                        // The whole function has behavior {Next, Discard}
   </xmp>
</div>

<div class='example wgsl expect-error' heading='return required in functions that have a return type'>
   <xmp highlight='rust'>
    fn missing_return () -> i32 {
      var a: i32 = 0;
      if a == 42 {
        return a;       // Behavior: {Return}
      }                 // Behavior: {Next, Return}
    }                   // Error: Next is invalid in the body of a function with a return type
   </xmp>
</div>

<div class='example wgsl expect-error' heading='continue must be in a loop'>
   <xmp highlight='rust'>
    fn continue_out_of_loop () {
      var a: i32 = 0;
      if a > 0  {
        continue;       // Behavior: {Continue}
      }                 // Behavior: {Next, Continue}
    }                   // Error: Continue is invalid in the body of a function
   </xmp>
</div>
The same example would also be invalid for the same reason if continue was replaced by break or fallthrough.

# Functions # {#functions}

A <dfn dfn-for="function" noexport>function</dfn> performs computational work when invoked.

A function is invoked in one of the following ways:
* By evaluating a function call expression. See [[#function-call-expr]].
* By executing a function call statement. See [[#function-call-statement]].
* An [=entry point=] function is invoked by the WebGPU implementation to perform
    the work of a [=shader stage=] in a [=pipeline=]. See [[#entry-points]]

There are two kinds of functions:
* A [=built-in function=] is provided by the WGSL implementation,
    and is always available to a WGSL program.
    See [[#builtin-functions]].
* A <dfn noexport>user-defined function</dfn> is declared in a WGSL program.

## Declaring a User-defined Function ## {#function-declaration-sec}

A <dfn noexport>function declaration</dfn> creates a user-defined function, by specifying:
* An optional set of attributes.
* The name of the function.
* The formal parameter list: an ordered sequence of zero
    or more [=formal parameter=] declarations,
    separated by commas, and
    surrounded by parentheses.
* An optional, possibly decorated, <dfn noexport>return type</dfn>.
* The <dfn noexport>function body</dfn>.
    This is the set of statements to be executed when the function is [=function call|called=].

A function declaration must only occur at [=module scope=].
A function name is [=in scope=] for the entire program.

A <dfn noexport>formal parameter</dfn> [=declaration=] specifies an [=identifier=] name and a type for a value that must be
provided when invoking the function.
A formal parameter may have attributes.
See [[#function-calls]].
The identifier is [=in scope=] until the end of the function.
Two formal parameters for a given function must not have the same name.

The return type, if specified, must be [=constructible=].

<div class='syntax' noexport='true'>
  <dfn for=syntax>function_decl</dfn> :

    | [=syntax/attribute=] * [=syntax/function_header=] [=syntax/compound_statement=]
</div>
<div class='syntax' noexport='true'>
  <dfn for=syntax>function_header</dfn> :

    | [=syntax/fn=] [=syntax/ident=] [=syntax/paren_left=] [=syntax/param_list=] ? [=syntax/paren_right=] ( [=syntax/arrow=] [=syntax/attribute=] * [=syntax/type_decl=] ) ?
</div>
<div class='syntax' noexport='true'>
  <dfn for=syntax>param_list</dfn> :

    | ( [=syntax/param=] [=syntax/comma=] ) * [=syntax/param=] [=syntax/comma=] ?
</div>
<div class='syntax' noexport='true'>
  <dfn for=syntax>param</dfn> :

    | [=syntax/attribute=] * [=syntax/variable_ident_decl=]
</div>

WGSL defines the following attributes that can be applied to function declarations:
 * [=attribute/stage=]
 * [=attribute/workgroup_size=]

WGSL defines the following attributes that can be applied to function
parameters and return types:
 * [=attribute/builtin=]
 * [=attribute/location=]

<div class='example wgsl' heading='Simple functions'>
  <xmp>
    // Declare the add_two function.
    // It has two formal paramters, i and b.
    // It has a return type of i32.
    // It has a body with a return statement.
    fn add_two(i: i32, b: f32) -> i32 {
      return i + 2;  // A formal parameter is available for use in the body.
    }

    // A compute shader entry point function, 'main'.
    // It has no specified return type.
    // It invokes the ordinary_two function, and captures
    // the resulting value in the named value 'two'.
    @stage(compute) fn main() {
       let six: i32 = add_two(4, 5.0);
    }
  </xmp>
</div>

## Function Calls ## {#function-calls}

A <dfn noexport>function call</dfn> is a statement or expression which invokes a function.

The function containing the function call is the <dfn>calling function</dfn>, or <dfn noexport>caller</dfn>.
The function being invoked is the <dfn>called function</dfn>, or <dfn noexport>callee</dfn>.

The function call:
* Names the [=called function=], and
* Provides a parenthesized, comma-separated list of argument value expressions.

The function call must supply the same number of argument values as there are
[=formal parameter|formal parameters=] in the [=called function=].
Each argument value must evaluate to the same type as the corresponding formal
parameter, by position.

In summary, when calling a function:
1. Execution of the [=calling function=] is suspended.
2. The [=called function=] executes until it [=returns=].
3. Execution of the [=calling function=] resumes.

A called function <dfn>returns</dfn> as follows:
* A [=built-in function=] returns when its work has completed.
* A [=user-defined function=] with a [=return type=] returns when it executes a [=statement/return=] statement.
* A [=user-defined function=] with no [=return type=] returns when it executes a [=statement/return=] statement,
    or when execution reaches the end of its [=function body=].

In detail, when a function call is executed the following steps occur:
1. Function call argument values are evaluated.
    The relative order of evaluation is left-to-right.
2. Execution of the [=calling function=] is suspended.
    All [=function scope=] variables and constants maintain their current values.
3. If the called function is [=user-defined function|user-defined=],
    memory is allocated for each function scope variable in the called function.
    * Initialization occurs as described in [[#var-and-value]].
4. Values for the formal parameters of the called function are determined
    by matching the function call argument values by position.
    For example, in the body of the called function the first formal parameter will denote
    the value of the first argument at the [=call site=].
5. If the called function is [=user-defined function|user-defined=],
    control is transferred to the first statement in its [=function body|body=].
6. The called function is executed, until it [=returns=].
7. Control is transferred back to the calling function, and the called function's execution is
    unsuspended.
    If the called function [=return value|returns a value=], that value is supplied for the
    value of the function call expression.

Note: The current function will not resume execution if the called function or
any descendent called function executes a [=statement/discard=] statement.

The location of a function call is referred to as a <dfn noexport>call site</dfn>.
Call sites are a [=dynamic context=].
As such, the same textual location may represent multiple call sites.

## Restrictions on functions ## {#function-restriction}

* A [=vertex=] shader must return the `position` [=built-in output value=].
    See [[#builtin-values]].
* An entry point must never be the target of a [=function call=].
* If a function has a return type, it must be a [=constructible=] type.
* A [=formal parameter|function parameter=] must one the following types:
    * a constructible type
    * a pointer type
    * a texture type
    * a sampler type
* Each function call argument must evaluate to the type of the corresponding
    function parameter.
    * In particular, an argument that is a pointer must agree with the formal parameter
        on address space, pointee type, and access mode.
* For [=user-defined functions=], a parameter of pointer type must be in one of
    the following address spaces:
    * [=address spaces/function=]
    * [=address spaces/private=]
    * [=address spaces/workgroup=]
* For [=built-in functions=], a parameter of pointer type must be in one of
    the following address spaces:
    * [=address spaces/function=]
    * [=address spaces/private=]
    * [=address spaces/workgroup=]
    * [=address spaces/storage=]
* Each argument of pointer type to a [=user-defined function=] must be one of:
    * An [[#address-of-expr|address-of expression]] of a
        [[#var-identifier-expr|variable identifier expression]]
    * A function parameter
* WGSL assumes no aliasing is present between any combination of
    function parameters and variables.
    As such, a function parameter of pointer type must not be used to read or
    write to any [=memory locations=] of its [=originating variable=] that are
    also written via:
    * Another function parameter in the same function
    * A statement or expression in the function using the originating variable directly

Note: The aliasing restriction applies to memory location written by function
calls in the function.

Note: Recursion is disallowed because cycles are not permitted among any kinds
of declarations.

Issue: Revisit aliasing rules for clarity.

# Entry Points # {#entry-points}

An <dfn noexport>entry point</dfn> is a [=user-defined function=] that performs
the work for a particular [=shader stage=].

## Shader Stages ## {#shader-stages-sec}

WebGPU issues work to the GPU in the form of [=draw command|draw=] or [=dispatch commands=].
These commands execute a pipeline in the context of a set of
[=pipeline input|inputs=], [=pipeline output|outputs=], and attached [=resources=].

A <dfn noexport>pipeline</dfn> describes the work to be performed on the GPU, as a sequence
of stages, some of which are programmable.
In WebGPU, a pipeline is created before scheduling a draw or dispatch command for execution.
There are two kinds of pipelines: GPUComputePipeline, and GPURenderPipeline.

A [=dispatch command=] uses a <dfn noexport>GPUComputePipeline</dfn> to run a
<dfn noexport>compute shader stage</dfn> over a logical
grid of points with a controllable amount of parallelism,
while reading and possibly updating buffer and image resources.

A [=draw command=] uses a <dfn noexport>GPURenderPipeline</dfn> to run a multi-stage process with
two programmable stages among other fixed-function stages:

* A <dfn noexport>vertex shader stage</dfn> maps input attributes for a single vertex into
    output attributes for the vertex.
* Fixed-function stages map vertices into graphic primitives (such as triangles)
    which are then rasterized to produce fragments.
* A <dfn noexport>fragment shader stage</dfn> processes each fragment,
    possibly producing a fragment output.
* Fixed-function stages consume a fragment output, possibly updating external state
    such as color attachments and depth and stencil buffers.

The WebGPU specification describes pipelines in greater detail.

WGSL defines three <dfn noexport>shader stages</dfn>, corresponding to the
programmable parts of pipelines:

* <dfn noexport>compute</dfn>
* <dfn noexport>vertex</dfn>
* <dfn noexport>fragment</dfn>

Each shader stage has its own set of features and constraints, described elsewhere.

## Entry Point Declaration ## {#entry-point-decl}

To create an [=entry point=], declare a [=user-defined function=] with a [=attribute/stage=] attribute.

When configuring a [=pipeline=] in the WebGPU API,
the entry point's function name maps to the `entryPoint` attribute of the
[[WebGPU#GPUProgrammableStage]] object.

The entry point's [=formal parameters=] form the stage's [=pipeline inputs=].
The entry point's [=return type=], if specified, forms the stage's [=pipeline output=].
Each input and output must be an [=entry point IO type=].

Note: [=Compute=] entry points never have a return type.

<div class='example wgsl global-scope' heading='Entry Point'>
  <xmp>
    @stage(vertex)
    fn vert_main() -> @builtin(position) vec4<f32> {
      return vec4<f32>(0.0, 0.0, 0.0, 1.0);
    }

    @stage(fragment)
    fn frag_main(@builtin(position) coord_in: vec4<f32>) -> @location(0) vec4<f32> {
      return vec4<f32>(coord_in.x, coord_in.y, 0.0, 1.0);
    }

    @stage(compute)
    fn comp_main() { }
  </xmp>
</div>

The set of <dfn noexport>functions in a shader stage</dfn> is the union of:

* The entry point function for the stage.
* The targets of function calls from within the body of a function
    in the shader stage, whether or not that call is executed.

The union is applied repeatedly until it stabilizes.
It will stabilize in a finite number of steps.

### Function Attributes for Entry Points ### {#entry-point-attributes}

WGSL defines the following attributes that can be applied to entry point declarations:
 * [=attribute/stage=]
 * [=attribute/workgroup_size=]

ISSUE: Can we query upper bounds on workgroup size dimensions?  Is it independent of the shader, or
  a property to be queried after creating the shader module?

<div class='example wgsl global-scope' heading='workgroup_size Attribute'>
  <xmp>
    @stage(compute) @workgroup_size(8,4,1)
    fn sorter() { }

    @stage(compute) @workgroup_size(8u)
    fn reverser() { }

    // Using an pipeline-overridable constant.
    @id(42) override block_width = 12u;
    @stage(compute) @workgroup_size(block_width)
    fn shuffler() { }

    // Error: workgroup_size must be specified on compute shader
    @stage(compute)
    fn bad_shader() { }
  </xmp>
</div>

## Shader Interface ## {#shader-interface}

The shader interface is the set of objects
through which the shader accesses data external to the [=shader stage=],
either for reading or writing.
The interface includes:

* Pipeline inputs and outputs
* Buffer resources
* Texture resources
* Sampler resources

These objects are represented by module-scope variables in certain [=address spaces=].

When an [=identifier=] used in a [=function declaration=] [=resolves=] to a [=module scope|module-scope=] variable,
then we say the variable is <dfn>statically accessed</dfn> by the function.
Static access of a `let`-declared constant is defined similarly.
Note that being statically accessed is independent of whether an execution of the shader
will actually evaluate the expression referring to the variable,
or even execute the statement that may enclose the expression.

More precisely, the <dfn noexport>interface of a shader stage</dfn> consists of:
  - all parameters of the entry point
  - the result value of the entry point
  - all [=module scope=] variables that are [=statically accessed=] by [=functions in a shader stage|functions in the shader stage=],
    and which are in address spaces [=address spaces/uniform=], [=address spaces/storage=], or [=address spaces/handle=].

### Pipeline Input and Output Interface ### {#pipeline-inputs-outputs}

The <dfn dfn>entry point IO type</dfn>s include the following:
  - Built-in values. See [[#builtin-inputs-outputs]].
  - User-defined IO. See [[#user-defined-inputs-outputs]]
  - Structures containing only built-in values and user-defined IO.
    The structure must not contain a nested structure.

A <dfn noexport>pipeline input</dfn> is data provided to the shader stage from upstream in the pipeline.
A pipeline input is denoted by the arguments of the entry point.

A <dfn noexport>pipeline output</dfn> is data the shader provides for further processing downstream in the pipeline.
A pipeline output is denoted by the return type of the entry point.

Each pipeline input or output is one of:

* A built-in value. See [[#builtin-inputs-outputs]].
* A user-defined value. See [[#user-defined-inputs-outputs]].

#### Built-in Inputs and Outputs #### {#builtin-inputs-outputs}

A <dfn noexport>built-in input value</dfn> provides access to system-generated control information.
The set of built-in inputs are listed in [[#builtin-values]].

A built-in input for stage *S* with name *X* and type *T*<sub>*X*</sub> is accessed via a
[=formal parameter=] to an [=entry point=] for [=shader stage=] *S*, in one of two ways:

1. The parameter has attribute `builtin(`*X*`)` and is of type *T*<sub>*X*</sub>.
2. The parameter has structure type, where one of the structure members has attribute `builtin(`*X*`)` and is of type *T*<sub>*X*</sub>.

Conversely, when a parameter or member of a parameter for an entry point has a `builtin` attribute,
the corresponding builtin must be an input for the entry point's shader stage.

A <dfn noexport>built-in output value</dfn> is used by the shader to convey
control information to later processing steps in the pipeline.
The set of built-in outputs are listed in [[#builtin-values]].

A built-in output for stage *S* with name *Y* and type *T*<sub>*Y*</sub> is set via the [=return value=] for an
[=entry point=] for [=shader stage=] *S*, in one of two ways:

1. The entry point [=return type=] has attribute `builtin(`*Y*`)` and is of type *T*<sub>*Y*</sub>.
2. The entry point [=return type=] has structure type, where one of the structure members has attribute `builtin(`*Y*`)` and is of type *T*<sub>*Y*</sub>.

Conversely, when the return type or member of a return type for an entry point has a `builtin` attribute,
the corresponding builtin must be an output for the entry point's shader stage.

Note: The `position` built-in is both an output of a vertex shader, and an input to the fragement shader.

#### User-defined Inputs and Outputs #### {#user-defined-inputs-outputs}

User-defined data can be passed as input to the start of a pipeline, passed
between stages of a pipeline or output from the end of a pipeline.
User-defined IO must not be passed to [=compute=] shader entry points.
User-defined IO must be of [=numeric scalar=] or [=numeric vector=] type,
or of a structure type whose members are numeric scalars or vectors.
All user-defined IO must be assigned locations (See [[#input-output-locations]]).

#### Interpolation #### {#interpolation}

Authors can control how user-defined IO data is interpolated through the use of
the [=attribute/interpolate=] attribute.
WGSL offers two aspects of interpolation to control: the type of
interpolation, and the sampling of the interpolation.

The <dfn noexport>interpolation type</dfn> must be one of:
* `perspective` - Values are interpolated in a perspective correct manner.
* `linear` - Values are interpolated in a linear, non-perspective correct manner.
* `flat` - Values are not interpolated.
    Interpolation sampling is not used with `flat` interpolation.

The <dfn noexport>interpolation sampling</dfn> must be one of:
* `center` - Interpolation is performed at the center of the pixel.
* `centroid` - Interpolation is performed at a point that lies within all the
    samples covered by the fragment within the current primitive.
    This value is the same for all samples in the primitive.
* `sample` - Interpolation is performed per sample.
    The [=fragment=] shader is invoked once per sample when this attribute is
    applied.

For user-defined IO of scalar or vector floating-point type:
* If the interpolation attribute is not specified, then `@interpolate(perspective, center)` is assumed.
* If the interpolation attribute is specified with an interpolation type:
    * If the interpolation type is `flat`, then interpolation sampling must not be specified.
    * If the interpolation type is `perspective` or `linear`, then:
         * Any interpolation sampling is valid.
         * If interpolation sampling is not specified, `center` is assumed.

User-defined IO of scalar or vector integer type must always be specified as
`@interpolate(flat)`.

Interpolation attributes must match between [=vertex=] outputs and [=fragment=]
inputs with the same [=attribute/location=] assignment within the same [=pipeline=].

#### Input-output Locations #### {#input-output-locations}

Each location can store a value up to 16 bytes in size.
The byte size of a type is defined using the *SizeOf* column in [[#alignment-and-size]].
For example, a four-component vector of floating-point values occupies a single location.

Locations are specified via the [=attribute/location=] attribute.

Every user-defined input and output must have a fully specified set of
locations.
Each structure member in the entry point IO must be one of either a built-in value
(see [[#builtin-inputs-outputs]]), or assigned a location.

Locations must not overlap within each of the following sets:
* Members within a structure type.
    This applies to any structure, not just those used in pipeline inputs or outputs.
* An entry point's pipeline inputs,
    i.e. locations for its formal parameters, or for the members of its formal parameters of structure type.

Note: Location numbering is distinct between inputs and outputs:
Location numbers for an entry point's pipeline inputs do not conflict with location numbers for the entry point's pipeline outputs.

Note: No additional rule is required to prevent location overlap within an entry point's outputs.
When the output is a structure, the first rule above prevents overlap.
Otherwise, the output is a scalar or a vector, and can have only a single location assigned to it.

Note: The number of available locations for an entry point is defined by the WebGPU API.

<div class='example wgsl applying location attribute' heading='Applying location attributes'>
  <xmp>
    struct A {
      @location(0) x: f32;
      // Despite locations being 16-bytes, x and y cannot share a location
      @location(1) y: f32;
    }

    // in1 occupies locations 0 and 1.
    // in2 occupies location 2.
    // The return value occupies location 0.
    @stage(fragment)
    fn fragShader(in1: A, @location(2) in2: f32) -> @location(0) vec4<f32> {
     // ...
    }
  </xmp>
</div>

User-defined IO can be mixed with built-in values in the same structure. For example,

<div class='example wgsl mixing builtins and user-defined IO' heading='Mixing builtins and user-defined IO'>
  <xmp>
    // Mixed builtins and user-defined inputs.
    struct MyInputs {
      @location(0) x: vec4<f32>;
      @builtin(front_facing) y: bool;
      @location(1) @interpolate(flat) z: u32;
    }

    struct MyOutputs {
      @builtin(frag_depth) x: f32;
      @location(0) y: vec4<f32>;
    }

    @stage(fragment)
    fn fragShader(in1: MyInputs) -> MyOutputs {
      // ...
    }
  </xmp>
</div>

<div class='example wgsl invalid locations' heading='Invalid location assignments'>
  <xmp>
    struct A {
      @location(0) x: f32;
      // Invalid, x and y cannot share a location.
      @location(0) y: f32;
    }

    struct B {
      @location(0) x: f32;
    }

    struct C {
      // Invalid, structures with user-defined IO cannot be nested.
      b: B;
    }

    struct D {
      x: vec4<f32>;
    }

    @stage(fragment)
    // Invalid, location cannot be applied to a structure type.
    fn fragShader1(@location(0) in1: D) {
      // ...
    }

    @stage(fragment)
    // Invalid, in1 and in2 cannot share a location.
    fn fragShader2(@location(0) in1: f32, @location(0) in2: f32) {
      // ...
    }

    @stage(fragment)
    // Invalid, location cannot be applied to a structure.
    fn fragShader3(@location(0) in1: vec4<f32>) -> @location(0) D {
      // ...
    }
  </xmp>
</div>

### Resource Interface ### {#resource-interface}

A <dfn noexport>resource</dfn> is an object,
other than a [[#pipeline-inputs-outputs|pipeline input or output]],
which provides access to data external to a [=shader stage=].
Resources are shared by all invocations of the shader.

There are four kinds of resources:

* [=uniform buffers=]
* [=storage buffers=]
* textures
* samplers

The <dfn noexport>resource interface of a shader</dfn> is the set of module-scope
resource variables [=statically accessed=] by
[=functions in a shader stage|functions in the shader stage=].

Each resource variable must be declared with both [=attribute/group=] and [=attribute/binding=]
attributes.
Together with the shader's stage, these identify the binding address
of the resource on the shader's pipeline.
See [[WebGPU#pipeline-layout|WebGPU &sect; GPUPipelineLayout]].

Bindings must not alias within a shader stage:
two different variables in the resource interface of a given
shader must not have the same group and binding values, when considered as a pair of values.

### Resource Layout Compatibility ### {#resource-layout-compatibility}

WebGPU requires that a shader's resource interface match the [[WebGPU#pipeline-layout|layout of the pipeline]]
using the shader.

Each WGSL variable in a resource interface must be bound to a WebGPU resource with
a compatible
[[WebGPU#binding-resource-type|resource type]] and
[[WebGPU#binding-type|binding type]],
where compatibility is defined by the following table.
<table class='data'>
  <caption>WebGPU binding type compatibility</caption>
  <thead>
    <tr><th>WGSL resource
        <th>WebGPU<br>[[WebGPU#binding-resource-type|Resource type]]
        <th colspan=2>WebGPU [[WebGPU#binding-type|Binding type]]
  </thead>
  <tr><td>[=uniform buffer=]
      <td rowspan=3>[[WebGPU#dictdef-gpubufferbinding|GPUBufferBinding]]
      <td rowspan=3>GPUBufferBindingType
      <td>[[WebGPU#dom-gpubufferbindingtype-uniform|uniform]]
  <tr><td>[=storage buffer=] with [=access/read_write=] access
      <td>[[WebGPU#dom-gpubufferbindingtype-storage|storage]]
  <tr><td>[=storage buffer=] with [=access/read=] access
      <td>[[WebGPU#dom-gpubufferbindingtype-read-only-storage|read-only-storage]]
  <tr><td rowspan=2>sampler
      <td rowspan=3>[[WebGPU#gpusampler|GPUSampler]]
      <td rowspan=3>GPUSamplerBindingType
      <td>[[WebGPU#dom-gpusamplerbindingtype-filtering|filtering]]
  <tr>
      <td>[[WebGPU#dom-gpusamplerbindingtype-non-filtering|non-filtering]]
  <tr><td>sampler_comparison
      <td>[[WebGPU#dom-gpusamplerbindingtype-comparison|comparison]]
  <tr><td rowspan=5>sampled texture
      <td rowspan=5>[[WebGPU#gputextureview|GPUTextureView]]
      <td rowspan=5>GPUTextureSampleType
      <td>[[WebGPU#dom-gputexturesampletype-float|float]]
  <tr>
      <td>[[WebGPU#dom-gputexturesampletype-unfilterable-float|unfilterable-float]]
  <tr>
      <td>[[WebGPU#dom-gputexturesampletype-sint|sint]]
  <tr>
      <td>[[WebGPU#dom-gputexturesampletype-uint|uint]]
  <tr>
      <td>[[WebGPU#dom-gputexturesampletype-depth|depth]]
  <tr><td>[=write-only storage texture=]
      <td>[[WebGPU#gputextureview|GPUTextureView]]
      <td>GPUStorageTextureAccess
      <td>[[WebGPU#dom-gpustoragetextureaccess-write-only|write-only]]
</table>

See the [[WebGPU#abstract-opdef-validating-gpuprogrammablestage|WebGPU API]]
specification for interface validation requirements.

# Language Extensions # {#language-extensions}

The WGSL language is expected to evolve over time.

An <dfn noexport>extension</dfn> is a named grouping for a coherent
set of modifications to a particular version of the WGSL specification, consisting of any combination of:
* Addition of new concepts and behaviours via new syntax, including:
    * declarations, statements, attributes, and built-in functions.
* Removal of restrictions in the current specification or in previously published extensions.
* Syntax for reducing the set of permissible behaviours.
* Syntax for limiting the features available to a part of the program.
* A description of how the extension interacts with the existing specification, and optionally with other extensions.

Hypothetically, extensions could be used to:
* Add numeric scalar types, such as 16-bit integers.
* Add syntax to constrain floating point rounding mode.
* Add syntax to signal that a shader does not use atomic types.
* Add new kinds of statements.
* Add new built-in functions.
* Add constraints on how shader invocations execute.
* Add new shader stages.

## Enable Directive ## {#enable-directive-section}

An <dfn noexport>enable directive</dfn> indicates that the functionality
described by a particular named
[=extension=] may be used in the source text after the directive itself.
That is, language functionality described by the extension may be used in any
source text after the `enable` directive.

The directive must not appear inside the text of any [=declaration=].
(If it were a declaration, it would be at [=module scope=].)

The directive uses an [=identifier=] to name the extension, but does not
create a [=scope=] for the identifier.
Use of the identifier by the directive does not conflict with the
use of that identifier as the name in any [=declaration=].

<div class='syntax' noexport='true'>
  <dfn for=syntax>enable_directive</dfn> :

    | [=syntax/enable=] [=syntax/ident=] [=syntax/semicolon=]
</div>

Note: The grammar rule includes the terminating semicolon token,
ensuring the additional functionality is usable only after that semicolon.
Therefore any WGSL implementation can parse the entire `enable` directive.
When an implementation encounters an enable directive for an unsupported extension,
the implementation can issue a clear diagnostic.

<div class='example wgsl using extensions' heading="Using hypothetical extensions">
  <xmp>
    // Enable a hypothetical IEEE-754 binary16 floating point extension.
    enable f16;
    enable f16; // A redundant enable directive is ok.
    // Enable a hypothetical extension adding syntax for controlling
    // the rounding mode on f16 arithmetic.
    enable rounding_mode_f16;

    // Assuming the f16 extension enables use of the f16 type:
    //    - as function return value
    //    - as the type for let declaration
    //    - as a type constructor, with an i32 argument
    //    - as operands to the division operator: /
    fn halve_it(x: f16) -> f16 {
       let two: f16 = f16(2);
       return x / two;
    }

    @round_to_even_f16 // Attribute enabled by the rounding_mode_f16 extension
    fn triple_it(x: f16) -> f16 {
       return x * f16(3); // Uses round-to-even.
    }
  </xmp>
</div>


# WGSL Program # {#wgsl-program}

A WGSL program is a sequence of optional [=directives=] followed by [=module scope=] [=declarations=].

<div class='syntax' noexport='true'>
  <dfn for=syntax>translation_unit</dfn> :

    | [=syntax/global_directive=] * [=syntax/global_decl=] *
</div>

<div class='syntax' noexport='true'>
  <dfn for=syntax>global_decl</dfn> :

    | [=syntax/semicolon=]

    | [=syntax/global_variable_decl=] [=syntax/semicolon=]

    | [=syntax/global_constant_decl=] [=syntax/semicolon=]

    | [=syntax/type_alias_decl=] [=syntax/semicolon=]

    | [=syntax/struct_decl=]

    | [=syntax/function_decl=]
</div>

## Limits ## {#limits}

A program must satisfy the following limits:

<table class='data'>
  <caption>Quantifiable shader complexity limits</caption>
  <thead>
    <tr><th>Limit<th>Maximum value
  </thead>
    <tr><td>Number of members in a [=structure=] type<td>16383
    <tr><td>[=Nesting depth=] of a [=composite=] type<td>255
    <tr><td>Number of [=formal parameter|parameters=] for a function<td>255
    <tr><td>Number of case selector values in a [=statement/switch=] statement<td>16383
</table>

# Execution # {#execution}

[[#technical-overview]] describes how a shader is invoked and partitioned into [=invocations=].
This section describes further constraints on how invocations execute,
individually and collectively.

## Program Order Within an Invocation ## {#program-order}

Each statement in a WGSL program may be executed zero or more times during
execution.
For a given invocation, each execution of a given statement represents a unique
<dfn noexport>dynamic statement instance</dfn>.

When a statement includes an expression, the statement’s semantics determines:
* Whether the expression is evaluated as part of statement execution.
* The relative ordering of evaluation between independent expressions in the statement.

Expression nesting defines data dependencies which must be satisfied to
complete evaluation.
That is, a nested expression must be evaluated before the enclosing expression
can be evaluated.
The order of evaluation for operands of an expression is left-to-right in
WGSL.
For example, `foo() + bar()` must evaluate `foo()` before `bar()`.
See [[#expressions]].

Statements in a WGSL program are executed in control flow order.
See [[#statements]] and [[#function-calls]].

## Uniformity ## {#uniformity}

### Terminology and concepts ### {#uniformity-concepts}

The following definitions are merely informative, trying to give an intuition for what the analysis in the next subsection is computing.
The analysis is what actually defines these concepts, and when a program is valid or breaks the uniformity rules.

For a given group of invocations:
- control flow is said to be uniform at a point in the program if all invocations execute in lockstep at that program point.
- an expression is said to be uniform if it is in uniform control flow, and all invocations compute the same value for it.
- a local variable is said to be uniform, if at every point where it is live, all invocations have the same value in that variable.

### Uniformity analysis overview ### {#uniformity-overview}

Some functions (e.g. barriers and derivatives) are only safe to call in uniform control flow.
In this section we specify an analysis that verifies that these functions are only called in such a context.

<div class="note">Note: This analysis has the following desirable properties:
      - Sound (meaning that it rejects every program that would break the uniformity requirements of builtins)
      - Linear time complexity (in the number of tokens in the program)
      - Refactoring a piece of code into a function, or inlining a function, cannot make a shader invalid if it was valid before the transformation
      - If the analysis refuses a program, it provides a straightforward chain of implications that can be used by the user agent to craft a good error message
</div>

The analysis analyzes each function, verifying that there is a context where it is safe to call this function. It rejects the program as invalid if there is no such context.

At the same time, it computes metadata about the function to help analyze its callers in turn.
This means that the call graph must first be built, and functions must be analyzed from the leaves upwards, i.e. from functions that call no function outside the standard library toward the entry point.
This way, whenever a function is analyzed, the metadata for all of its callees has already been computed.
There is no risk of being trapped in a cycle, as recurrence is forbidden in the language.

Note: another way of saying the same thing is that we do a topological sort of functions ordered by the "is a (possibly indirect) callee of" partial order, and analyze them in that order.

### Analyzing the uniformity requirements of a function ### {#uniformity-function}

Each function is analyzed in two phases.

The first phase walks over the syntax of the function, building a directed graph along the way based on the rules in the following subsections.
The second phase explores that graph, resulting in either rejecting the program, or computing the constraints on calling this function.

<div class="note">Note: apart from two special nodes RequiredToBeUniform and MayBeNonUniform, all nodes can be understood as having one of the following meanings:
        - The control flow at a specific program point is required to be uniform
        - The value of an expression is required to be uniform
        - A variable is required to be uniform

        An edge can be understood as an implication from the statement corresponding to its source node to the statement corresponding to its target node.

        To express that something must always be uniform (e.g. the control flow at the call site of a derivative), we add an edge from RequiredToBeUniform to the corresponding node.
        One way to understand this, is that RequiredToBeUniform corresponds to the proposition True, so that RequiredToBeUniform -> X is the same as saying that X is true.

        Reciprocally, to express that we cannot ensure the uniformity of something (e.g. a variable which holds the thread id), we add an edge from the corresponding node to MayBeNonUniform.
        One way to understand this, is that MayBeNonUniform corresponds to the proposition False, so that X -> MayBeNonUniform is the same as saying that X is false.

        A consequence of this interpretation is that every node reachable from RequiredToBeUniform corresponds to something which must be uniform for the program to be valid, and every node from which cannotBeUniform is reachable corresponds to something whose uniformity we cannot guarantee. It follows that we have a uniformity violation (and thus reject the program) if there is any path from RequiredToBeUniform to MayBeNonUniform.
</div>

In more detail, here is what we compute for each function:

* A tag about the control-flow in which the function can be called: one of {AlwaysRequiredToBeUniform, RequiredToBeUniformForControlFlowAfter}
* A tag for each parameter of the function: one of {AlwaysRequiredToBeUniform, RequiredToBeUniformForControlFlowAfter, RequiredToBeUniformForReturnValue, NoRestriction}
* A tag for the function as a whole: one of {ControlFlowMayBeNonUniformAfter, ReturnValueMayBeNonUniform, NoRestriction}

Here is the algorithm for computing this data for a given function:

* Create nodes called "RequiredToBeUniform", "MayBeNonUniform", "CF_start", "CF_return", and if the function is non-void a node called "Value_return"
* Create one node for each parameter of the function which we'll call "arg_i"
* Walk over the syntax of the function, adding nodes and edges to the graph following the rules of the next sections ([[#uniformity-statements]], [[#uniformity-function-calls]], [[#uniformity-expressions]]), using CF_start as the starting control-flow for the function's body.
* Look at which nodes are reachable from "RequiredToBeUniform"
    * If this set includes the node "MayBeNonUniform", then reject the program.
    * If this set includes "CF_start", then the control-flow in which the function can be called is AlwaysRequiredToBeUniform.
    * Otherwise it is RequiredToBeUniformForControlFlowAfter
    * For each "arg_i" in this set, the corresponding parameter is AlwaysRequiredToBeUniform
    * Remove from the graph all nodes that have been visited
* Look at which nodes are reachable from "CF_return"
    * If this set includes "MayBeNonUniform", then the function is ControlFlowMayBeNonUniformAfter
    * For each "arg_i" in this set, the corresponding parameter is RequiredToBeUniformForControlFlowAfter
    * Remove from the graph all nodes that have been visited
* If "Value_return" exists, look at which nodes are reachable from it
    * If this set includes "MayBeNonUniform", then the function is ReturnValueMayBeNonUniform
    * For each "arg_i" in this set, the corresponding parameter is RequiredToBeUniformForReturnValue
* If the function has not been assigned a tag, then it is NoRestriction.
* For each parameter, if it has not been assigned a tag, then it is NoRestriction.

Note: The entire graph can be destroyed at this point. The tags listed above are all that we need to remember to analyze callers of this function.

### Uniformity rules for statements ### {#uniformity-statements}

The rules for analyzing statements take as argument both the statement itself and the node corresponding to control flow at the beginning of it (which we'll note "CF" below) and return both of the following:

* A node corresponding to control flow at the exit of it
* A set of new nodes and edges to add to the graph

In the table below, `(CF1, S) => CF2` means "run the analysis on S starting with control flow CF1, apply the required changes to the graph, and name the resulting control flow CF2".
Similarly, `(CF1, E) => (CF2, V)` means "run the analysis on expression E, starting with control flow CF1, apply the required changes to the graph, and name the resulting control flow node CF2 and the resulting value node V" (see next section for the analysis of expressions).

We have a similar set of rules for expressions in left-value positions, that we denote by `LValue: (CF, E) => (CF, L)`. Instead of computing the node which corresponds to the uniformity of the value, it computes the node which corresponds to the uniformity of the variable we are addressing.

When several edges have to be created we use `X -> {Y, Z}` as a short-hand for `X -> Y, X -> Z`.

<table class='data'>
  <caption>Uniformity rules for statements</caption>
  <thead>
    <tr><th>Statement<th>New nodes<th>Recursive analyses<th>Resulting control flow node<th>New edges
  </thead>
  <tr><td class="nowrap">{*s*}
      <td>
      <td class="nowrap">(*CF*, *s*) => *CF'*
      <td>*CF'*
      <td>
  <tr><td class="nowrap">*s1* *s2*

        Note: *s1* often ends in a semicolon.

      <td>
      <td class="nowrap">(*CF*, *s1*) => *CF1*<br>
          (*CF1*, *s2*) => *CF2*
      <td>*CF2*
      <td>
  <tr><td class="nowrap">if *e* *s1* else *s2*<br>, with behavior {Next}
      <td>
      <td rowspan=2 class="nowrap">(*CF*, *e*) => (*CF'*, *V*)<br>
          (*V*, *s1*) => *CF1*<br>
          (*V*, *s2*) => *CF2*
      <td>*CF*
      <td>
  <tr><td class="nowrap">if *e* *s1* else *s2*<br>, with another behavior
      <td>*CFend*
      <td>*CFend*
      <td class="nowrap">*CFend* -> {*CF1*, *CF2*}
  <tr><td class="nowrap">loop {*s1* continuing {*s2*}}<br>, with behavior {Next}
      <td rowspan=2>*CF'*
      <td rowspan=2 class="nowrap">(*CF'*, *s1*) => *CF1*<br>
          (*CF1*, *s2*) => *CF2*
      <td>*CF*
      <td rowspan=2 class="nowrap">*CF'* -> {*CF2*, *CF*}
  <tr><td class="nowrap">loop {*s1* continuing {*s2*}}<br>, with another behavior
      <td>*CF'*
  <tr><td class="nowrap">loop {*s1*}, with behavior {Next}
      <td rowspan=2>*CF'*
      <td rowspan=2 class="nowrap">(*CF'*, *s1*) => *CF1*
      <td>*CF*
      <td rowspan=2 class="nowrap">*CF'* -> {*CF1*, *CF*}
  <tr><td class="nowrap">loop {*s1*}, with another behavior
      <td>*CF'*
  <tr><td class="nowrap">switch *e* case _: *s_1* .. case _: *s_n*<br>, with behavior {Next}
      <td>
      <td rowspan=2 class="nowrap">(*CF*, *e*) => (*CF'*, *V*)<br>
        (*V*, *s_1*) => *CF_1*<br>
        ...<br>
        if *s_(n-1)* may fallthrough, (*CF_(n-1)*, *s_n*) => *CF_n*<br>
        else (*V*, *s_n*) => *CF_n*
      <td>*CF*
      <td>
  <tr><td class="nowrap">switch *e* case _: *s_1* .. case _: *s_n*<br>, with another behavior
      <td>*CFend*
      <td>*CFend*
      <td class="nowrap">*CFend* -> {*CF_1*, ..., *CF_n*}
  <tr><td class="nowrap">var x: T;
      <td rowspan=5>
      <td rowspan=5>
      <td rowspan=5>*CF*
      <td rowspan=5>
  <tr><td class="nowrap">break;
  <tr><td class="nowrap">continue;
  <tr><td class="nowrap">fallthrough;
  <tr><td class="nowrap">discard;
  <tr><td class="nowrap">return;
      <td>
      <td>
      <td>*CF*
      <td>*CF_return* -> *CF*
  <tr><td class="nowrap">return *e*;
      <td>
      <td class="nowrap">(*CF*, *e*) => (*CF'*, *V*)
      <td>*CF'*
      <td>*CF_return* -> *CF'*<br>
          *Value_return* -> *V*
  <tr><td class="nowrap">*e2* = *e1*;
      <td>
      <td class="nowrap">(*CF*, *e1*) => (*CF1*, *V1*)<br>
          LValue: (*CF1*, *e2*) => (*CF2*, *L2*)
      <td>*CF2*
      <td>*L2* -> *V1*
  <tr><td class="nowrap">_ = *e*
      <td>
      <td class="nowrap">(*CF*, *e*) => (*CF'*, *V*)
      <td>*CF'*
      <td>
  <tr><td class="nowrap">let x = *e*;
      <td rowspan=2>
      <td rowspan=2 class="nowrap">(*CF*, *e*) => (*CF'*, V)
      <td rowspan=2>*CF'*
      <td rowspan=2>
  <tr><td class="nowrap">var x = *e*;
</table>

Analysis of [[#for-statement|for]] and [[#while-statement|while]] loops follows
from their respective desugaring translations to [[#loop-statement|loop]] statements.

In [[#switch-statement|switch]], a `default` block is treated exactly like a case block with regards to uniformity.

Note: If the set of behaviors (see [[#behaviors]]) for an if, switch, or loop statement is {Next}, this means that we either did not diverge within the statement, or we reconverged, so we pick the node corresponding to control flow at the start of the statement as the node corresponding to control flow at the exit of the statement.

### Uniformity rules for function calls ### {#uniformity-function-calls}

The most complex rule is for function calls:
- For each argument, apply the corresponding expression rule, with the control flow at the exit of the previous argument (using the control flow at the beginning of the function call for the first argument). Name the corresponding value nodes "arg_i" and the corresponding control flow nodes "CF_i"
- Create two new nodes, named "Result" and "CF_after"
- If the control-flow at the start of the function was tagged AlwaysRequiredToBeUniform, then add an edge from RequiredToBeUniform to the last CF_i
- Otherwise add an edge from CF_after to the last CF_i
- If the function was tagged ControlFlowMayBeNonUniformAfter, then add an edge from CF_after to MayBeNonUniform
- Else if it was tagged ReturnValueMayBeNonUniform, then add an edge from Result to MayBeNonUniform
- Add an edge from Result to CF_after
- For each argument *i*:
    - If the corresponding parameter was tagged AlwaysRequiredToBeUniform, then add an edge from RequiredToBeUniform to arg_i
    - Else if it was tagged RequiredToBeUniformForControlFlowAfter, then add an edge from CF_after to arg_i
    - Else if it was tagged RequiredToBeUniformForReturnValue, then add an edge from Result to arg_i

Note: Notice that this rule only requires adding a number of edges bounded by 3 + the number of parameters of the functions, independently of how complex the implementation of the function might be. This is key to the linear complexity of the overall algorithm.

Most built-in functions have tags of:
- for the control-flow in which they can be called: RequiredToBeUniformForControlFlowAfter
- for the function as a whole: NoRestriction
- for each parameter: RequiredToBeUniformForReturnValue

Here is the list of exceptions:
- All functions in [[#sync-builtin-functions]] are AlwaysRequiredToBeUniform
- All functions in [[#derivative-builtin-functions]], [[#texturesample]], [[#texturesamplebias]], and [[#texturesamplecompare]] are AlwaysRequiredToBeUniform and ReturnValueMayBeNonUniform

### Uniformity rules for expressions ### {#uniformity-expressions}

The rules for analyzing expressions take as argument both the expression itself and the node corresponding to control flow at the beginning of it (which we'll note "CF" below) and return the following:

* A node corresponding to control flow at the exit of it
* A node corresponding to its value
* A set of new nodes and edges to add to the graph

<table class='data'>
  <caption>Uniformity rules for expressions (in normal rvalue position)</caption>
  <thead>
    <tr><th>Expression<th>New nodes<th>Recursive analyses<th>Resulting control flow node, value node<th>New edges
  </thead>
  <tr><td class="nowrap">*e1* || *e2*
      <td rowspan=2>
      <td rowspan=2 class="nowrap">(*CF*, *e1*) => (*CF1*, *V1*)<br>
          (*V1*, *e2*) => (*CF2*, *V2*)
      <td rowspan=2 class="nowrap">*CF2*, *V2*
      <td rowspan=2>
  <tr><td class="nowrap">*e1* && *e2*
  <tr><td class="nowrap">Literal
      <td>
      <td>
      <td class="nowrap">*CF*, *CF*
      <td>
   <tr><td class="nowrap">reference to function-scope variable, let-declaration, or non-built-in parameter "x"
      <td>*Result*
      <td class="nowrap">*X* is the node corresponding to "x"
      <td class="nowrap">*CF*, *Result*
      <td class="nowrap">*Result* -> {*CF*, *X*}
   <tr><td class="nowrap">reference to uniform built-in value "x"
      <td>
      <td>
      <td class="nowrap">*CF*, *CF*
      <td>
   <tr><td class="nowrap">reference to non-uniform built-in value "x"
      <td>
      <td>
      <td class="nowrap">*CF*, *MayBeNonUniform*
      <td>
   <tr><td class="nowrap">reference to read-only module-scope variable "x"
      <td>
      <td>
      <td class="nowrap">*CF*, *CF*
      <td>
   <tr><td class="nowrap">reference to non-read-only module-scope variable "x"
      <td>
      <td>
      <td class="nowrap">*CF*, *MayBeNonUniform*
      <td>
   <tr><td class="nowrap">op *e*, where "op" is a unary operator
      <td rowspan=2>
      <td rowspan=2 class="nowrap">(*CF*, *e*) => (*CF'*, *V*)
      <td rowspan=2 class="nowrap">*CF'*, *V*
      <td rowspan=2>
   <tr><td class="nowrap">*e*.field
   <tr><td class="nowrap">*e1* op *e2*, where op is a non-short-circuiting binary operator
      <td rowspan=2> *Result*
      <td rowspan=2 class="nowrap">(*CF*, *e1*) => (*CF1*, *V1*)<br>
          (*CF1*, *e2*) => (*CF2*, *V2*)
      <td rowspan=2 class="nowrap">*CF2*, *Result*
      <td rowspan=2 class="nowrap">*Result* -> {*V1*, *V2*}
   <tr><td class="nowrap">e1[e2]
</table>

The following built-in input variables are considered uniform:
- workgroup_id
- num_workgroups

All other ones (see [[#builtin-values]]) are considered non-uniform.

<table class='data'>
  <caption>Uniformity rules for expressions in lvalue positions</caption>
  <thead>
    <tr><th>Expression<th>New nodes<th>Recursive analyses<th>Resulting control flow node, variable node<th>New edges
  </thead>
  <tr><td class="nowrap">reference to function-scope variable, let-declaration, or parameter "x"
      <td>
      <td class="nowrap">*X* is the node corresponding to "x"
      <td class="nowrap">*CF*, *X*
      <td>
  <tr><td class="nowrap">reference to module-scope variable "x"
      <td>
      <td>
      <td class="nowrap">*CF*, *MayBeNonUniform*
      <td>
  <tr><td class="nowrap">*e*.field
      <td>
      <td class="nowrap">LValue: (*CF*, *e*) => (*CF1*, *L1*)
      <td class="nowrap">*CF1*, *L1*
      <td>
  <tr><td class="nowrap">*e1*[*e2*]
      <td>
      <td class="nowrap">LValue: (*CF*, *e1*) => (*CF1*, *L1*)<br>
          (*CF1*, *e2*) => (*CF2*, *V2*)
      <td class="nowrap">*CF2*, *L1*
      <td class="nowrap">*L1* -> *V2*
</table>

### Annotating the uniformity of every point in the control-flow ### {#uniformity-optional-diagnosis-mode}

This entire subsection is non-normative.

If implementers want to provide developers with a diagnostic mode that shows for each point in the control-flow of the entire shader whether it is uniform or not (and thus whether it would be valid to call a function that requires uniformity there), we suggest the following:
- Run the (mandatory, normative) analysis described in the previous subsections, keeping the graph for every function.
- Reverse all edges in all of those graphs
- Go through each function, starting with the entry point and never visiting a function before having visited all of its callers:
    - Add an edge from MayBeNonUniform to every argument that was non-uniform in at least one caller
    - Add an edge from MayBeNonUniform to CF_start if the function was called in non-uniform control-flow in at least one caller
    - Look at which nodes are reachable from MayBeNonUniform. Every node visited is an expression or point in the control-flow whose uniformity cannot be proven by the analysis

Any node which is not visited by these reachability analyses can be proven to be uniform by the analysis (and so it would be safe to call a derivative or similar function there).

Note: The bottom-up analysis is still required, as it lets us know what edges to add to the graphs when encountering calls.

## Compute Shaders and Workgroups ## {#compute-shader-workgroups}

A <dfn noexport for="compute shader stage">workgroup</dfn> is a set of invocations which
concurrently execute a [=compute shader stage=] [=entry point=],
and share access to shader variables in the [=address spaces/workgroup=] address space.

The <dfn noexport>workgroup grid</dfn> for a compute shader is the set of points
with integer coordinates *(i,j,k)* with:

*  0 &leq; i &lt; workgroup_size_x
*  0 &leq; j &lt; workgroup_size_y
*  0 &leq; k &lt; workgroup_size_z

where *(workgroup_size_x, workgroup_size_y, workgroup_size_z)* is
the value specified for the [=attribute/workgroup_size=] attribute of the
entry point.

There is exactly one invocation in a workgroup for each point in the workgroup grid.

An invocation's <dfn noexport>local invocation ID</dfn> is the coordinate
triple for the invocation's corresponding workgroup grid point.

When an invocation has [=local invocation ID=] (i,j,k), then its
<dfn noexport>local invocation index</dfn> is

  i +
  (j * workgroup_size_x) +
  (k * workgroup_size_x * workgroup_size_y)

<p algorithm="local index range">Note that if a workgroup has |W| invocations,
then each invocation |I| the workgroup has a unique local invocation index |L|(|I|)
such that 0 &le; |L|(|I|) &lt; |W|,
and that entire range is covered.</p>

A compute shader begins execution when a WebGPU implementation
removes a dispatch command from a queue and begins the specified work on the GPU.
The dispatch command specifies a <dfn noexport>dispatch size</dfn>,
which is an integer triple *(group_count_x, group_count_y, group_count_z)*
indicating the number of workgroups to be executed, as described in the following.

The <dfn noexport>compute shader grid</dfn> for a particular dispatch
is the set of points with integer coordinates *(CSi,CSj,CSk)* with:

*  0 &leq; CSi &lt; workgroup_size_x &times; group_count_x
*  0 &leq; CSj &lt; workgroup_size_y &times; group_count_y
*  0 &leq; CSk &lt; workgroup_size_z &times; group_count_z

where *workgroup_size_x*,
*workgroup_size_y*, and
*workgroup_size_z* are as above for the compute shader entry point.

The work to be performed by a compute shader dispatch is to execute exactly one
invocation of the entry point for each point in the compute shader grid.

An invocation's <dfn noexport>global invocation ID</dfn> is the coordinate
triple for the invocation's corresponding compute shader grid point.

The invocations are organized into workgroups, so that each invocation
*(CSi, CSj, CSk)* is identified with the workgroup grid point

   ( *CSi* mod workgroup_size_x ,
     *CSj* mod workgroup_size_y ,
     *CSk* mod workgroup_size_z )

in <dfn noexport>workgroup ID</dfn>

   ( &lfloor; *CSi* &div; workgroup_size_x &rfloor;,
     &lfloor; *CSj* &div; workgroup_size_y &rfloor;,
     &lfloor; *CSk* &div; workgroup_size_z &rfloor;).

WebGPU provides no guarantees about:

* Whether invocations from different workgroups execute concurrently.
    That is, you cannot assume more than one workgroup executes at a time.
* Whether, once invocations from a workgroup begin executing, that other workgroups
    are blocked from execution.
    That is, you cannot assume that only one workgroup executes at a time.
    While a workgroup is executing, the implementation may choose to
    concurrently execute other workgroups as well, or other queued but unblocked work.
* Whether invocations from one particular workgroup begin executing before
    the invocations of another workgroup.
    That is, you cannot assume that workgroups are launched in a particular order.

## Collective Operations ## {#collective-operations}

### Barriers ### {#barrier}

A barrier is a [[#sync-builtin-functions|synchronization built-in function]]
that orders memory operations in a program.
A <dfn noexport>control barrier</dfn> is executed by all invocations in the
same [=compute shader stage/workgroup=] as if it were executed concurrently.
As such, control barriers must only be executed in uniform control flow in a
[=compute shader stage|compute=] shader.

### Derivatives ### {#derivatives}

A <dfn noexport>partial derivative</dfn> is the rate of change of a value along an axis.

Fragment shader invocations operating on neighbouring fragments (in screen-space coordinates)
collaborate to compute approximate partial derivatives.
These neighbouring fragments are referred to as a <dfn noexport>quad</dfn>.

Partial derivatives of the *fragment coordinate* are computed implicitly as part
of operation of the following built-in functions:
* [[#texturesample|textureSample]],
* [[#texturesamplebias|textureSampleBias]], and
* [[#texturesamplecompare|textureSampleCompare]].

For these, the derivatives help determine the mip levels of texels to be sampled, or in the case of
`textureSampleCompare`, sampled and compared against a reference value.

Partial derivatives of *invocation-specified* values are computed by the
built-in functions described in [[#derivative-builtin-functions]]:
* dpdx, dpdxCoarse, and dpdxFine compute partial derivatives along the x axis.
* dpdy, dpdyCoarse, and dpdyFine compute partial derivatives along the y axis.
* fwidth, fwidthCoarse, and fwidthFine compute the Manhattan metric over the associated x and y partial derivatives.

Because neighbouring invocations must collaborate to compute derivatives,
these functions must only be invoked in uniform control flow in a fragment shader.

## Floating Point Evaluation ## {#floating-point-evaluation}

WGSL follows the [[!IEEE-754|IEEE-754]] standard for floating point computation with
the following exceptions:
* No floating point exceptions are generated.
* Signaling NaNs may not be generated.
    Any signaling NaN may be converted to a quiet NaN.
* Implementations may assume that NaNs, infinities are not present
    * Note: This means some functions (e.g. `min` and `max`)
        may not return the expected result due to optimizations about the presence
        of NaNs and infinities.
* Implementations may ignore the sign of a zero.
    That is, a zero with a positive sign may behave like a zero a with a negative sign, and vice versa.
* No rounding mode is specified.
* Implementations may flush denormalized value on the input and/or output of
    any operation listed in [[#floating-point-accuracy]].
    * Other operations are required to preserve denormalized numbers.
* The accuracy of operations is given in [[#floating-point-accuracy]].

### Floating Point Accuracy ### {#floating-point-accuracy}

<div algorithm="correctly rounded">
Let |x| be the exact real-valued or infinite result of an operation when computed with unbounded precision.
The <dfn>correctly rounded</dfn> result of the operation for floating point type |T| is:
* |x|, when |x| is in |T|,
* Otherwise:
    * the smallest value in |T| greater than |x|, or
    * the largest value in |T| less than |x|.

</div>

That is, the result may be rounded up or down:
WGSL does not specify a rounding mode.

Note: Floating point types include positive and negative infinity, so
the correctly rounded result may be finite or infinite.

The units in the last place, <dfn noexport>ULP</dfn>, for a floating point
number `x` is the minimum distance between two non-equal floating point numbers
`a` and `b` such that `a` &le; `x` &le; `b` (i.e. `ulp(x) =
min`<sub>`a,b`</sub>`|b - a|`).

In the following tables, the accuracy of an operation is provided among five
possibilities:
* Correct result (for non-floating point return values)
* [=Correctly rounded=]
* A relative error bound expressed as [=ULP=]
* A function that the accuracy is <dfn noexport>inherited from</dfn>.
    That is, the accuracy is equal to implementing the operation in terms of the derived function.
* An absolute error bound

For any accuracy values specified over a range, the accuracy is undefined for
results outside that range.

If an allowable return value for any operation is greater in magnitude than the
largest representable finite floating-point value, then that operation may additionally
return either the infinity with the same sign or the largest finite
value with the same sign.

<table class='data'>
  <caption>Accuracy of expressions</caption>
  <thead>
    <tr><th>Expression<th>Accuracy<th>
  </thead>

  <tr><td>`x + y`<td>Correctly rounded
  <tr><td>`x - y`<td>Correctly rounded
  <tr><td>`x * y`<td>Correctly rounded
  <tr><td>`x / y`<td>2.5 ULP for `|y|` in the range [2<sup>-126</sup>, 2<sup>126</sup>]
  <tr><td>`x % y`<td>Derived from `x - y * trunc(x/y)`
  <tr><td>`-x`<td>Correctly rounded

  <tr><td>`x == y`<td>Correct result
  <tr><td>`x != y`<td>Correct result
  <tr><td>`x < y`<td>Correct result
  <tr><td>`x <= y`<td>Correct result
  <tr><td>`x > y`<td>Correct result
  <tr><td>`x >= y`<td>Correct result
</table>

<table class='data'>
  <caption>Accuracy of built-in functions</caption>
  <thead>
    <tr><th>Built-in Function<th>Accuracy
  </thead>

  <tr><td>`abs(x)`<td>Correctly rounded
  <tr><td>`acos(x)`<td>Inherited from `atan2(sqrt(1.0 - x * x), x)`
  <tr><td>`asin(x)`<td>Inherited from `atan2(x, sqrt(1.0 - x * x))`
  <tr><td>`atan(x)`<td>4096 ULP
  <tr><td>`atan2(y, x)`<td>4096 ULP
  <tr><td>`ceil(x)`<td>Correctly rounded
  <tr><td>`clamp(x,low,high)`<td>Correctly rounded
  <tr><td>`cos(x)`<td>Absolute error &le; 2<sup>-11</sup> inside the range of [-&pi;, &pi;]
  <tr><td>`cosh(x)`<td>Inherited from `(exp(x) - exp(-x)) * 0.5`
  <tr><td>`cross(x, y)`<td>Inherited from `(x[i] * y[j] - x[j] * y[i])`
  <tr><td>`degrees(x)`<td>Inherited from `x * 57.295779513082322865`
  <tr><td>`distance(x, y)`<td>Inherited from `length(x - y)`
  <tr><td>`exp(x)`<td>3 + 2 * |x| ULP
  <tr><td>`exp2(x)`<td>3 + 2 * |x| ULP
  <tr><td class="nowrap">`faceForward(x, y, z)`<td>Inherited from `select(-x, x, dot(z, y) < 0.0)`
  <tr><td>`floor(x)`<td>Correctly rounded
  <tr><td>`fma(x, y, z)`<td>Inherited from `x * y + z`
  <tr><td>`fract(x)`<td>Correctly rounded
  <tr><td>`frexp(x)`<td>Correctly rounded
  <tr><td>`inverseSqrt(x)`<td>2 ULP
  <tr><td>`ldexp(x, y)`<td>Correctly rounded
  <tr><td>`length(x)`<td>Inherited from `sqrt(dot(x, x))`
  <tr><td>`log(x)`<td>3 ULP outside the range [0.5, 2.0].<br>Absolute error &lt; 2<sup>-21</sup> inside the range [0.5, 2.0]
  <tr><td>`log2(x)`<td>3 ULP outside the range [0.5, 2.0].<br>Absolute error &lt; 2<sup>-21</sup> inside the range [0.5, 2.0]
  <tr><td>`max(x, y)`<td>Correctly rounded
  <tr><td>`min(x, y)`<td>Correctly rounded
  <tr><td>`mix(x, y, z)`<td>Inherited from `x * (1.0 - z) + y * z`
  <tr><td>`modf(x)`<td>Correctly rounded
  <tr><td>`normalize(x)`<td>Inherited from `x / length(x)`
  <tr><td>`pow(x, y)`<td>Inherited from `exp2(y * log2(x))`
  <tr><td>`radians(x)`<td>Inherited from `x * 0.017453292519943295474`
  <tr><td>`reflect(x, y)`<td>Inherited from `x - 2.0 * dot(x, y) * y`
  <tr><td>`refract(x, y, z)`<td>Inherited from `z * x - (z * dot(y, x) + sqrt(k)) * y`,<br>where `k = 1.0 - z * z * (1.0 - dot(y, x) * dot(y, x))`<br>If `k < 0.0` the result is precisely 0.0
  <tr><td>`round(x)`<td>Correctly rounded
  <tr><td>`sign(x)`<td>Correctly rounded
  <tr><td>`sin(x)`<td>Absolute error &le; 2<sup>-11</sup> inside the range [-&pi;, &pi;]
  <tr><td>`sinh(x)`<td>Inherited from `(exp(x) - exp(-x)) * 0.5`
  <tr><td>`smoothStep(low, high, x)`<td>Inherited from `t * t * (3.0 - 2.0 * t)`,<br>where `t = clamp((x - low) / (high - low), 0.0, 1.0)`
  <tr><td>`sqrt(x)`<td>Inherited from `1.0 / inverseSqrt(x)`
  <tr><td>`step(edge, x)`<td>Correctly rounded
  <tr><td>`tan(x)`<td>Inherited from `sin(x) / cos(x)`
  <tr><td>`tanh(x)`<td>Inherited from `sinh(x) / cosh(x)`
  <tr><td>`trunc(x)`<td>Correctly rounded

</table>

<dfn noexport>Reassociation</dfn> is the reordering of operations in an
expression such that the answer is the same if computed exactly. For example:
* `(a + b) + c` reassociates to `a + (b + c)`
* `(a - b) + c` reassociates to `(a + c) - b`
* `(a * b) / c` reassociates to `(a / c) * b`

However, the result may not be the same when computed in floating point.
The reassociated result may be inaccurate due to approximation, or may trigger
an overflow or NaN when computing intermediate results.

An implementation may reassociate operations.

An implementation may fuse operations if the transformed expression is
at least as accurate as the original formulation.
For example, some fused multiply-add implementations can be more accurate
than performing a multiply followed by an addition.

### Floating Point Conversion ### {#floating-point-conversion}

In this section, a floating point type may be any of:
* The [=f32=] type in WGSL.
* A hypothetical type corresponding to a binary format defined by the [[!IEEE-754|IEEE-754]]
    floating point standard.

    Note: The binary16 format is referenced in this way.

Note: Recall that the [=f32=] WGSL type corresponds to the IEEE-754 binary32 format.

When converting a floating point scalar value to an integral type:
* If the original value is exactly representable in the destination type, then the result is that value.
* Otherwise, the original value is rounded toward zero.
    * If the rounded value is exactly representable in the destination type, the result is that value.
    * Otherwise, the result is the value in the destination type that is closest to the rounded value.

Note: In other words, floating point to integer conversion rounds toward zero, then saturates.

Note: The result in the overflow case may not yield the value with the maximum magnitude in the target type, because
that value may not be exactly representable in the original floating point type.
For example, the maximum value in [=u32=] is 4294967295, but 4294967295.0 is not exactly representable in `f32`.
For any real number |x| with 4294967040 &leq; |x| &leq; 4294967295,
the f32 value nearest to |x| is either larger than 429467295 or rounds down to 4294967040.
Therefore the maximum u32 value resulting from a floating point conversion is 4294967040u.

When converting a value to a floating point type:
* If the original value is exactly representable in the destination type, then the result is that value.
    * If the original value is zero and of integral type, then the resulting value has a zero sign bit.
* Otherwise, the original value is not exactly representable.
    * If the original value is different from but lies between two adjacent values representable in the destination type,
         then the result is one of those two values.
         WGSL does not specify whether the larger or smaller representable
         value is chosen, and different instances of such a conversion may choose differently.
    * Otherwise, if the original value lies outside the range of the destination type.
         * This does not occur when the original types is one of [=i32=] or [=u32=] and the destination type is [=f32=].
         * This does not occur when the source type is a floating point type with fewer exponent and mantissa bits.
         * If the source type is a floating point type with more mantissa bits than the destination type, then:
             * The extra mantissa bits of the source value may be discarded (treated as if they are 0).
                 * If the resulting value is the maximum normal value of the destination type, then that is the result.
             * Otherwise the result is the infinity value with the same sign as the source value.
    * Otherwise, if the original value is a NaN for the source type, then the result is a NaN in the destination type.

NOTE: An integer value may lie between two adjacent representable floating point values.
In particular, the [=f32=] type uses 23 explicit fractional bits.
Additionally, when the floating point value is in the normal range (the exponent is neither extreme value), then the mantissa is
the set of fractional bits together with an extra 1-bit at the most significant position at bit position 23.
Then, for example, integers 2<sup>28</sup> and 1+2<sup>28</sup> both map to the same floating point value: the difference in the
least significant 1 bit is not representable by the floating point format.
This kind of collision occurs for pairs of adjacent integers with a magnitude of at least 2<sup>25</sup>.

Issue: Check behaviour of the f32 to f16 conversion for numbers just beyond the max normal f16 values.
I've written what an NVIDIA GPU does.  See https://github.com/google/amber/pull/918 for an executable test case.

# Memory Model # {#memory-model}

In general, WGSL follows the [[!VulkanMemoryModel|Vulkan Memory Model]].
The remainder of this section describes how WGSL programs map to the
Vulkan Memory Model.

Note: The Vulkan Memory Model is a textual version of a [formal Alloy
model](https://github.com/KhronosGroup/Vulkan-MemoryModel/blob/master/alloy/spirv.als).

## Memory Operation ## {#memory-operation}

In WGSL, a [=read access=] is equivalent to a memory read operation in
the Vulkan Memory Model.
A WGSL, a [=write access=] is equivalent to a memory write operation in
the Vulkan Memory Model.

A [=read access=] occurs when an invocation executes one of the following:
* An evaluation of the [=Load Rule=]
* Any [[#texture-builtin-functions|texture builtin function]] except:
    * [[#texturedimensions|textureDimensions]]
    * [[#texturestore|textureStore]]
    * [[#texturenumlayers|textureNumLayers]]
    * [[#texturenumlevels|textureNumLevels]]
    * [[#texturenumsamples|textureNumSamples]]
* Any atomic built-in function except [[#atomic-store|atomicStore]]

A [=write access=] occurs when an invocation executes one of the following:
* An [=statement/assignment=] statement
* A [[#texturestore|textureStore]] built-in function
* Any atomic built-in function except [[#atomic-load|atomicLoad]]
    * [[#atomic-rmw|atomicCompareExchangeWeak]] only performs a write if the
        `exchanged` member of the returned result is `true`

[[#atomic-rmw|Atomic read-modify-write]] built-in functions perform a single
memory operation that is both a [=read access=] and a [=write access=].

Read and write accesses do not occur under any other circumstances.
Read and write accesses are collectively known as [=memory model memory
operation|memory operations=] in the Vulkan Memory Model.

A memory operation accesses exactly the set of [=memory location|locations=]
associated with the particular [=memory view=] used in the operation.  For
example, a memory read that accesses a [=u32=] from a struct containing
multiple members, only reads the memory locations associated with that u32
member.

<div class='example wgsl memory locations accessed' heading="Accessing memory locations">
  <xmp>
    struct S {
      a : f32;
      b : u32;
      c : f32;
    }

    @group(0) @binding(0)
    var<storage> v : S;

    fn foo() {
      let x = v.b; // Does not access memory locations for v.a or v.c.
    }
  </xmp>
</div>

## Memory Model Reference ## {#memory-model-reference}

Each module-scope variable in WGSL forms a unique [=memory model
reference=] for the lifetime of a given entry point.
Each function-scope variable in WGSL forms a unique [=memory model
reference=] for the lifetime of the variable.

## Scoped Operations ## {#scoped-operations}

When an invocation performs a scoped operation, it will affect one or two sets
of invocations.
These sets are the memory scope and the execution scope.  The <dfn
noexport>memory scope</dfn> specifies the set of invocations that will see any
updates to memory contents affected by the operation.
For [[#sync-builtin-functions|synchronization built-in functions]], this also
means that all affected memory operations program ordered before the function
are visible to affected operations program ordered after the function.
The <dfn noexport>execution scope</dfn> specifies the set of invocations which
may participate in an operation (see [[#collective-operations]]).

[[#atomic-builtin-functions|Atomic built-in functions]] map to [=memory model atomic
operation|atomic operations=] whose memory [=memory model scope|scope=] is:
* `Workgroup` if the atomic pointer is in the [=address spaces/workgroup=]
    address space
* `QueueFamily` if the atomic pointer is in the [=address spaces/storage=]
    address space

[[#sync-builtin-functions|Synchronization built-in functions]] map to control
barriers whose execution and memory [=memory model scope|scopes=] are
`Workgroup`.

Implicit and explicit derivatives have an implicit [=quad=] execution scope.

Note: If the Vulkan memory model is not enabled in generated shaders, `Device`
scope should be used instead of `QueueFamily`.

## Memory Semantics ## {#memory-semantics}

All [[#atomic-builtin-functions|Atomic built-in functions]] use `Relaxed`
[=memory model memory semantics|memory semantics=] and, thus, no address space
semantics.

[[#sync-builtin-functions|workgroupBarrier]] uses `AcquireRelease` [=memory
model memory semantics|memory semantics=] and `WorkgroupMemory` semantics.
[[#sync-builtin-functions|storageBarrier]] uses `AcquireRelease` [=memory model
memory semantics|memory semantics=] and `UniformMemory` semantics.

Note: A combined `workgroupBarrier` and `storageBarrier` uses `AcquireRelease`
ordering semantics and both `WorkgroupMemory` and `UniformMemory` memory
semantics.

Note: No atomic or synchronization built-in functions use `MakeAvailable` or
`MakeVisible` semantics.

## Private vs Non-private ## {#private-vs-non-private}

All non-atomic [=read accesses=] in the [=address spaces/storage=] or
[=address spaces/workgroup=] address spaces are considered
[=memory model non-private|non-private=] and correspond to read operations with
`NonPrivatePointer | MakePointerVisible` memory operands with the `Workgroup`
scope.

All non-atomic [=write accesses=] in the [=address spaces/storage=] or
[=address spaces/workgroup=] address spaces are considered
[=memory model non-private|non-private=] and correspond to write operations
with `NonPrivatePointer | MakePointerAvailable` memory operands with the
`Workgroup` scope.

Issue: https://github.com/gpuweb/gpuweb/issues/1621

# Keyword and Token Summary # {#grammar}

## Keyword Summary ## {#keyword-summary}

### Type-defining Keywords ### {#type-defining-keywords}

<div class='syntax' noexport='true'>
  <dfn for=syntax>array</dfn> :

    | `'array'`
</div>
<div class='syntax' noexport='true'>
  <dfn for=syntax>atomic</dfn> :

    | `'atomic'`
</div>
<div class='syntax' noexport='true'>
  <dfn for=syntax>bool</dfn> :

    | `'bool'`
</div>
<div class='syntax' noexport='true'>
  <dfn for=syntax>float32</dfn> :

    | `'f32'`
</div>
<div class='syntax' noexport='true'>
  <dfn for=syntax>int32</dfn> :

    | `'i32'`
</div>
<div class='syntax' noexport='true'>
  <dfn for=syntax>mat2x2</dfn> :

    | `'mat2x2'`
</div>
<div class='syntax' noexport='true'>
  <dfn for=syntax>mat2x3</dfn> :

    | `'mat2x3'`
</div>
<div class='syntax' noexport='true'>
  <dfn for=syntax>mat2x4</dfn> :

    | `'mat2x4'`
</div>
<div class='syntax' noexport='true'>
  <dfn for=syntax>mat3x2</dfn> :

    | `'mat3x2'`
</div>
<div class='syntax' noexport='true'>
  <dfn for=syntax>mat3x3</dfn> :

    | `'mat3x3'`
</div>
<div class='syntax' noexport='true'>
  <dfn for=syntax>mat3x4</dfn> :

    | `'mat3x4'`
</div>
<div class='syntax' noexport='true'>
  <dfn for=syntax>mat4x2</dfn> :

    | `'mat4x2'`
</div>
<div class='syntax' noexport='true'>
  <dfn for=syntax>mat4x3</dfn> :

    | `'mat4x3'`
</div>
<div class='syntax' noexport='true'>
  <dfn for=syntax>mat4x4</dfn> :

    | `'mat4x4'`
</div>
<div class='syntax' noexport='true'>
  <dfn for=syntax>override</dfn> :

    | `'override'`
</div>
<div class='syntax' noexport='true'>
  <dfn for=syntax>pointer</dfn> :

    | `'ptr'`
</div>
<div class='syntax' noexport='true'>
  <dfn for=syntax>sampler</dfn> :

    | `'sampler'`
</div>
<div class='syntax' noexport='true'>
  <dfn for=syntax>sampler_comparison</dfn> :

    | `'sampler_comparison'`
</div>
<div class='syntax' noexport='true'>
  <dfn for=syntax>struct</dfn> :

    | `'struct'`
</div>
<div class='syntax' noexport='true'>
  <dfn for=syntax>texture_1d</dfn> :

    | `'texture_1d'`
</div>
<div class='syntax' noexport='true'>
  <dfn for=syntax>texture_2d</dfn> :

    | `'texture_2d'`
</div>
<div class='syntax' noexport='true'>
  <dfn for=syntax>texture_2d_array</dfn> :

    | `'texture_2d_array'`
</div>
<div class='syntax' noexport='true'>
  <dfn for=syntax>texture_3d</dfn> :

    | `'texture_3d'`
</div>
<div class='syntax' noexport='true'>
  <dfn for=syntax>texture_cube</dfn> :

    | `'texture_cube'`
</div>
<div class='syntax' noexport='true'>
  <dfn for=syntax>texture_cube_array</dfn> :

    | `'texture_cube_array'`
</div>
<div class='syntax' noexport='true'>
  <dfn for=syntax>texture_multisampled_2d</dfn> :

    | `'texture_multisampled_2d'`
</div>
<div class='syntax' noexport='true'>
  <dfn for=syntax>texture_storage_1d</dfn> :

    | `'texture_storage_1d'`
</div>
<div class='syntax' noexport='true'>
  <dfn for=syntax>texture_storage_2d</dfn> :

    | `'texture_storage_2d'`
</div>
<div class='syntax' noexport='true'>
  <dfn for=syntax>texture_storage_2d_array</dfn> :

    | `'texture_storage_2d_array'`
</div>
<div class='syntax' noexport='true'>
  <dfn for=syntax>texture_storage_3d</dfn> :

    | `'texture_storage_3d'`
</div>
<div class='syntax' noexport='true'>
  <dfn for=syntax>texture_depth_2d</dfn> :

    | `'texture_depth_2d'`
</div>
<div class='syntax' noexport='true'>
  <dfn for=syntax>texture_depth_2d_array</dfn> :

    | `'texture_depth_2d_array'`
</div>
<div class='syntax' noexport='true'>
  <dfn for=syntax>texture_depth_cube</dfn> :

    | `'texture_depth_cube'`
</div>
<div class='syntax' noexport='true'>
  <dfn for=syntax>texture_depth_cube_array</dfn> :

    | `'texture_depth_cube_array'`
</div>
<div class='syntax' noexport='true'>
  <dfn for=syntax>texture_depth_multisampled_2d</dfn> :

    | `'texture_depth_multisampled_2d'`
</div>
<div class='syntax' noexport='true'>
  <dfn for=syntax>uint32</dfn> :

    | `'u32'`
</div>
<div class='syntax' noexport='true'>
  <dfn for=syntax>vec2</dfn> :

    | `'vec2'`
</div>
<div class='syntax' noexport='true'>
  <dfn for=syntax>vec3</dfn> :

    | `'vec3'`
</div>
<div class='syntax' noexport='true'>
  <dfn for=syntax>vec4</dfn> :

    | `'vec4'`
</div>

### Other Keywords ### {#other-keywords}

<div class='syntax' noexport='true'>
  <dfn for=syntax>bitcast</dfn> :

    | `'bitcast'`
</div>
<div class='syntax' noexport='true'>
  <dfn for=syntax>break</dfn> :

    | `'break'`
</div>
<div class='syntax' noexport='true'>
  <dfn for=syntax>case</dfn> :

    | `'case'`
</div>
<div class='syntax' noexport='true'>
  <dfn for=syntax>continue</dfn> :

    | `'continue'`
</div>
<div class='syntax' noexport='true'>
  <dfn for=syntax>continuing</dfn> :

    | `'continuing'`
</div>
<div class='syntax' noexport='true'>
  <dfn for=syntax>default</dfn> :

    | `'default'`
</div>
<div class='syntax' noexport='true'>
  <dfn for=syntax>discard</dfn> :

    | `'discard'`
</div>
<div class='syntax' noexport='true'>
  <dfn for=syntax>else</dfn> :

    | `'else'`
</div>
<div class='syntax' noexport='true'>
  <dfn for=syntax>enable</dfn> :

    | `'enable'`
</div>
<div class='syntax' noexport='true'>
  <dfn for=syntax>fallthrough</dfn> :

    | `'fallthrough'`
</div>
<div class='syntax' noexport='true'>
  <dfn for=syntax>false</dfn> :

    | `'false'`
</div>
<div class='syntax' noexport='true'>
  <dfn for=syntax>fn</dfn> :

    | `'fn'`
</div>
<div class='syntax' noexport='true'>
  <dfn for=syntax>for</dfn> :

    | `'for'`
</div>
<div class='syntax' noexport='true'>
  <dfn for=syntax>function</dfn> :

    | `'function'`
</div>
<div class='syntax' noexport='true'>
  <dfn for=syntax>if</dfn> :

    | `'if'`
</div>
<div class='syntax' noexport='true'>
  <dfn for=syntax>let</dfn> :

    | `'let'`
</div>
<div class='syntax' noexport='true'>
  <dfn for=syntax>loop</dfn> :

    | `'loop'`
</div>
<div class='syntax' noexport='true'>
  <dfn for=syntax>private</dfn> :

    | `'private'`
</div>
<div class='syntax' noexport='true'>
  <dfn for=syntax>return</dfn> :

    | `'return'`
</div>
<div class='syntax' noexport='true'>
  <dfn for=syntax>storage</dfn> :

    | `'storage'`
</div>
<div class='syntax' noexport='true'>
  <dfn for=syntax>switch</dfn> :

    | `'switch'`
</div>
<div class='syntax' noexport='true'>
  <dfn for=syntax>true</dfn> :

    | `'true'`
</div>
<div class='syntax' noexport='true'>
  <dfn for=syntax>type</dfn> :

    | `'type'`
</div>
<div class='syntax' noexport='true'>
  <dfn for=syntax>uniform</dfn> :

    | `'uniform'`
</div>
<div class='syntax' noexport='true'>
  <dfn for=syntax>var</dfn> :

    | `'var'`
</div>
<div class='syntax' noexport='true'>
  <dfn for=syntax>while</dfn> :

    | `'while'`
</div>
<div class='syntax' noexport='true'>
  <dfn for=syntax>workgroup</dfn> :

    | `'workgroup'`
</div>

## Reserved Words ## {#reserved-words}

A <dfn>reserved word</dfn> is a [=token=] which is reserved for future use.
A WGSL program must not contain a reserved word.

The following are reserved words:

<div class='syntax' noexport='true'>
  <dfn for=syntax>_reserved</dfn> :

    | `'asm'`

    | `'bf16'`

    | `'const'`

    | `'demote'`

    | `'demote_to_helper'`

    | `'do'`

    | `'enum'`

    | `'f16'`

    | `'f64'`

    | `'handle'`

    | `'i8'`

    | `'i16'`

    | `'i64'`

    | `'mat'`

    | `'premerge'`

    | `'regardless'`

    | `'typedef'`

    | `'u8'`

    | `'u16'`

    | `'u64'`

    | `'unless'`

    | `'using'`

    | `'vec'`

    | `'void'`
</div>

## Syntactic Tokens ## {#syntactic-tokens}

A <dfn>syntactic token</dfn> is a sequence of special characters, used:
* to spell an expression operator, or
* as punctuation: to group, sequence, or separate other grammar elements.

<div class='syntax' noexport='true'>
  <dfn for=syntax>and</dfn> :

    | `'&'`
</div>
<div class='syntax' noexport='true'>
  <dfn for=syntax>and_and</dfn> :

    | `'&&'`
</div>
<div class='syntax' noexport='true'>
  <dfn for=syntax>arrow</dfn> :

    | `'->'`
</div>
<div class='syntax' noexport='true'>
  <dfn for=syntax>attr</dfn> :

    | `'@'`
</div>
<div class='syntax' noexport='true'>
  <dfn for=syntax>forward_slash</dfn> :

    | `'/'`
</div>
<div class='syntax' noexport='true'>
  <dfn for=syntax>bang</dfn> :

    | `'!'`
</div>
<div class='syntax' noexport='true'>
  <dfn for=syntax>bracket_left</dfn> :

    | `'['`
</div>
<div class='syntax' noexport='true'>
  <dfn for=syntax>bracket_right</dfn> :

    | `']'`
</div>
<div class='syntax' noexport='true'>
  <dfn for=syntax>brace_left</dfn> :

    | `'{'`
</div>
<div class='syntax' noexport='true'>
  <dfn for=syntax>brace_right</dfn> :

    | `'}'`
</div>
<div class='syntax' noexport='true'>
  <dfn for=syntax>colon</dfn> :

    | `':'`
</div>
<div class='syntax' noexport='true'>
  <dfn for=syntax>comma</dfn> :

    | `','`
</div>
<div class='syntax' noexport='true'>
  <dfn for=syntax>equal</dfn> :

    | `'='`
</div>
<div class='syntax' noexport='true'>
  <dfn for=syntax>equal_equal</dfn> :

    | `'=='`
</div>
<div class='syntax' noexport='true'>
  <dfn for=syntax>not_equal</dfn> :

    | `'!='`
</div>
<div class='syntax' noexport='true'>
  <dfn for=syntax>greater_than</dfn> :

    | `'>'`
</div>
<div class='syntax' noexport='true'>
  <dfn for=syntax>greater_than_equal</dfn> :

    | `'>='`
</div>
<div class='syntax' noexport='true'>
  <dfn for=syntax>shift_right</dfn> :

    | `'>>'`
</div>
<div class='syntax' noexport='true'>
  <dfn for=syntax>less_than</dfn> :

    | `'<'`
</div>
<div class='syntax' noexport='true'>
  <dfn for=syntax>less_than_equal</dfn> :

    | `'<='`
</div>
<div class='syntax' noexport='true'>
  <dfn for=syntax>shift_left</dfn> :

    | `'<<'`
</div>
<div class='syntax' noexport='true'>
  <dfn for=syntax>modulo</dfn> :

    | `'%'`
</div>
<div class='syntax' noexport='true'>
  <dfn for=syntax>minus</dfn> :

    | `'-'`
</div>
<div class='syntax' noexport='true'>
  <dfn for=syntax>minus_minus</dfn> :

    | `'--'`
</div>
<div class='syntax' noexport='true'>
  <dfn for=syntax>period</dfn> :

    | `'.'`
</div>
<div class='syntax' noexport='true'>
  <dfn for=syntax>plus</dfn> :

    | `'+'`
</div>
<div class='syntax' noexport='true'>
  <dfn for=syntax>plus_plus</dfn> :

    | `'++'`
</div>
<div class='syntax' noexport='true'>
  <dfn for=syntax>or</dfn> :

    | `'|'`
</div>
<div class='syntax' noexport='true'>
  <dfn for=syntax>or_or</dfn> :

    | `'||'`
</div>
<div class='syntax' noexport='true'>
  <dfn for=syntax>paren_left</dfn> :

    | `'('`
</div>
<div class='syntax' noexport='true'>
  <dfn for=syntax>paren_right</dfn> :

    | `')'`
</div>
<div class='syntax' noexport='true'>
  <dfn for=syntax>semicolon</dfn> :

    | `';'`
</div>
<div class='syntax' noexport='true'>
  <dfn for=syntax>star</dfn> :

    | `'*'`
</div>
<div class='syntax' noexport='true'>
  <dfn for=syntax>tilde</dfn> :

    | `'~'`
</div>
<div class='syntax' noexport='true'>
  <dfn for=syntax>underscore</dfn> :

    | `'_'`
</div>
<div class='syntax' noexport='true'>
  <dfn for=syntax>xor</dfn> :

    | `'^'`
</div>
<div class='syntax' noexport='true'>
  <dfn for=syntax>plus_equal</dfn> :

    | `'+='`
</div>
<div class='syntax' noexport='true'>
  <dfn for=syntax>minus_equal</dfn> :

    | `'-='`
</div>
<div class='syntax' noexport='true'>
  <dfn for=syntax>times_equal</dfn> :

    | `'*='`
</div>
<div class='syntax' noexport='true'>
  <dfn for=syntax>division_equal</dfn> :

    | `'/='`
</div>
<div class='syntax' noexport='true'>
  <dfn for=syntax>modulo_equal</dfn> :

    | `'%='`
</div>
<div class='syntax' noexport='true'>
  <dfn for=syntax>and_equal</dfn> :

    | `'&='`
</div>
<div class='syntax' noexport='true'>
  <dfn for=syntax>or_equal</dfn> :

    | `'|='`
</div>
<div class='syntax' noexport='true'>
  <dfn for=syntax>xor_equal</dfn> :

    | `'^='`
</div>
<div class='syntax' noexport='true'>
  <dfn for=syntax>shift_right_equal</dfn> :

    | `'>>='`
</div>
<div class='syntax' noexport='true'>
  <dfn for=syntax>shift_left_equal</dfn> :

    | `'<<='`
</div>

# Built-in Values # {#builtin-values}

The following table lists the available [=built-in input values=] and [=built-in output values=].

See [[#builtin-inputs-outputs]] for how to declare a built-in value.

<table class='data'>
  <caption>Built-in input and output values</caption>
  <thead>
    <tr><th>Name<th>Stage<th>Input or Output<th>Type<th>Description
  </thead>

  <tr><td>`vertex_index`
      <td>vertex
      <td>input
      <td>u32
      <td style="width:50%">Index of the current vertex within the current API-level draw command,
         independent of draw instancing.

         For a non-indexed draw, the first vertex has an index equal to the `firstVertex` argument
         of the draw, whether provided directly or indirectly.
         The index is incremented by one for each additional vertex in the draw instance.

         For an indexed draw, the index is equal to the index buffer entry for
         vertex, plus the `baseVertex` argument of the draw, whether provided directly or indirectly.

  <tr><td>`instance_index`
      <td>vertex
      <td>input
      <td>u32
      <td style="width:50%">Instance index of the current vertex within the current API-level draw command.

         The first instance has an index equal to the `firstInstance` argument of the draw,
         whether provided directly or indirectly.
         The index is incremented by one for each additional instance in the draw.

  <tr><td>`position`
      <td>vertex
      <td>output
      <td>vec4&lt;f32&gt;
      <td style="width:50%">Output position of the current vertex, using homogeneous coordinates.
      After homogeneous normalization (where each of the *x*, *y*, and *z* components
      are divided by the *w* component), the position is in the WebGPU normalized device
      coordinate space.
      See [[WebGPU#coordinate-systems|WebGPU &sect; Coordinate Systems]].

  <tr><td>`position`
      <td>fragment
      <td>input
      <td>vec4&lt;f32&gt;
      <td style="width:50%">Framebuffer position of the current fragment, using normalized homogeneous
      coordinates.
      (The *x*, *y*, and *z* components have already been scaled such that *w* is now 1.)
      See [[WebGPU#coordinate-systems|WebGPU &sect; Coordinate Systems]].

  <tr><td>`front_facing`
      <td>fragment
      <td>input
      <td>bool
      <td style="width:50%">True when the current fragment is on a front-facing primitive.
         False otherwise.
         See [[WebGPU#front-facing|WebGPU &sect; Front-facing]].

  <tr><td>`frag_depth`
      <td>fragment
      <td>output
      <td>f32
      <td style="width:50%">Updated depth of the fragment, in the viewport depth range.
      See [[WebGPU#coordinate-systems|WebGPU &sect; Coordinate Systems]].

  <tr><td>`local_invocation_id`
      <td>compute
      <td>input
      <td>vec3&lt;u32&gt;
      <td style="width:50%">The current invocation's [=local invocation ID=],
            i.e. its position in the [=workgroup grid=].

  <tr><td>`local_invocation_index`
      <td>compute
      <td>input
      <td>u32
      <td style="width:50%">The current invocation's [=local invocation index=], a linearized index of
          the invocation's position within the [=workgroup grid=].

  <tr><td>`global_invocation_id`
      <td>compute
      <td>input
      <td>vec3&lt;u32&gt;
      <td style="width:50%">The current invocation's [=global invocation ID=],
          i.e. its position in the [=compute shader grid=].

  <tr><td>`workgroup_id`
      <td>compute
      <td>input
      <td>vec3&lt;u32&gt;
      <td style="width:50%">The current invocation's [=workgroup ID=],
          i.e. the position of the workgroup in the [=workgroup grid=].

  <tr><td>`num_workgroups`
      <td>compute
      <td>input
      <td>vec3&lt;u32&gt;
      <td style="width:50%">The [=dispatch size=], `vec<u32>(group_count_x,
      group_count_y, group_count_z)`, of the compute shader
      [[WebGPU#dom-gpucomputepassencoder-dispatch|dispatched]] by the API.

  <tr><td>`sample_index`
      <td>fragment
      <td>input
      <td>u32
      <td style="width:50%">Sample index for the current fragment.
         The value is least 0 and at most `sampleCount`-1, where
         [[WebGPU#dom-gpurenderpipelinedescriptor-samplecount|sampleCount]]
         is the number of MSAA samples specified for the GPU render pipeline.
         <br>See [[WebGPU#render-pipeline|WebGPU &sect; GPURenderPipeline]].

  <tr><td>`sample_mask`
      <td>fragment
      <td>input
      <td>u32
      <td style="width:50%">Sample coverage mask for the current fragment.
         It contains a bitmask indicating which samples in this fragment are covered
         by the primitive being rendered.
         <br>See [[WebGPU#sample-masking|WebGPU &sect; Sample Masking]].

  <tr><td>`sample_mask`
      <td>fragment
      <td>output
      <td>u32
      <td style="width:50%">Sample coverage mask control for the current fragment.
         The last value written to this variable becomes the
         [[WebGPU#shader-output-mask|shader-output mask]].
         Zero bits in the written value will cause corresponding samples in
         the color attachments to be discarded.
         <br>See [[WebGPU#sample-masking|WebGPU &sect; Sample Masking]].
</table>

<div class='example wgsl global-scope' heading="Declaring built-in values">
  <xmp>
    struct VertexOutput {
      @builtin(position) my_pos: vec4<f32>;
    }

    @stage(vertex)
    fn vs_main(
      @builtin(vertex_index) my_index: u32,
      @builtin(instance_index) my_inst_index: u32,
    ) -> VertexOutput {}

    struct FragmentOutput {
      @builtin(frag_depth) depth: f32;
      @builtin(sample_mask) mask_out: u32;
    }

    @stage(fragment)
    fn fs_main(
      @builtin(front_facing) is_front: bool,
      @builtin(position) coord: vec4<f32>,
      @builtin(sample_index) my_sample_index: u32,
      @builtin(sample_mask) mask_in: u32,
    ) -> FragmentOutput {}

    @stage(compute)
    fn cs_main(
      @builtin(local_invocation_id) local_id: vec3<u32>,
      @builtin(local_invocation_index) local_index: u32,
      @builtin(global_invocation_id) global_id: vec3<u32>,
   ) {}
  </xmp>
</div>

# Built-in Functions # {#builtin-functions}

Certain functions are [=predeclared=], provided by the implementation, and
therefore always available for use in a WGSL program.
These are called <dfn noexport>built-in functions</dfn>.

A built-in function is a family of functions, all with the same name,
but distinguished by the number, order, and types of their [=formal parameters=].
Each of these distinct function variations is an [=overload=].

Note: Each [=user-defined function=] only has one [=overload=].

Each [=overload=] is described below via:
* Type parameterizations, if any.
* The built-in function name, a parenthesized list of [=formal parameters=], and optionally a [=return type=].
* The behaviour of this overload of the function.

Since a built-in function is always in scope, it is an error to attempt to redefine
one or to use the name of a built-in function as an [=identifier=] for any other
kind of declaration.

When calling a built-in function, all arguments to the function are evaluated
before function evaluation begins.
See [[#function-calls]].

## Logical Built-in Functions ## {#logical-builtin-functions}

<table class='data'>
  <thead>
    <tr><th>Parameterization<td style="width:40%;">Overload<td>Description
  </thead>
  <tr algorithm="vector all">
    <td>
    <td>`all`(|e|: vec|N|&lt;bool&gt;) -> bool
    <td>Returns true if each component of |e| is true.

  <tr algorithm="scalar all">
    <td>|e|: bool
    <td>`all(`|e|`)`: bool
    <td>Returns |e|.

  <tr algorithm="vector any">
    <td>
    <td>`any`(|e|: vec|N|&lt;bool&gt;) -> bool
    <td>Returns true if any component of |e| is true.

  <tr algorithm="scalar any">
    <td>|e|: bool
    <td>`any(`|e|`)`: bool
    <td>Returns |e|.

  <tr algorithm="scalar select">
    <td>|T| is [=scalar=] or [=vector=]
    <td>`select`(|f|: |T|, |t|: |T|, |cond|: bool) -> |T|
    <td>Returns |t| when |cond| is true, and |f| otherwise.

  <tr algorithm="vector select">
    <td>|T| is [=scalar=]
    <td>`select`(|f|: vec|N|&lt;|T|&gt;, |t|: vec|N|&lt;|T|&gt;, |cond|: vec|N|&lt;bool&gt;) -> vec|N|&lt;|T|&gt;
    <td>[=Component-wise=] selection. Result component |i| is evaluated
        as `select(`|f|`[`|i|`], `|t|`[`|i|`], `|cond|`[`|i|`])`.
</table>

## Array Built-in Functions ## {#array-builtin-functions}
<table class='data'>
  <thead>
    <tr><th>Parameterization<th>Overload<th>Description
  </thead>
  <tr algorithm="runtime-sized array length">
    <td>
    <td>`arrayLength`(|e|: ptr&lt;storage,array&lt;|T|&gt;&gt; ) -> u32
        <td>Returns the number of elements in the [=runtime-sized=] array.
</table>

## Float Built-in Functions ## {#float-builtin-functions}

<table class='data'>
  <thead>
    <tr><th>Parameterization<th>Overload<th>Description
  </thead>
  <tr algorithm="float abs">
    <td>|T| is [FLOATING]
    <td class="nowrap">`abs(`|e|`:` |T| `) -> ` |T|
    <td>Returns the absolute value of |e| (e.g. |e| with a positive sign bit).
    [=Component-wise=] when |T| is a vector.

  <tr algorithm="acos">
    <td>|T| is [FLOATING]
    <td class="nowrap">`acos(`|e|`:` |T| `) -> ` |T|
    <td>Returns the arc cosine of |e|.
    [=Component-wise=] when |T| is a vector.

  <tr algorithm="asin">
    <td>|T| is [FLOATING]
    <td class="nowrap">`asin(`|e|`:` |T| `) -> ` |T|
    <td>Returns the arc sine of |e|.
    [=Component-wise=] when |T| is a vector.

  <tr algorithm="atan">
    <td>|T| is [FLOATING]
    <td class="nowrap">`atan(`|e|`:` |T| `) -> ` |T|
    <td>Returns the arc tangent of |e|.
    [=Component-wise=] when |T| is a vector.

  <tr algorithm="atan2">
    <td>|T| is [FLOATING]
    <td class="nowrap">`atan2(`|e1|`:` |T| `, `|e2|`:` |T| `) -> ` |T|
    <td>Returns the arc tangent of |e1| over |e2|.
    [=Component-wise=] when |T| is a vector.

  <tr algorithm="ceil">
    <td>|T| is [FLOATING]
    <td class="nowrap">`ceil(`|e|`:` |T| `) -> ` |T|
    <td>Returns the [=ceiling expression|ceiling=] of |e|.
    [=Component-wise=] when |T| is a vector.

  <tr algorithm="clamp">
    <td>|T| is [FLOATING]
    <td class="nowrap">`clamp(`|e|`:` |T| `,` |low|`:` |T| `,` |high|`:` |T|`) -> ` |T|
    <td>Returns `min(max(`|e|`,`|low|`),`|high|`)`.
    [=Component-wise=] when |T| is a vector.

  <tr algorithm="cos">
    <td>|T| is [FLOATING]
    <td class="nowrap">`cos(`|e|`:` |T| `) -> ` |T|
    <td>Returns the cosine of |e|.
    [=Component-wise=] when |T| is a vector.

  <tr algorithm="cosh">
    <td>|T| is [FLOATING]
    <td class="nowrap">`cosh(`|e|`:` |T| `) -> ` |T|
    <td>Returns the hyperbolic cosine of |e|.
    [=Component-wise=] when |T| is a vector

  <tr algorithm="vector case, cross">
    <td>|T| is f32
    <td class="nowrap">`cross(`|e1|`:` vec3<|T|> `, `|e2|`:` vec3<|T|>`) -> ` vec3<|T|>
    <td>Returns the cross product of |e1| and |e2|.

  <tr algorithm="degrees">
    <td>|T| is [FLOATING]
    <td class="nowrap">`degrees(`|e1|`:` |T| `) -> ` |T|
    <td>Converts radians to degrees, approximating |e1|&nbsp;&times;&nbsp;180&nbsp;&div;&nbsp;&pi;.
    [=Component-wise=] when |T| is a vector<br>

  <tr algorithm="distance">
    <td>|T| is [FLOATING]
    <td class="nowrap">`distance(`|e1|`:` |T| `, `|e2|`:` |T| `) -> ` f32
    <td>Returns the distance between |e1| and |e2| (e.g. `length(`|e1|` - `|e2|`)`).

  <tr algorithm="exp">
    <td>|T| is [FLOATING]
    <td class="nowrap">`exp(`|e1|`:` |T| `) -> ` |T|
    <td>Returns the natural exponentiation of |e1| (e.g. `e`<sup>|e1|</sup>).
    [=Component-wise=] when |T| is a vector.

  <tr algorithm="exp2">
    <td>|T| is [FLOATING]
    <td class="nowrap">`exp2(`|e|`:` |T| `) -> ` |T|
    <td>Returns 2 raised to the power |e| (e.g. `2`<sup>|e|</sup>).
    [=Component-wise=] when |T| is a vector.

  <tr algorithm="faceForward">
    <td>|T| is vec|N|&lt;f32&gt;
    <td class="nowrap">`faceForward(`|e1|`:` |T| `, `|e2|`:` |T| `, `|e3|`:` |T| `) -> ` |T|
    <td>Returns |e1| if `dot(`|e2|`,`|e3|`)` is negative, and `-`|e1| otherwise.

  <tr algorithm="floor">
    <td>|T| is [FLOATING]
    <td class="nowrap">`floor(`|e|`:` |T| `) -> ` |T|
    <td>Returns the [=floor expression|floor=] of |e|.
    [=Component-wise=] when |T| is a vector.

  <tr algorithm="fma">
    <td>|T| is [FLOATING]
    <td class="nowrap">`fma(`|e1|`:` |T| `, `|e2|`:` |T| `, `|e3|`:` |T| `) -> ` |T|
    <td>Returns |e1| `*` |e2| `+` |e3|.
    [=Component-wise=] when |T| is a vector.

  <tr algorithm="fract">
    <td>|T| is [FLOATING]
    <td class="nowrap">`fract(`|e|`:` |T| `) -> ` |T|
    <td>Returns the fractional part of |e|, computed as |e| `- floor(`|e|`)`.<br>
    [=Component-wise=] when |T| is a vector.

  <tr algorithm="scalar case, frexp">
    <td>|T| is f32
    <td class="nowrap">`frexp(`|e|`: `|T|`) -> __frexp_result`<br>
    <td>Splits |e| into a significand and exponent of the form `significand * 2`<sup>`exponent`</sup>.
    Returns the `__frexp_result` built-in structure, defined as if as follows:
    ```rust
struct __frexp_result {
  sig : f32; // significand part
  exp : i32; // exponent part
}
    ```
    The magnitude of the significand is in the range of [0.5, 1.0) or 0.

    Note: A value cannot be explicitly declared with the type `__frexp_result`, but a value may infer the type.

    <div class='example wgsl function-scope' heading='frexp usage'>
    <xmp>
     // Infers result type
     let sig_and_exp = frexp(1.5);
     // Sets fraction_direct to 0.75
     let fraction_direct = frexp(1.5).sig;
    </xmp>
    </div>

  <tr algorithm="vector case, frexp">
    <td>|T| is vec|N|&lt;f32&gt;
    <td class="nowrap">`frexp(`|e|`: `|T|`) -> __frexp_result_vec`|N|<br>
    <td>Splits the components of |e| into a significand and exponent of the form `significand * 2`<sup>`exponent`</sup>.
    Returns the `__frexp_result_vec`|N| built-in structure, defined as if as follows:
    ```rust
struct __frexp_result_vecN {
  sig : vecN<f32>; // significand part
  exp : vecN<i32>; // exponent part
}
    ```
    The magnitude of each component of the significand is in the range of [0.5, 1.0) or 0.

    Note: A value cannot be explicitly declared with the type `__frexp_result_vec`|N|, but a value may infer the type.

  <tr algorithm="inverseSqrt">
    <td>|T| is [FLOATING]
    <td class="nowrap">`inverseSqrt(`|e|`:` |T| `) -> ` |T|
    <td>Returns the reciprocal of `sqrt(`|e|`)`.
    [=Component-wise=] when |T| is a vector.

  <tr algorithm="ldexp">
    <td>|T| is [FLOATING]<br>
        |I| is [SIGNEDINTEGRAL], where<br>
        |I| is a scalar if |T| is a scalar, or<br>
        a vector when |T| is a vector
    <td class="nowrap">`ldexp(`|e1|`:` |T| `, `|e2|`:` |I| `) -> ` |T|
    <td>Returns |e1| `* 2`<sup>|e2|</sup>.
    [=Component-wise=] when |T| is a vector.

  <tr algorithm="length">
    <td>|T| is [FLOATING]
    <td class="nowrap">`length(`|e|`:` |T| `) -> ` f32
    <td>Returns the length of |e| (e.g. `abs(`|e|`)` if |T| is a scalar, or `sqrt(`|e|`[0]`<sup>`2`</sup> `+` |e|`[1]`<sup>`2`</sup> `+ ...)` if |T| is a vector).

  <tr algorithm="log">
    <td>|T| is [FLOATING]
    <td class="nowrap">`log(`|e|`:` |T| `) -> ` |T|
    <td>Returns the natural logarithm of |e|.
    [=Component-wise=] when |T| is a vector.

  <tr algorithm="log2">
    <td>|T| is [FLOATING]
    <td class="nowrap">`log2(`|e|`:` |T| `) -> ` |T|
    <td>Returns the base-2 logarithm of |e|.
    [=Component-wise=] when |T| is a vector.

  <tr algorithm="max">
    <td>|T| is [FLOATING]
    <td class="nowrap">`max(`|e1|`:` |T| `, `|e2|`:` |T| `) -> ` |T|
    <td>Returns |e2| if |e1| is less than |e2|, and |e1| otherwise.
    If one operand is a NaN, the other is returned.
    If both operands are NaNs, a NaN is returned.
    [=Component-wise=] when |T| is a vector.

  <tr algorithm="min">
    <td>|T| is [FLOATING]
    <td class="nowrap">`min(`|e1|`:` |T| `, `|e2|`:` |T| `) -> ` |T|
    <td>Returns |e2| if |e2| is less than |e1|, and |e1| otherwise.
    If one operand is a NaN, the other is returned.
    If both operands are NaNs, a NaN is returned.
    [=Component-wise=] when |T| is a vector.

  <tr algorithm="mix all same type operands">
    <td>|T| is [FLOATING]
    <td class="nowrap">`mix(`|e1|`:` |T| `, `|e2|`:` |T| `, `|e3|`:` |T|`) -> ` |T|
    <td>Returns the linear blend of |e1| and |e2| (e.g. |e1|`*(1-`|e3|`)+`|e2|`*`|e3|).
    [=Component-wise=] when |T| is a vector.
    <br>

  <tr algorithm="vector mix with scalar blending factor">
    <td>|T| is vec|N|&lt;f32&gt;
    <td class="nowrap">`mix(`|e1|`:` |T| `, `|e2|`:` |T| `, `|e3|`:` f32 `) -> ` |T|
    <td>Returns the component-wise linear blend of |e1| and |e2|,
        using scalar blending factor |e3| for each component.<br>
        Same as `mix(`|e1|`, `|e2|`, `|T|`(`|e3|`))`.

  <tr algorithm="scalar case, modf">
    <td>|T| is f32
    <td class="nowrap">`modf(`|e|`: `|T|`) -> __modf_result`<br>
    <td>Splits |e| into fractional and whole number parts.
    Returns the `__modf_result` built-in structure, defined as if as follows:
    ```rust
struct __modf_result {
  fract : f32; // fractional part
  whole : f32; // whole part
}
    ```

    Note: A value cannot be explicitly declared with the type `__modf_result`, but a value may infer the type.

    <div class='example wgsl function-scope' heading='modf usage'>
    <xmp>
     // Infers result type
     let fract_and_whole = modf(1.5);
     // Sets fract_direct to 0.5
     let fract_direct = modf(1.5).fract;
    </xmp>
    </div>

  <tr algorithm="vector case, modf">
    <td>|T| is vec|N|&lt;f32&gt;
    <td class="nowrap">`modf(`|e|`: `|T|`) -> __modf_result_vec`|N|<br>
    <td>Splits the components of |e| into fractional and whole number parts.
    Returns the `__modf_result_vec`|N| built-in structure, defined as if as follows:
    ```rust
struct __modf_result_vecN {
  fract : vecN<f32>; // fractional part
  whole : vecN<f32>; // whole part
}
    ```

    Note: A value cannot be explicitly declared with the type `__modf_result_vec`|N|, but a value may infer the type.

  <tr algorithm="vector case, normalize">
    <td>|T| is f32
    <td class="nowrap">`normalize(`|e|`:` vec|N|<|T|> `) -> ` vec|N|<|T|>
    <td>Returns a unit vector in the same direction as |e|.

  <tr algorithm="pow">
    <td>|T| is [FLOATING]
    <td class="nowrap">`pow(`|e1|`:` |T| `, `|e2|`:` |T| `) -> ` |T|
    <td>Returns |e1| raised to the power |e2|.
    [=Component-wise=] when |T| is a vector.

  <tr algorithm="quantize to f16">
    <td>|T| is [FLOATING]
    <td class="nowrap">`quantizeToF16(`|e|`:` |T| `) -> ` |T|
    <td>Quantizes a 32-bit floating point value |e| as if |e| were converted to a [[!IEEE-754|IEEE 754]] binary16 value,
        and then converted back to a IEEE 754 binary32 value.<br>
        See [[#floating-point-conversion]].<br>
        [=Component-wise=] when |T| is a vector.<br>

        Note: The vec2&lt;f32&gt; case is the same as `unpack2x16float(pack2x16float(`|e|`))`.

  <tr algorithm="radians">
    <td>|T| is [FLOATING]
    <td class="nowrap">`radians(`|e1|`:` |T| `) -> ` |T|
    <td>Converts degrees to radians, approximating |e1|&nbsp;&times;&nbsp;&pi;&nbsp;&div;&nbsp;180.
    [=Component-wise=] when |T| is a vector<br>

  <tr algorithm="reflect">
    <td>|T| is vec|N|&lt;f32&gt;
    <td class="nowrap">`reflect(`|e1|`:` |T| `, `|e2|`:` |T| `) -> ` |T|
    <td>For the incident vector |e1| and surface orientation |e2|, returns the reflection direction
    |e1|`-2*dot(`|e2|`,`|e1|`)*`|e2|.

  <tr algorithm="refract">
    <td>|T| is vec|N|&lt;f32&gt;<br>I is f32
    <td class="nowrap">`refract(`|e1|`:` |T| `, `|e2|`:` |T| `, `|e3|`:` |I| `) -> ` |T|
    <td>For the incident vector |e1| and surface normal |e2|, and the ratio of indices of refraction |e3|,
    let `k = 1.0 - `|e3|` * `|e3|` * (1.0 - dot(`|e2|`, `|e1|`) * dot(`|e2|`, `|e1|`))`. If `k < 0.0`, returns the
    refraction vector 0.0, otherwise return the refraction vector
    |e3|` * `|e1|` - (`|e3|` * dot(`|e2|`, `|e1|`) + sqrt(k)) * `|e2|.

  <tr algorithm="round">
    <td>|T| is [FLOATING]
    <td class="nowrap">`round(`|e|`:` |T| `) -> ` |T|
    <td>Result is the integer |k| nearest to |e|, as a floating point value.<br>
        When |e| lies halfway between integers |k| and |k|+1,
        the result is |k| when |k| is even, and |k|+1 when |k| is odd.<br>
        [=Component-wise=] when |T| is a vector.

  <tr algorithm="float sign">
    <td>|T| is [FLOATING]
    <td class="nowrap">`sign(`|e|`:` |T| `) -> ` |T|
    <td>Returns the sign of |e|.
    [=Component-wise=] when |T| is a vector.

  <tr algorithm="sin">
    <td>|T| is [FLOATING]
    <td class="nowrap">`sin(`|e|`:` |T| `) -> ` |T|
    <td>Returns the sine of |e|.
    [=Component-wise=] when |T| is a vector.

  <tr algorithm="sinh">
    <td>|T| is [FLOATING]
    <td class="nowrap">`sinh(`|e|`:` |T| `) -> ` |T|
    <td>Returns the hyperbolic sine of |e|.
    [=Component-wise=] when |T| is a vector.

  <tr algorithm="smoothStep">
    <td>|T| is [FLOATING]
    <td class="nowrap">`smoothStep(`|low|`:` |T| `,` |high|`:` |T| `,` |x|`:` |T| `) -> ` |T|
    <td>Returns the smooth Hermite interpolation between 0 and 1.
    [=Component-wise=] when |T| is a vector.

    For scalar |T|, the result is
    |t| * |t| * (3.0 - 2.0 * |t|),
    where |t| = clamp((|x| - |low|) / (|high| - |low|), 0.0, 1.0).

  <tr algorithm="sqrt">
    <td>|T| is [FLOATING]
    <td class="nowrap">`sqrt(`|e|`:` |T| `) -> ` |T|
    <td>Returns the square root of |e|.
    [=Component-wise=] when |T| is a vector.

  <tr algorithm="step">
    <td>|T| is [FLOATING]
    <td class="nowrap">`step(`|edge|`:` |T| `, `|x|`:` |T| `) -> ` |T|
    <td>Returns 1.0 if |edge| &le; |x|, and 0.0 otherwise.
    [=Component-wise=] when |T| is a vector.

  <tr algorithm="tan">
    <td>|T| is [FLOATING]
    <td class="nowrap">`tan(`|e|`:` |T| `) -> ` |T|
    <td>Returns the tangent of |e|.
    [=Component-wise=] when |T| is a vector.

  <tr algorithm="tanh">
    <td>|T| is [FLOATING]
    <td class="nowrap">`tanh(`|e|`:` |T| `) -> ` |T|
    <td>Returns the hyperbolic tangent of |e|.
    [=Component-wise=] when |T| is a vector.

  <tr algorithm="trunc">
    <td>|T| is [FLOATING]
    <td class="nowrap">`trunc(`|e|`:` |T| `) -> ` |T|
    <td>Returns the nearest whole number whose absolute value is less than or equal to |e|.
    [=Component-wise=] when |T| is a vector.
</table>

## Integer Built-in Functions ## {#integer-builtin-functions}

<table class='data'>
  <thead>
    <tr><th>Parameterization<th>Overload<th>Description
  </thead>
  <tr algorithm="signed abs">
    <td>|T| is [SIGNEDINTEGRAL]
    <td class="nowrap">`abs`(|e|: |T| ) -> |T|
    <td>The absolute value of |e|.
        [=Component-wise=] when |T| is a vector.
        If |e| evaluates to the largest negative value, then the result is |e|.

  <tr algorithm="scalar case, unsigned abs">
    <td>|T| is [UNSIGNEDINTEGRAL]
    <td class="nowrap">`abs`(|e|: |T| ) -> |T|
    <td>Result is |e|.  This is provided for symmetry with `abs` for signed integers.
    [=Component-wise=] when |T| is a vector.

  <tr algorithm="unsigned clamp">
    <td>|T| is [UNSIGNEDINTEGRAL]
    <td class="nowrap">`clamp(`|e|`:` |T| `,` |low|`:` |T|`,` |high|`:` |T|`) ->` |T|
    <td>Returns `min(max(`|e|`,`|low|`),`|high|`)`.
    [=Component-wise=] when |T| is a vector.

  <tr algorithm="signed clamp">
    <td>|T| is [SIGNEDINTEGRAL]
    <td class="nowrap">`clamp(`|e|`:` |T| `,` |low|`:` |T|`,` |high|`:` |T|`) ->` |T|
    <td>Returns `min(max(`|e|`,`|low|`),`|high|`)`.
    [=Component-wise=] when |T| is a vector.

  <tr algorithm="count leading zeroes">
    <td>|T| is [INTEGRAL]
    <td class="nowrap">`countLeadingZeros(`|e|`:` |T| `) ->` |T|
    <td>The number of consectuive 0 bits starting from the most significant bit
        of |e|, when |T| is a scalar type.<br>
        [=Component-wise=] when |T| is a vector.<br>
        Also known as "clz" in some languages.<br>

  <tr algorithm="count 1 bits">
    <td>|T| is [INTEGRAL]
    <td class="nowrap">`countOneBits(`|e|`:` |T| `) ->` |T|
    <td>The number of 1 bits in the representation of |e|.<br>
        Also known as "population count".<br>
        [=Component-wise=] when |T| is a vector.

  <tr algorithm="count trailing zeroes">
    <td>|T| is [INTEGRAL]
    <td class="nowrap">`countTrailingZeros(`|e|`:` |T| `) ->` |T|
    <td>The number of consecutive 0 bits starting from the least significant bit
        of |e|, when |T| is a scalar type.<br>
        [=Component-wise=] when |T| is a vector.<br>
        Also known as "ctz" in some languages.<br>

  <tr algorithm="signed find most significant one bit">
    <td>|T| is [SIGNEDINTEGRAL]
    <td class="nowrap">`firstBitHigh(`|e|`:` |T| `) ->` |T|
    <td>For scalar |T|, the result is:
        <ul>
        <li>-1 if |e| is 0 or -1.
        <li>Otherwise the position of the most signficant bit in
            |e| that is different from |e|'s sign bit.
        </ul>
            
        Note: Since signed integers use twos-complement representation,
        the sign bit appears in the most significant bit position.

        [=Component-wise=] when |T| is a vector.<br>

  <tr algorithm="unsigned find most significant one bit">
    <td>|T| is [UNSIGNEDINTEGRAL]
    <td class="nowrap">`firstBitHigh(`|e|`:` |T| `) ->` |T|
    <td>For scalar |T|, the result is:
        <ul>
        <li>|T|(-1) if |e| is zero.
        <li>Otherwise the position of the most signficant 1
            bit in |e|.
        </ul>
        [=Component-wise=] when |T| is a vector.<br>

  <tr algorithm="find least significant one bit">
    <td>|T| is [INTEGRAL]
    <td class="nowrap">`firstBitLow(`|e|`:` |T| `) ->` |T|
    <td>For scalar |T|, the result is:
        <ul>
        <li>|T|(-1) if |e| is zero.
        <li>Otherwise the position of the least signficant 1
            bit in |e|.
        </ul>
        [=Component-wise=] when |T| is a vector.

  <tr algorithm="signed extract bits">
    <td>|T| is [SIGNEDINTEGRAL]
    <td class="nowrap">`extractBits(`<br>&nbsp;|e|`:` |T|`,`<br>&nbsp;|offset|`: u32,`<br>&nbsp;|count|` : u32) ->` |T|
    <td>Reads bits from an integer, with sign extension.

    When |T| is a scalar type, then:
    <ul>
    <li>|w| is the bit width of |T|
    <li>|o| = min(|offset|,|w|)
    <li>|c| = min(|count|, |w| - |o|)
    <li>The result is 0 if |c| is 0.
    <li>Otherwise, bits 0..|c|-1 of the result are copied from bits
       |o|..|o|+|c|-1 of |e|.
       Other bits of the result are the same as bit |c|-1 of the result.
    </ul>
    [=Component-wise=] when |T| is a vector.

  <tr algorithm="unsigned extract bits">
    <td>|T| is [UNSIGNEDINTEGRAL]
    <td class="nowrap">`extractBits(`<br>&nbsp;|e|`:` |T|`,`<br>&nbsp;|offset|`: u32,`<br>&nbsp;|count|` : u32) ->` |T|
    <td>Reads bits from an integer, without sign extension.

    When |T| is a scalar type, then:
    <ul>
    <li>|w| is the bit width of |T|
    <li>|o| = min(|offset|,|w|)
    <li>|c| = min(|count|, |w| - |o|)
    <li>The result is 0 if |c| is 0.
    <li>Otherwise, bits 0..|c|-1 of the result are copied from bits
       |o|..|o|+|c|-1 of |e|.
       Other bits of the result are 0.
    </ul>
    [=Component-wise=] when |T| is a vector.

  <tr algorithm="insert bits">
    <td>|T| is [INTEGRAL]
    <td class="nowrap">`insertBits(`<br>&nbsp;|e|`:` |T|`,`<br>&nbsp;|newbits|`:`|T|`,`<br>&nbsp;|offset|`: u32,`<br>&nbsp;|count|` : u32) ->` |T|
    <td>Sets bits in an integer.

    When |T| is a scalar type, then:
    <ul>
    <li>|w| is the bit width of |T|
    <li>|o| = min(|offset|,|w|)
    <li>|c| = min(|count|, |w| - |o|)
    <li>The result is |e| if |c| is 0.
    <li>Otherwise, 
       bits |o|..|o|+|c|-1 of the result are copied from bits 0..|c|-1 of |newbits|.
       Other bits of the result are copied from |e|.
    </ul>
    [=Component-wise=] when |T| is a vector.

  <tr algorithm="unsigned max">
    <td>|T| is [UNSIGNEDINTEGRAL]
    <td class="nowrap">`max(`|e1|`:` |T| `, `|e2|`:` |T|`) ->` |T|
    <td>Returns |e2| if |e1| is less than |e2|, and |e1| otherwise.
    [=Component-wise=] when |T| is a vector.

  <tr algorithm="signed max">
    <td>|T| is [SIGNEDINTEGRAL]
    <td class="nowrap">`max(`|e1|`:` |T| `, `|e2|`:` |T|`) ->` |T|
    <td>Returns |e2| if |e1| is less than |e2|, and |e1| otherwise.
    [=Component-wise=] when |T| is a vector.

  <tr algorithm="unsigned min">
    <td>|T| is [UNSIGNEDINTEGRAL]
    <td class="nowrap">`min(`|e1|`:` |T| `, `|e2|`:` |T|`) ->` |T|
    <td>Returns |e1| if |e1| is less than |e2|, and |e2| otherwise.
    [=Component-wise=] when |T| is a vector.

  <tr algorithm="signed min">
    <td>|T| is [SIGNEDINTEGRAL]
    <td class="nowrap">`min(`|e1|`:` |T| `, `|e2|`:` |T|`) ->` |T|
    <td>Returns |e1| if |e1| is less than |e2|, and |e2| otherwise.
    [=Component-wise=] when |T| is a vector.

  <tr algorithm="bit reversal">
    <td>|T| is [INTEGRAL]
    <td class="nowrap">`reverseBits(`|e|`:` |T| `) ->`  |T|
    <td>Reverses the bits in |e|:  The bit at position |k| of the result equals the
        bit at position 31-|k| of |e|.<br>
        [=Component-wise=] when |T| is a vector.
</table>

## Matrix Built-in Functions ## {#matrix-builtin-functions}
<table class='data'>
  <thead>
    <tr><th>Parameterization<th>Overload<th>Description
  </thead>
  <tr algorithm="determinant">
    <td>|T| is f32
    <td class="nowrap">`determinant(`|e|`:` mat|N|x|N|<|T|> `) -> ` |T|
    <td>Returns the determinant of |e|.
  <tr algorithm="transpose">
    <td>|T| is f32
    <td class="nowrap">`transpose(`|e|`:` mat|M|x|N|<|T|> `) -> ` mat|N|x|M|<|T|>
    <td>Returns the transpose of |e|.
</table>

## Vector Built-in Functions ## {#vector-builtin-functions}

<table class='data'>
  <thead>
    <tr><th>Parameterization<td>Overload<td>Description
  </thead>
  <tr algorithm="float dot"><td>|T| is f32
    <td>`dot(`|e1|`: vecN<`|T|`>, `|e2|`: vecN<`|T|`>) ->` |T|
    <td>Returns the dot product of |e1| and |e2|.
  <tr algorithm="signed dot"><td>|T| is i32
    <td>`dot(`|e1|`: vecN<`|T|`>, `|e2|`: vecN<`|T|`>) ->` |T|
    <td>Returns the dot product of |e1| and |e2|.
  <tr algorithm="unsigned dot"><td>|T| is u32
    <td>`dot(`|e1|`: vecN<`|T|`>, `|e2|`: vecN<`|T|`>) ->` |T|
    <td>Returns the dot product of |e1| and |e2|.
</table>

## Derivative Built-in Functions ## {#derivative-builtin-functions}

See [[#derivatives]].

These functions:
* Must only be used in a [=fragment=] shader stage.
* Must only be invoked in uniform control flow.

<table class='data'>
  <thead>
    <tr><th>Parameterization<th>Overload<th>Description
  </thead>
  <tr algorithm="dpdx">
  <td rowspan=9>|T| is f32 or vecN&lt;f32&gt;
    <td>`dpdx(`|e|`: `|T|`) ->` |T|
    <td>Partial derivative of |e| with respect to window x coordinates.
    The result is the same as either `dpdxFine(`|e|`)` or `dpdxCoarse(`|e|`)`.
  <tr algorithm="dpdxCoarse">
    <td>`dpdxCoarse(`|e|`: `|T|`) -> `|T|
    <td>Returns the partial derivative of |e| with respect to window x coordinates using local differences.
    This may result in fewer unique positions that `dpdxFine(`|e|`)`.
  <tr algorithm="dpdxFine">
    <td>`dpdxFine(`|e|`: `|T|`) -> `|T|
    <td>Returns the partial derivative of |e| with respect to window x coordinates.
  <tr algorithm="dpdy">
    <td>`dpdy(`|e|`: `|T|`) -> `|T|
    <td>Partial derivative of |e| with respect to window y coordinates.
    The result is the same as either `dpdyFine(`|e|`)` or `dpdyCoarse(`|e|`)`.
  <tr algorithm="dpdyCoarse">
    <td>`dpdyCoarse(`|e|`: `|T|`) -> `|T|
    <td>Returns the partial derivative of |e| with respect to window y coordinates using local differences.
    This may result in fewer unique positions that `dpdyFine(`|e|`)`.
  <tr algorithm="dpdyFine">
    <td>`dpdyFine(`|e|`: `|T|`) -> `|T|
    <td>Returns the partial derivative of |e| with respect to window y coordinates.
  <tr algorithm="fwidth">
    <td>`fwidth(`|e|`: `|T|`) -> `|T|
    <td>Returns `abs(dpdx(`|e|`)) + abs(dpdy(`|e|`))`.
  <tr algorithm="fwidthCoarse">
    <td>`fwidthCoarse(`|e|`: `|T|`) -> `|T|
    <td>Returns `abs(dpdxCoarse(`|e|`)) + abs(dpdyCoarse(`|e|`))`.
  <tr algorithm="fwidthFine">
    <td>`fwidthFine(`|e|`: `|T|`) -> `|T|
    <td>Returns `abs(dpdxFine(`|e|`)) + abs(dpdyFine(`|e|`))`.
</table>

## Texture Built-in Functions ## {#texture-builtin-functions}

In this section, texture types are shown with the following parameters:
* |T|, a sampled type.
* <var ignore>F</var>, a [=texel format=].
* <var ignore>A</var>, an [=access mode=].

Parameter values must be valid for the respective texture types.

### `textureDimensions` ### {#texturedimensions}

Returns the dimensions of a texture, or texture's mip level in texels.

```rust
textureDimensions(t: texture_1d<T>) -> i32
textureDimensions(t: texture_1d<T>, level: i32) -> i32
textureDimensions(t: texture_2d<T>) -> vec2<i32>
textureDimensions(t: texture_2d<T>, level: i32) -> vec2<i32>
textureDimensions(t: texture_2d_array<T>) -> vec2<i32>
textureDimensions(t: texture_2d_array<T>, level: i32) -> vec2<i32>
textureDimensions(t: texture_3d<T>) -> vec3<i32>
textureDimensions(t: texture_3d<T>, level: i32) -> vec3<i32>
textureDimensions(t: texture_cube<T>) -> vec2<i32>
textureDimensions(t: texture_cube<T>, level: i32) -> vec2<i32>
textureDimensions(t: texture_cube_array<T>) -> vec2<i32>
textureDimensions(t: texture_cube_array<T>, level: i32) -> vec2<i32>
textureDimensions(t: texture_multisampled_2d<T>)-> vec2<i32>
textureDimensions(t: texture_depth_2d) -> vec2<i32>
textureDimensions(t: texture_depth_2d, level: i32) -> vec2<i32>
textureDimensions(t: texture_depth_2d_array) -> vec2<i32>
textureDimensions(t: texture_depth_2d_array, level: i32) -> vec2<i32>
textureDimensions(t: texture_depth_cube) -> vec2<i32>
textureDimensions(t: texture_depth_cube, level: i32) -> vec2<i32>
textureDimensions(t: texture_depth_cube_array) -> vec2<i32>
textureDimensions(t: texture_depth_cube_array, level: i32) -> vec2<i32>
textureDimensions(t: texture_depth_multisampled_2d)-> vec2<i32>
textureDimensions(t: texture_storage_1d<F,A>) -> i32
textureDimensions(t: texture_storage_2d<F,A>) -> vec2<i32>
textureDimensions(t: texture_storage_2d_array<F,A>) -> vec2<i32>
textureDimensions(t: texture_storage_3d<F,A>) -> vec3<i32>
textureDimensions(t: texture_external) -> vec2<i32>
```

**Parameters:**

<table class='data'>
  <tr><td>`t`<td>
  The [sampled](#sampled-texture-type),
  [multisampled](#multisampled-texture-type), [depth](#texture-depth),
  [storage](#texture-storage), or [external](#external-texture-type) texture.
  <tr><td>`level`<td>
  The mip level, with level 0 containing a full size version of the texture.<br>
  If omitted, the dimensions of level 0 are returned.
</table>

**Returns:**

The dimensions of the texture in texels.

For textures based on cubes, the results are the dimensions of each face of the cube.
Cube faces are square, so the x and y components of the result are equal.

If `level` is outside the range `[0, textureNumLevels(t))` then any valid value
for the return type may be returned.

### `textureGather` ### {#texturegather}

A <dfn noexport>texture gather</dfn> operation reads from a 2D, 2D array, cube, or cube array texture,
computing a four-component vector as follows:
* Find the four texels that would be used in a sampling operation with linear filtering,
    from [=mip level=] 0:
    * Use the specified coordinate, array index (when present), and offset (when present).
    * The texels are adjacent, forming a square, when considering their texture space coordinates (*u*,*v*).
    * Selected texels at the texture edge, cube face edge, or cube corners are handled
        as in ordinary texture sampling.
* For each texel, read one channel and convert it into a scalar value.
    * For non-depth textures, a zero-based `component` parameter specifies the channel to use.
        * If the texture format supports the specified channel, i.e. has more than `component` channels:
             * Yield scalar value `v[component]` when the texel value is `v`.
        * Otherwise:
             * Yield 0.0 when `component` is 1 or 2.
             * Yield 1.0 when `component` is 3 (the alpha channel).
    * For depth textures, yield the texel value. (Depth textures only have one channel.)
* Yield the four-component vector, arranging scalars produced by the previous step into components
    according to the relative coordinates of the texels, as follows:
    * <table>
        <thead class='data'><td>Result component<td>Relative texel coordinate</thead>
        <tr><td>x<td>(*u*<sub>min</sub>,*v*<sub>max</sub>)
        <tr><td>y<td>(*u*<sub>max</sub>,*v*<sub>max</sub>)
        <tr><td>z<td>(*u*<sub>max</sub>,*v*<sub>min</sub>)
        <tr><td>w<td>(*u*<sub>min</sub>,*v*<sub>min</sub>)
        </table>

TODO: The four texels are the "sample footprint" that should be described by the WebGPU spec.
https://github.com/gpuweb/gpuweb/issues/2343

```rust
textureGather(component: i32, t: texture_2d<T>, s: sampler, coords: vec2<f32>) -> vec4<T>
textureGather(component: i32, t: texture_2d<T>, s: sampler, coords: vec2<f32>, offset: vec2<i32>) -> vec4<T>
textureGather(component: i32, t: texture_2d_array<T>, s: sampler, coords: vec2<f32>, array_index: i32) -> vec4<T>
textureGather(component: i32, t: texture_2d_array<T>, s: sampler, coords: vec2<f32>, array_index: i32, offset: vec2<i32>) -> vec4<T>
textureGather(component: i32, t: texture_cube<T>, s: sampler, coords: vec3<f32>) -> vec4<T>
textureGather(component: i32, t: texture_cube_array<T>, s: sampler, coords: vec3<f32>, array_index: i32) -> vec4<T>
textureGather(t: texture_depth_2d, s: sampler, coords: vec2<f32>) -> vec4<f32>
textureGather(t: texture_depth_2d, s: sampler, coords: vec2<f32>, offset: vec2<i32>) -> vec4<f32>
textureGather(t: texture_depth_2d_array, s: sampler, coords: vec2<f32>, array_index: i32) -> vec4<f32>
textureGather(t: texture_depth_2d_array, s: sampler, coords: vec2<f32>, array_index: i32, offset: vec2<i32>) -> vec4<f32>
textureGather(t: texture_depth_cube, s: sampler, coords: vec3<f32>) -> vec4<f32>
textureGather(t: texture_depth_cube_array, s: sampler, coords: vec3<f32>, array_index: i32) -> vec4<f32>
```

**Parameters:**

<table class='data'>
  <tr><td>`component`<td>
  Only applies to non-depth textures.
  <br>The index of the channel to read from the selected texels.
  <br>When provided, the `component` expression must be either:
    * a `const_expression` expression (e.g. `1`).<br>
    * a name of a [=module scope|module-scope=] [=let declaration=]
  Its value must be at least 0 and at most 3.
  Values outside of this range will result in a [=shader-creation error=].
  <tr><td>`t`<td>
  The [sampled](#sampled-texture-type) or [depth](#texture-depth) texture to read from.
  <tr><td>`s`<td>
  The [sampler type](#sampler-type).
  <tr><td>`coords`<td>
  The texture coordinates.
  <tr><td>`array_index`<td>
  The 0-based texture array index.
  <tr><td>`offset`<td>
  The optional texel offset applied to the unnormalized texture coordinate
  before sampling the texture. This offset is applied before applying any
  texture wrapping modes.<br>
  The `offset` expression must be either:
    * a `const_expression` expression (e.g. `vec2<i32>(1, 2)`).<br>
    * a name of a [=module scope|module-scope=] [=let declaration=]
  Each `offset` component must be at least `-8` and at most `7`. Values outside
  of this range will result in a [=shader-creation error=].
</table>

**Returns:**

A four component vector with components extracted from the specified channel from the selected texels, as described above.

<div class='example wgsl global-scope' heading="Gather components from texels in 2D texture">
  <xmp>
    @group(0) @binding(0) var t: texture_2d<f32>;
    @group(0) @binding(1) var dt: texture_depth_2d;
    @group(0) @binding(2) var s: sampler;

    fn gather_x_components(c: vec2<f32>) -> vec4<f32> {
      return textureGather(0,t,s,c);
    }
    fn gather_y_components(c: vec2<f32>) -> vec4<f32> {
      return textureGather(1,t,s,c);
    }
    fn gather_z_components(c: vec2<f32>) -> vec4<f32> {
      return textureGather(2,t,s,c);
    }
    fn gather_depth_components(c: vec2<f32>) -> vec4<f32> {
      return textureGather(dt,s,c);
    }
  </xmp>
</div>

### `textureGatherCompare` ### {#texturegathercompare}

A <dfn noexport>texture gather compare</dfn> operation performs a depth comparison on four texels in a depth
texture and collects the results into a single vector, as follows:

* Find the four texels that would be used in a depth sampling operation with linear filtering,
    from [=mip level=] 0:
    * Use the specified coordinate, array index (when present), and offset (when present).
    * The texels are adjacent, forming a square, when considering their texture space coordinates (*u*,*v*).
    * Selected texels at the texture edge, cube face edge, or cube corners are handled
        as in ordinary texture sampling.
* For each texel, perform a comparison against the depth reference value,
    yielding a 0.0 or 1.0 value, as controlled by the comparison sampler parameters.
* Yield the four-component vector where the components are the comparison results with the texels with
       relative texel coordinates as follows:
    * <table>
        <thead class='data'><td>Result component<td>Relative texel coordinate</thead>
        <tr><td>x<td>(*u*<sub>min</sub>,*v*<sub>max</sub>)
        <tr><td>y<td>(*u*<sub>max</sub>,*v*<sub>max</sub>)
        <tr><td>z<td>(*u*<sub>max</sub>,*v*<sub>min</sub>)
        <tr><td>w<td>(*u*<sub>min</sub>,*v*<sub>min</sub>)
        </table>

```rust
textureGatherCompare(t: texture_depth_2d, s: sampler_comparison, coords: vec2<f32>, depth_ref: f32) -> vec4<f32>
textureGatherCompare(t: texture_depth_2d, s: sampler_comparison, coords: vec2<f32>, depth_ref: f32, offset: vec2<i32>) -> vec4<f32>
textureGatherCompare(t: texture_depth_2d_array, s: sampler_comparison, coords: vec2<f32>, array_index: i32, depth_ref: f32) -> vec4<f32>
textureGatherCompare(t: texture_depth_2d_array, s: sampler_comparison, coords: vec2<f32>, array_index: i32, depth_ref: f32, offset: vec2<i32>) -> vec4<f32>
textureGatherCompare(t: texture_depth_cube, s: sampler_comparison, coords: vec3<f32>, depth_ref: f32) -> vec4<f32>
textureGatherCompare(t: texture_depth_cube_array, s: sampler_comparison, coords: vec3<f32>, array_index: i32, depth_ref: f32) -> vec4<f32>
```
**Parameters:**

<table class='data'>
  <tr><td>`t`<td>
  The [depth](#texture-depth) texture to read from.
  <tr><td>`s`<td>
  The [sampler comparison](#sampler-type).
  <tr><td>`coords`<td>
  The texture coordinates.
  <tr><td>`array_index`<td>
  The 0-based texture array index.
  <tr><td>`depth_ref`<td>
  The reference value to compare the sampled depth value against.
  <tr><td>`offset`<td>
  The optional texel offset applied to the unnormalized texture coordinate
  before sampling the texture. This offset is applied before applying any
  texture wrapping modes.<br>
  The `offset` expression must be either:
    * a `const_expression` expression (e.g. `vec2<i32>(1, 2)`).<br>
    * a name of a [=module scope|module-scope=] [=let declaration=]
  Each `offset` component must be at least `-8` and at most `7`. Values outside
  of this range will result in a [=shader-creation error=].
</table>

**Returns:**

A four component vector with comparison result for the selected texels, as described above.

<div class='example wgsl global-scope' heading="Gather depth comparison">
  <xmp>
    @group(0) @binding(0) var dt: texture_depth_2d;
    @group(0) @binding(1) var s: sampler;

    fn gather_depth_compare(c: vec2<f32>, depth_ref: f32) -> vec4<f32> {
      return textureGatherCompare(dt,s,c,depth_ref);
    }
  </xmp>
</div>

### `textureLoad` ### {#textureload}

Reads a single texel from a texture without sampling or filtering.

```rust
textureLoad(t: texture_1d<T>, coords: i32, level: i32) -> vec4<T>
textureLoad(t: texture_2d<T>, coords: vec2<i32>, level: i32) -> vec4<T>
textureLoad(t: texture_2d_array<T>, coords: vec2<i32>, array_index: i32, level: i32) -> vec4<T>
textureLoad(t: texture_3d<T>, coords: vec3<i32>, level: i32) -> vec4<T>
textureLoad(t: texture_multisampled_2d<T>, coords: vec2<i32>, sample_index: i32)-> vec4<T>
textureLoad(t: texture_depth_2d, coords: vec2<i32>, level: i32) -> f32
textureLoad(t: texture_depth_2d_array, coords: vec2<i32>, array_index: i32, level: i32) -> f32
textureLoad(t: texture_depth_multisampled_2d, coords: vec2<i32>, sample_index: i32)-> f32
textureLoad(t: texture_external, coords: vec2<i32>) -> vec4<f32>
```

**Parameters:**

<table class='data'>
  <tr><td>`t`<td>
  The [sampled](#sampled-texture-type),
  [multisampled](#multisampled-texture-type), [depth](#texture-depth),
  or [external](#external-texture-type) texture.
  <tr><td>`coords`<td>
  The 0-based texel coordinate.
  <tr><td>`array_index`<td>
  The 0-based texture array index.
  <tr><td>`level`<td>
  The mip level, with level 0 containing a full size version of the texture.
  <tr><td>`sample_index`<td>
  The 0-based sample index of the multisampled texture.
</table>

**Returns:**

The unfiltered texel data.

An out of bounds access occurs if:
* any element of `coords` is outside the range `[0, textureDimensions(t, level))`
    for the corresponding element, or
* `array_index` is outside the range `[0, textureNumLayers(t))`, or
* `level` is outside the range `[0, textureNumLevels(t))`

If an out of bounds access occurs, the built-in function returns one of:
* The data for some texel within bounds of the texture
* A vector (0,0,0,0) or (0,0,0,1) of the appropriate type for non-depth textures
* 0.0 for depth textures

### `textureNumLayers` ### {#texturenumlayers}

Returns the number of layers (elements) of an array texture.

```rust
textureNumLayers(t: texture_2d_array<T>) -> i32
textureNumLayers(t: texture_cube_array<T>) -> i32
textureNumLayers(t: texture_depth_2d_array) -> i32
textureNumLayers(t: texture_depth_cube_array) -> i32
textureNumLayers(t: texture_storage_2d_array<F,A>) -> i32
```

**Parameters:**

<table class='data'>
  <tr><td>`t`<td>
  The [sampled](#sampled-texture-type),
  [multisampled](#multisampled-texture-type), [depth](#texture-depth) or
  [storage](#texture-storage) array texture.
</table>

**Returns:**

If the number of layers (elements) of the array texture.


### `textureNumLevels` ### {#texturenumlevels}

Returns the number of mip levels of a texture.

```rust
textureNumLevels(t: texture_1d<T>) -> i32
textureNumLevels(t: texture_2d<T>) -> i32
textureNumLevels(t: texture_2d_array<T>) -> i32
textureNumLevels(t: texture_3d<T>) -> i32
textureNumLevels(t: texture_cube<T>) -> i32
textureNumLevels(t: texture_cube_array<T>) -> i32
textureNumLevels(t: texture_depth_2d) -> i32
textureNumLevels(t: texture_depth_2d_array) -> i32
textureNumLevels(t: texture_depth_cube) -> i32
textureNumLevels(t: texture_depth_cube_array) -> i32
```

**Parameters:**

<table class='data'>
  <tr><td>`t`<td>
  The [sampled](#sampled-texture-type) or [depth](#texture-depth) texture.
</table>

**Returns:**

If the number of mip levels for the texture.


### `textureNumSamples` ### {#texturenumsamples}

Returns the number samples per texel in a multisampled texture.

```rust
textureNumSamples(t: texture_multisampled_2d<T>) -> i32
textureNumSamples(t: texture_depth_multisampled_2d) -> i32
```

**Parameters:**

<table class='data'>
  <tr><td>`t`<td>
  The [multisampled](#multisampled-texture-type) texture.
</table>

**Returns:**

If the number of samples per texel in the multisampled texture.


### `textureSample` ### {#texturesample}

Samples a texture.

Must only be used in a [=fragment=] shader stage.
Must only be invoked in uniform control flow.

```rust
textureSample(t: texture_1d<f32>, s: sampler, coords: f32) -> vec4<f32>
textureSample(t: texture_2d<f32>, s: sampler, coords: vec2<f32>) -> vec4<f32>
textureSample(t: texture_2d<f32>, s: sampler, coords: vec2<f32>, offset: vec2<i32>) -> vec4<f32>
textureSample(t: texture_2d_array<f32>, s: sampler, coords: vec2<f32>, array_index: i32) -> vec4<f32>
textureSample(t: texture_2d_array<f32>, s: sampler, coords: vec2<f32>, array_index: i32, offset: vec2<i32>) -> vec4<f32>
textureSample(t: texture_3d<f32>, s: sampler, coords: vec3<f32>) -> vec4<f32>
textureSample(t: texture_3d<f32>, s: sampler, coords: vec3<f32>, offset: vec3<i32>) -> vec4<f32>
textureSample(t: texture_cube<f32>, s: sampler, coords: vec3<f32>) -> vec4<f32>
textureSample(t: texture_cube_array<f32>, s: sampler, coords: vec3<f32>, array_index: i32) -> vec4<f32>
textureSample(t: texture_depth_2d, s: sampler, coords: vec2<f32>) -> f32
textureSample(t: texture_depth_2d, s: sampler, coords: vec2<f32>, offset: vec2<i32>) -> f32
textureSample(t: texture_depth_2d_array, s: sampler, coords: vec2<f32>, array_index: i32) -> f32
textureSample(t: texture_depth_2d_array, s: sampler, coords: vec2<f32>, array_index: i32, offset: vec2<i32>) -> f32
textureSample(t: texture_depth_cube, s: sampler, coords: vec3<f32>) -> f32
textureSample(t: texture_depth_cube_array, s: sampler, coords: vec3<f32>, array_index: i32) -> f32
```

**Parameters:**

<table class='data'>
  <tr><td>`t`<td>
  The [sampled](#sampled-texture-type), [depth](#texture-depth),
  or [external](#external-texture-type)
  texture to sample.
  <tr><td>`s`<td>
  The [sampler type](#sampler-type).
  <tr><td>`coords`<td>
  The texture coordinates used for sampling.
  <tr><td>`array_index`<td>
  The 0-based texture array index to sample.
  <tr><td>`offset`<td>
  The optional texel offset applied to the unnormalized texture coordinate
  before sampling the texture. This offset is applied before applying any
  texture wrapping modes.<br>
  The `offset` expression must be either:
    * a `const_expression` expression (e.g. `vec2<i32>(1, 2)`).<br>
    * a name of a [=module scope|module-scope=] [=let declaration=]
  Each `offset` component must be at least `-8` and at most `7`. Values outside
  of this range will result in a [=shader-creation error=].
</table>

**Returns:**

The sampled value.

### `textureSampleBias` ### {#texturesamplebias}

Samples a texture with a bias to the mip level.

Must only be used in a [=fragment=] shader stage.
Must only be invoked in uniform control flow.

```rust
textureSampleBias(t: texture_2d<f32>, s: sampler, coords: vec2<f32>, bias: f32) -> vec4<f32>
textureSampleBias(t: texture_2d<f32>, s: sampler, coords: vec2<f32>, bias: f32, offset: vec2<i32>) -> vec4<f32>
textureSampleBias(t: texture_2d_array<f32>, s: sampler, coords: vec2<f32>, array_index: i32, bias: f32) -> vec4<f32>
textureSampleBias(t: texture_2d_array<f32>, s: sampler, coords: vec2<f32>, array_index: i32, bias: f32, offset: vec2<i32>) -> vec4<f32>
textureSampleBias(t: texture_3d<f32>, s: sampler, coords: vec3<f32>, bias: f32) -> vec4<f32>
textureSampleBias(t: texture_3d<f32>, s: sampler, coords: vec3<f32>, bias: f32, offset: vec3<i32>) -> vec4<f32>
textureSampleBias(t: texture_cube<f32>, s: sampler, coords: vec3<f32>, bias: f32) -> vec4<f32>
textureSampleBias(t: texture_cube_array<f32>, s: sampler, coords: vec3<f32>, array_index: i32, bias: f32) -> vec4<f32>
```

**Parameters:**

<table class='data'>
  <tr><td>`t`<td>
  The [texture](#sampled-texture-type) to sample.
  <tr><td>`s`<td>
  The [sampler type](#sampler-type).
  <tr><td>`coords`<td>
  The texture coordinates used for sampling.
  <tr><td>`array_index`<td>
  The 0-based texture array index to sample.
  <tr><td>`bias`<td>
  The bias to apply to the mip level before sampling.
  `bias` must be between `-16.0` and `15.99`.
  <tr><td>`offset`<td>
  The optional texel offset applied to the unnormalized texture coordinate
  before sampling the texture. This offset is applied before applying any
  texture wrapping modes.<br>
  The `offset` expression must be either:
    * a `const_expression` expression (e.g. `vec2<i32>(1, 2)`).<br>
    * a name of a [=module scope|module-scope=] [=let declaration=]
  Each `offset` component must be at least `-8` and at most `7`. Values outside
  of this range will result in a [=shader-creation error=].
</table>

**Returns:**

The sampled value.


### `textureSampleCompare` ### {#texturesamplecompare}

Samples a depth texture and compares the sampled depth values against a reference value.

Must only be used in a [=fragment=] shader stage.
Must only be invoked in uniform control flow.

```rust
textureSampleCompare(t: texture_depth_2d, s: sampler_comparison, coords: vec2<f32>, depth_ref: f32) -> f32
textureSampleCompare(t: texture_depth_2d, s: sampler_comparison, coords: vec2<f32>, depth_ref: f32, offset: vec2<i32>) -> f32
textureSampleCompare(t: texture_depth_2d_array, s: sampler_comparison, coords: vec2<f32>, array_index: i32, depth_ref: f32) -> f32
textureSampleCompare(t: texture_depth_2d_array, s: sampler_comparison, coords: vec2<f32>, array_index: i32, depth_ref: f32, offset: vec2<i32>) -> f32
textureSampleCompare(t: texture_depth_cube, s: sampler_comparison, coords: vec3<f32>, depth_ref: f32) -> f32
textureSampleCompare(t: texture_depth_cube_array, s: sampler_comparison, coords: vec3<f32>, array_index: i32, depth_ref: f32) -> f32
```

**Parameters:**

<table class='data'>
  <tr><td>`t`<td>
  The [depth](#texture-depth) texture to sample.
  <tr><td>`s`<td>
  The [sampler comparision](#sampler-type) type.
  <tr><td>`coords`<td>
  The texture coordinates used for sampling.
  <tr><td>`array_index`<td>
  The 0-based texture array index to sample.
  <tr><td>`depth_ref`<td>
  The reference value to compare the sampled depth value against.
  <tr><td>`offset`<td>
  The optional texel offset applied to the unnormalized texture coordinate
  before sampling the texture. This offset is applied before applying any
  texture wrapping modes.<br>
  The `offset` expression must be either:
    * a `const_expression` expression (e.g. `vec2<i32>(1, 2)`).<br>
    * a name of a [=module scope|module-scope=] [=let declaration=]
  Each `offset` component must be at least `-8` and at most `7`. Values outside
  of this range will result in a [=shader-creation error=].
</table>

**Returns:**

A value in the range `[0.0..1.0]`.

Each sampled texel is compared against the reference value using the comparision
operator defined by the `sampler_comparison`, resulting in either a `0` or `1`
value for each texel.

If the sampler uses bilinear filtering then the returned value is
the filtered average of these values, otherwise the comparision result of a
single texel is returned.


### `textureSampleCompareLevel` ### {#texturesamplecomparelevel}

Samples a depth texture and compares the sampled depth values against a reference value.

```rust
textureSampleCompareLevel(t: texture_depth_2d, s: sampler_comparison, coords: vec2<f32>, depth_ref: f32) -> f32
textureSampleCompareLevel(t: texture_depth_2d, s: sampler_comparison, coords: vec2<f32>, depth_ref: f32, offset: vec2<i32>) -> f32
textureSampleCompareLevel(t: texture_depth_2d_array, s: sampler_comparison, coords: vec2<f32>, array_index: i32, depth_ref: f32) -> f32
textureSampleCompareLevel(t: texture_depth_2d_array, s: sampler_comparison, coords: vec2<f32>, array_index: i32, depth_ref: f32, offset: vec2<i32>) -> f32
textureSampleCompareLevel(t: texture_depth_cube, s: sampler_comparison, coords: vec3<f32>, depth_ref: f32) -> f32
textureSampleCompareLevel(t: texture_depth_cube_array, s: sampler_comparison, coords: vec3<f32>, array_index: i32, depth_ref: f32) -> f32
```

The `textureSampleCompareLevel` function is the same as `textureSampleCompare`, except that:

* `textureSampleCompareLevel` always samples texels from mip level 0.
    * The function does not compute derivatives.
    * There is no requirement for `textureSampleCompareLevel` to be invoked in uniform control flow.
* `textureSampleCompareLevel` may be invoked in any shader stage.

### `textureSampleGrad` ### {#texturesamplegrad}

Samples a texture using explicit gradients.

```rust
textureSampleGrad(t: texture_2d<f32>, s: sampler, coords: vec2<f32>, ddx: vec2<f32>, ddy: vec2<f32>) -> vec4<f32>
textureSampleGrad(t: texture_2d<f32>, s: sampler, coords: vec2<f32>, ddx: vec2<f32>, ddy: vec2<f32>, offset: vec2<i32>) -> vec4<f32>
textureSampleGrad(t: texture_2d_array<f32>, s: sampler, coords: vec2<f32>, array_index: i32, ddx: vec2<f32>, ddy: vec2<f32>) -> vec4<f32>
textureSampleGrad(t: texture_2d_array<f32>, s: sampler, coords: vec2<f32>, array_index: i32, ddx: vec2<f32>, ddy: vec2<f32>, offset: vec2<i32>) -> vec4<f32>
textureSampleGrad(t: texture_3d<f32>, s: sampler, coords: vec3<f32>, ddx: vec3<f32>, ddy: vec3<f32>) -> vec4<f32>
textureSampleGrad(t: texture_3d<f32>, s: sampler, coords: vec3<f32>, ddx: vec3<f32>, ddy: vec3<f32>, offset: vec3<i32>) -> vec4<f32>
textureSampleGrad(t: texture_cube<f32>, s: sampler, coords: vec3<f32>, ddx: vec3<f32>, ddy: vec3<f32>) -> vec4<f32>
textureSampleGrad(t: texture_cube_array<f32>, s: sampler, coords: vec3<f32>, array_index: i32, ddx: vec3<f32>, ddy: vec3<f32>) -> vec4<f32>
```

**Parameters:**

<table class='data'>
  <tr><td>`t`<td>
  The [texture](#sampled-texture-type) to sample.
  <tr><td>`s`<td>
  The [sampler type](#sampler-type).
  <tr><td>`coords`<td>
  The texture coordinates used for sampling.
  <tr><td>`array_index`<td>
  The 0-based texture array index to sample.
  <tr><td>`ddx`<td>
  The x direction derivative vector used to compute the sampling locations.
  <tr><td>`ddy`<td>
  The y direction derivative vector used to compute the sampling locations.
  <tr><td>`offset`<td>
  The optional texel offset applied to the unnormalized texture coordinate
  before sampling the texture. This offset is applied before applying any
  texture wrapping modes.<br>
  The `offset` expression must be either:
    * a `const_expression` expression (e.g. `vec2<i32>(1, 2)`).<br>
    * a name of a [=module scope|module-scope=] [=let declaration=]
  Each `offset` component must be at least `-8` and at most `7`. Values outside
  of this range will result in a [=shader-creation error=].
</table>

**Returns:**

The sampled value.


### `textureSampleLevel` ### {#texturesamplelevel}

Samples a texture using an explicit mip level, or at mip level 0.

```rust
textureSampleLevel(t: texture_2d<f32>, s: sampler, coords: vec2<f32>, level: f32) -> vec4<f32>
textureSampleLevel(t: texture_2d<f32>, s: sampler, coords: vec2<f32>, level: f32, offset: vec2<i32>) -> vec4<f32>
textureSampleLevel(t: texture_2d_array<f32>, s: sampler, coords: vec2<f32>, array_index: i32, level: f32) -> vec4<f32>
textureSampleLevel(t: texture_2d_array<f32>, s: sampler, coords: vec2<f32>, array_index: i32, level: f32, offset: vec2<i32>) -> vec4<f32>
textureSampleLevel(t: texture_3d<f32>, s: sampler, coords: vec3<f32>, level: f32) -> vec4<f32>
textureSampleLevel(t: texture_3d<f32>, s: sampler, coords: vec3<f32>, level: f32, offset: vec3<i32>) -> vec4<f32>
textureSampleLevel(t: texture_cube<f32>, s: sampler, coords: vec3<f32>, level: f32) -> vec4<f32>
textureSampleLevel(t: texture_cube_array<f32>, s: sampler, coords: vec3<f32>, array_index: i32, level: f32) -> vec4<f32>
textureSampleLevel(t: texture_depth_2d, s: sampler, coords: vec2<f32>, level: i32) -> f32
textureSampleLevel(t: texture_depth_2d, s: sampler, coords: vec2<f32>, level: i32, offset: vec2<i32>) -> f32
textureSampleLevel(t: texture_depth_2d_array, s: sampler, coords: vec2<f32>, array_index: i32, level: i32) -> f32
textureSampleLevel(t: texture_depth_2d_array, s: sampler, coords: vec2<f32>, array_index: i32, level: i32, offset: vec2<i32>) -> f32
textureSampleLevel(t: texture_depth_cube, s: sampler, coords: vec3<f32>, level: i32) -> f32
textureSampleLevel(t: texture_depth_cube_array, s: sampler, coords: vec3<f32>, array_index: i32, level: i32) -> f32
textureSampleLevel(t: texture_external, s: sampler, coords: vec2<f32>) -> vec4<f32>
```

**Parameters:**

<table class='data'>
  <tr><td>`t`<td>
  The [sampled](#sampled-texture-type) or [depth](#texture-depth) texture to
  sample.
  <tr><td>`s`<td>
  The [sampler type](#sampler-type).
  <tr><td>`coords`<td>
  The texture coordinates used for sampling.
  <tr><td>`array_index`<td>
  The 0-based texture array index to sample.
  <tr><td>`level`<td>
  The mip level, with level 0 containing a full size version of the texture.
  For the functions where `level` is a `f32`, fractional values may interpolate
  between two levels if the format is filterable according to the
  [Texture Format Capabilities](https://gpuweb.github.io/gpuweb/#texture-format-caps).<br>
  When not specified, mip level 0 is sampled.
  <tr><td>`offset`<td>
  The optional texel offset applied to the unnormalized texture coordinate
  before sampling the texture. This offset is applied before applying any
  texture wrapping modes.<br>
  The `offset` expression must be either:
    * a `const_expression` expression (e.g. `vec2<i32>(1, 2)`).<br>
    * a name of a [=module scope|module-scope=] [=let declaration=]
  Each `offset` component must be at least `-8` and at most `7`. Values outside
  of this range will result in a [=shader-creation error=].
</table>

**Returns:**

The sampled value.


### `textureStore` ### {#texturestore}

Writes a single texel to a texture.

```rust
textureStore(t: texture_storage_1d<F,write>, coords: i32, value: vec4<T>)
textureStore(t: texture_storage_2d<F,write>, coords: vec2<i32>, value: vec4<T>)
textureStore(t: texture_storage_2d_array<F,write>, coords: vec2<i32>, array_index: i32, value: vec4<T>)
textureStore(t: texture_storage_3d<F,write>, coords: vec3<i32>, value: vec4<T>)
```

The channel format `T` depends on the storage texel format `F`.
[See the texel format table](#storage-texel-formats) for the mapping of texel
format to channel format.

**Parameters:**

<table class='data'>
  <tr><td>`t`<td>
  The [write-only storage texture](#texture-storage).
  <tr><td>`coords`<td>
  The 0-based texel coordinate.<br>
  <tr><td>`array_index`<td>
  The 0-based texture array index.
  <tr><td>`value`<td>
  The new texel value.<br>
</table>

**Note:**

An out-of-bounds access occurs if:
* any element of `coords` is outside the range `[0, textureDimensions(t))`
    for the corresponding element, or
* `array_index` is outside the range of `[0, textureNumLayers(t))`

If an out-of-bounds access occurs, the built-in function may do any of the following:
* not be executed
* store `value` to some in bounds texel

**TODO:**

<pre class='def'>
TODO(dsinclair): Need gather operations
</pre>

## Atomic Built-in Functions ## {#atomic-builtin-functions}

Atomic built-in functions can be used to read/write/read-modify-write atomic
objects. They are the only operations allowed on [[#atomic-types]].

All atomic built-in functions use a `relaxed` [[#memory-semantics|memory
ordering]].  This means synchronization and ordering guarantees only apply among
atomic operations acting on the same [=memory locations=].  No synchronization
or ordering guarantees apply between atomic and non-atomic memory accesses, or
between atomic accesses acting on different memory locations.

Atomic built-in functions `must` not be used in a [=vertex=] shader stage.

The address space `SC` of the `atomic_ptr` parameter in all atomic built-in
functions `must` be either [=address spaces/storage=] or [=address spaces/workgroup=].

The access mode `A` in all atomic built-in functions must be [=access/read_write=].

### Atomic Load ### {#atomic-load}

```rust
atomicLoad(atomic_ptr: ptr<SC, atomic<T>, A>) -> T
```

Returns the atomically loaded the value pointed to by `atomic_ptr`.
It does not [=atomic modification|modify=] the object.

### Atomic Store ### {#atomic-store}

```rust
atomicStore(atomic_ptr: ptr<SC, atomic<T>, A>, v: T)
```

Atomically stores the value `v` in the atomic object pointed to by `atomic_ptr`.

### Atomic Read-modify-write ### {#atomic-rmw}

```rust
atomicAdd(atomic_ptr: ptr<SC, atomic<T>, A>, v: T) -> T
atomicSub(atomic_ptr: ptr<SC, atomic<T>, A>, v: T) -> T
atomicMax(atomic_ptr: ptr<SC, atomic<T>, A>, v: T) -> T
atomicMin(atomic_ptr: ptr<SC, atomic<T>, A>, v: T) -> T
atomicAnd(atomic_ptr: ptr<SC, atomic<T>, A>, v: T) -> T
atomicOr(atomic_ptr: ptr<SC, atomic<T>, A>, v: T) -> T
atomicXor(atomic_ptr: ptr<SC, atomic<T>, A>, v: T) -> T
```
Each function performs the following steps atomically:

1. Load the original value pointed to by `atomic_ptr`.
2. Obtains a new value by performing the operation (e.g. max) from the function
    name with the value |v|.
3. Store the new value using `atomic_ptr`.

Each function returns the original value stored in the atomic object.

```rust
atomicExchange(atomic_ptr: ptr<SC, atomic<T>, A>, v: T) -> T
```

Atomically stores the value `v` in the atomic object pointed to
`atomic_ptr` and returns the original value stored in the atomic object.

```rust
atomicCompareExchangeWeak(atomic_ptr: ptr<SC, atomic<T>, A>, cmp: T, v: T) -> __atomic_compare_exchange_result<T>

struct __atomic_compare_exchange_result<T> {
  old_value : T; // old value stored in the atomic
  exchanged : bool; // true if the exchange was done
}
```

Note: A value cannot be explicitly declared with the type
`__atomic_compare_exchange_result`, but a value may infer the type.

Performs the following steps atomically:

1. Load the original value pointed to by `atomic_ptr`.
2. Compare the original value to the value `v` using an equality operation.
3. Store the value `v` `only if` the result of the equality comparison was `true`.

Returns a two member structure, where the first member, `old_value`, is the
original value of the atomic object and the second member, `exchanged`, is
whether or not the comparison succeeded.

Note: the equality comparison may spuriously fail on some implementations. That
is, the second component of the result vector may be `false` even if the first
component of the result vector equals `cmp`.

## Data Packing Built-in Functions ## {#pack-builtin-functions}

Data packing builtin functions can be used to encode values using data formats that
do not correspond directly to types in WGSL.
This enables a program to write many densely packed values to memory, which can
reduce a shader's memory bandwidth demand.

<table class='data'>
  <thead>
    <tr><td>Overload<td>Description
  </thead>
  <tr algorithm="packing 4x8snorm">
    <td class="nowrap">`pack4x8snorm`(|e|: vec4&lt;f32&gt;) -> u32
    <td>Converts four normalized floating point values to 8-bit signed integers, and then combines them
        into one `u32` value.<br>
        Component |e|[|i|] of the input is converted to an 8-bit twos complement integer value
        &lfloor; 0.5 + 127 &times; min(1, max(-1, |e|[|i|])) &rfloor; which is then placed in bits
        8 &times; |i| through
        8 &times; |i| + 7 of the result.

  <tr algorithm="packing 4x8unorm">
    <td class="nowrap">`pack4x8unorm`(|e|: vec4&lt;f32&gt;) -> u32
    <td>Converts four normalized floating point values to 8-bit unsigned integers, and then combines them
        into one `u32` value.<br>
        Component |e|[|i|] of the input is converted to an 8-bit unsigned integer value
        &lfloor; 0.5 + 255 &times; min(1, max(0, |e|[|i|])) &rfloor; which is then placed in bits
        8 &times; |i| through
        8 &times; |i| + 7 of the result.

  <tr algorithm="packing 2x16snorm">
    <td class="nowrap">`pack2x16snorm`(|e|: vec2&lt;f32&gt;) -> u32
    <td>Converts two normalized floating point values to 16-bit signed integers, and then combines them
        into one `u32` value.<br>
        Component |e|[|i|] of the input is converted to a 16-bit twos complement integer value
        &lfloor; 0.5 + 32767 &times; min(1, max(-1, |e|[|i|])) &rfloor; which is then placed in bits
        16 &times; |i| through
        16 &times; |i| + 15 of the result.

  <tr algorithm="packing 2x16unorm">
    <td class="nowrap">`pack2x16unorm`(|e|: vec2&lt;f32&gt;) -> u32
    <td>Converts two normalized floating point values to 16-bit unsigned integers, and then combines them
        into one `u32` value.<br>
        Component |e|[|i|] of the input is converted to a 16-bit unsigned integer value
        &lfloor; 0.5 + 65535 &times; min(1, max(0, |e|[|i|])) &rfloor; which is then placed in bits
        16 &times; |i| through
        16 &times; |i| + 15 of the result.

  <tr algorithm="packing 2x16float">
    <td class="nowrap">`pack2x16float`(|e|: vec2&lt;f32&gt;) -> u32
    <td>Converts two floating point values to half-precision floating point numbers, and then combines
        them into one `u32` value.<br>
        Component |e|[|i|] of the input is converted to a [[!IEEE-754|IEEE-754]] binary16 value, which is then
        placed in bits
        16 &times; |i| through
        16 &times; |i| + 15 of the result.
        See [[#floating-point-conversion]].
</table>

## Data Unpacking Built-in Functions ## {#unpack-builtin-functions}

Data unpacking builtin functions can be used to decode values in
data formats that do not correspond directly to types in WGSL.
This enables a program to read many densely packed values from memory, which can
reduce a shader's memory bandwidth demand.

<table class='data'>
  <thead>
    <tr><td>Overload<td>Description
  </thead>
  <tr algorithm="unpacking 4x8snorm">
    <td class="nowrap">`unpack4x8snorm`(|e|: u32) -> vec4&lt;f32&gt;
    <td>Decomposes a 32-bit value into four 8-bit chunks, then reinterprets
        each chunk as a signed normalized floating point value.<br>
        Component |i| of the result is max(|v| &div; 127, -1), where |v| is the interpretation of
        bits 8&times;|i| through 8&times;|i|+7 of |e| as a twos-complement signed integer.

  <tr algorithm="unpacking 4x8unorm">
    <td class="nowrap">`unpack4x8unorm`(|e|: u32) -> vec4&lt;f32&gt;
    <td>Decomposes a 32-bit value into four 8-bit chunks, then reinterprets
        each chunk as an unsigned normalized floating point value.<br>
        Component |i| of the result is |v| &div; 255, where |v| is the interpretation of
        bits 8&times;|i| through 8&times;|i|+7 of |e| as an unsigned integer.

  <tr algorithm="unpacking 2x16snorm">
    <td class="nowrap">`unpack2x16snorm`(|e|: u32) -> vec2&lt;f32&gt;
    <td>Decomposes a 32-bit value into two 16-bit chunks, then reinterprets
        each chunk as a signed normalized floating point value.<br>
        Component |i| of the result is max(|v| &div; 32767, -1), where |v| is the interpretation of
        bits 16&times;|i| through 16&times;|i|+15 of |e| as a twos-complement signed integer.

  <tr algorithm="unpacking 2x16unorm">
    <td class="nowrap">`unpack2x16unorm`(|e|: u32) -> vec2&lt;f32&gt;
    <td>Decomposes a 32-bit value into two 16-bit chunks, then reinterprets
        each chunk as an unsigned normalized floating point value.<br>
        Component |i| of the result is |v| &div; 65535, where |v| is the interpretation of
        bits 16&times;|i| through 16&times;|i|+15 of |e| as an unsigned integer.

  <tr algorithm="unpacking 2x16float">
    <td class="nowrap">`unpack2x16float`(|e|: u32) -> vec2&lt;f32&gt;
    <td>Decomposes a 32-bit value into two 16-bit chunks, and reinterpets each chunk
        as a floating point value.<br>
        Component |i| of the result is the f32 representation of |v|,
        where |v| is the interpretation of bits 16&times;|i| through 16&times;|i|+15 of |e|
        as an [[!IEEE-754|IEEE-754]] binary16 value.
        See [[#floating-point-conversion]].
</table>

## Synchronization Built-in Functions ## {#sync-builtin-functions}

WGSL provides the following synchronization functions:

```rust
storageBarrier()
workgroupBarrier()
```

All synchronization functions execute a [=control barrier=] with
Acquire/Release [[#memory-semantics|memory ordering]].
That is, all synchronization functions, and affected memory and atomic
operations are ordered in [[#program-order|program order]] relative to the
synchronization function.
Additionally, the affected memory and atomic operations program-ordered before
the synchronization function must be visible to all other threads in the
workgroup before any affected memory or atomic operation program-ordered after
the synchronization function is executed by a member of the workgroup.
All synchronization functions use the `Workgroup` [=memory scope=].
All synchronization functions have a `Workgroup` [=execution scope=].
All synchronization functions must only be used in the [=compute=] shader
stage.

storageBarrier affects memory and atomic operations in the [=address spaces/storage=] address space.

workgroupBarrier affects memory and atomic operations in the [=address spaces/workgroup=] address space.


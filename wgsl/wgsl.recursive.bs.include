<div class='syntax' noexport='true'>
  <dfn for='recursive descent syntax'>additive_operator</dfn>:

 | `'+'`

 | `'-'`
</div>

<div class='syntax' noexport='true'>
  <dfn for='recursive descent syntax'>argument_expression_list</dfn>:

 | `'('` ( [=recursive descent syntax/expression=] ( `','` [=recursive descent syntax/expression=] )* `','` ? )? `')'`
</div>

<div class='syntax' noexport='true'>
  <dfn for='recursive descent syntax'>assignment_statement/0.1</dfn>:

 | [=recursive descent syntax/compound_assignment_operator=]

 | `'='`
</div>

<div class='syntax' noexport='true'>
  <dfn for='recursive descent syntax'>attribute</dfn>:

 | `'@'` `'align'` `'('` [=recursive descent syntax/expression=] `','` ? `')'`

 | `'@'` `'binding'` `'('` [=recursive descent syntax/expression=] `','` ? `')'`

 | `'@'` `'builtin'` `'('` [=recursive descent syntax/expression=] `','` ? `')'`

 | `'@'` `'compute'`

 | `'@'` `'const'`

 | `'@'` `'diagnostic'` [=recursive descent syntax/diagnostic_control=]

 | `'@'` `'fragment'`

 | `'@'` `'group'` `'('` [=recursive descent syntax/expression=] `','` ? `')'`

 | `'@'` `'id'` `'('` [=recursive descent syntax/expression=] `','` ? `')'`

 | `'@'` `'interpolate'` `'('` [=recursive descent syntax/expression=] `','` ? `')'`

 | `'@'` `'interpolate'` `'('` [=recursive descent syntax/expression=] `','` [=recursive descent syntax/expression=] `','` ? `')'`

 | `'@'` `'invariant'`

 | `'@'` `'location'` `'('` [=recursive descent syntax/expression=] `','` ? `')'`

 | `'@'` `'must_use'`

 | `'@'` `'size'` `'('` [=recursive descent syntax/expression=] `','` ? `')'`

 | `'@'` `'vertex'`

 | `'@'` `'workgroup_size'` `'('` [=recursive descent syntax/expression=] `','` ? `')'`

 | `'@'` `'workgroup_size'` `'('` [=recursive descent syntax/expression=] `','` [=recursive descent syntax/expression=] `','` ? `')'`

 | `'@'` `'workgroup_size'` `'('` [=recursive descent syntax/expression=] `','` [=recursive descent syntax/expression=] `','` [=recursive descent syntax/expression=] `','` ? `')'`
</div>

<div class='syntax' noexport='true'>
  <dfn for='recursive descent syntax'>bitwise_expression.post.unary_expression</dfn>:

 | `'&'` [=recursive descent syntax/unary_expression=] ( `'&'` [=recursive descent syntax/unary_expression=] )*

 | `'^'` [=recursive descent syntax/unary_expression=] ( `'^'` [=recursive descent syntax/unary_expression=] )*

 | `'|'` [=recursive descent syntax/unary_expression=] ( `'|'` [=recursive descent syntax/unary_expression=] )*
</div>

<div class='syntax' noexport='true'>
  <dfn for='recursive descent syntax'>bool_literal</dfn>:

 | `'false'`

 | `'true'`
</div>

<div class='syntax' noexport='true'>
  <dfn for='recursive descent syntax'>case_selector</dfn>:

 | [=recursive descent syntax/expression=]

 | `'default'`
</div>

<div class='syntax' noexport='true'>
  <dfn for='recursive descent syntax'>component_or_swizzle_specifier</dfn>:

 | `'.'` [=recursive descent syntax/member_ident=] [=recursive descent syntax/component_or_swizzle_specifier=] ?

 | `'.'` [=recursive descent syntax/swizzle_name=] [=recursive descent syntax/component_or_swizzle_specifier=] ?

 | `'['` [=recursive descent syntax/expression=] `']'` [=recursive descent syntax/component_or_swizzle_specifier=] ?
</div>

<div class='syntax' noexport='true'>
  <dfn for='recursive descent syntax'>compound_assignment_operator</dfn>:

 | [=syntax_sym/shift_left_assign=]

 | [=syntax_sym/shift_right_assign=]

 | `'%='`

 | `'&='`

 | `'*='`

 | `'+='`

 | `'-='`

 | `'/='`

 | `'^='`

 | `'|='`
</div>

<div class='syntax' noexport='true'>
  <dfn for='recursive descent syntax'>compound_statement</dfn>:

 | [=recursive descent syntax/attribute=] * `'{'` [=recursive descent syntax/statement=] * `'}'`
</div>

<div class='syntax' noexport='true'>
  <dfn for='recursive descent syntax'>core_lhs_expression</dfn>:

 | [=recursive descent syntax/ident=]

 | `'('` [=recursive descent syntax/lhs_expression=] `')'`
</div>

<div class='syntax' noexport='true'>
  <dfn for='recursive descent syntax'>decimal_float_literal</dfn>:

 | `/0[fh]/`

 | `/[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/`

 | `/[0-9]+[eE][+-]?[0-9]+[fh]?/`

 | `/[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/`

 | `/[1-9][0-9]*[fh]/`
</div>

<div class='syntax' noexport='true'>
  <dfn for='recursive descent syntax'>decimal_int_literal</dfn>:

 | `/0[iu]?/`

 | `/[1-9][0-9]*[iu]?/`
</div>

<div class='syntax' noexport='true'>
  <dfn for='recursive descent syntax'>diagnostic_control</dfn>:

 | `'('` [=recursive descent syntax/severity_control_name=] `','` [=recursive descent syntax/diagnostic_rule_name=] `','` ? `')'`
</div>

<div class='syntax' noexport='true'>
  <dfn for='recursive descent syntax'>diagnostic_rule_name</dfn>:

 | [=syntax/ident_pattern_token=]

 | [=syntax/ident_pattern_token=] `'.'` [=syntax/ident_pattern_token=]
</div>

<div class='syntax' noexport='true'>
  <dfn for='recursive descent syntax'>expression</dfn>:

 | [=recursive descent syntax/unary_expression=] [=recursive descent syntax/bitwise_expression.post.unary_expression=]

 | [=recursive descent syntax/unary_expression=] [=recursive descent syntax/relational_expression.post.unary_expression=]

 | [=recursive descent syntax/unary_expression=] [=recursive descent syntax/relational_expression.post.unary_expression=] `'&&'` [=recursive descent syntax/unary_expression=] [=recursive descent syntax/relational_expression.post.unary_expression=] ( `'&&'` [=recursive descent syntax/unary_expression=] [=recursive descent syntax/relational_expression.post.unary_expression=] )*

 | [=recursive descent syntax/unary_expression=] [=recursive descent syntax/relational_expression.post.unary_expression=] `'||'` [=recursive descent syntax/unary_expression=] [=recursive descent syntax/relational_expression.post.unary_expression=] ( `'||'` [=recursive descent syntax/unary_expression=] [=recursive descent syntax/relational_expression.post.unary_expression=] )*
</div>

<div class='syntax' noexport='true'>
  <dfn for='recursive descent syntax'>float_literal</dfn>:

 | [=recursive descent syntax/decimal_float_literal=]

 | [=recursive descent syntax/hex_float_literal=]
</div>

<div class='syntax' noexport='true'>
  <dfn for='recursive descent syntax'>for_init</dfn>:

 | [=recursive descent syntax/ident=] [=recursive descent syntax/template_elaborated_ident.post.ident=] [=recursive descent syntax/argument_expression_list=]

 | [=recursive descent syntax/variable_or_value_statement=]

 | [=recursive descent syntax/variable_updating_statement=]
</div>

<div class='syntax' noexport='true'>
  <dfn for='recursive descent syntax'>for_update</dfn>:

 | [=recursive descent syntax/ident=] [=recursive descent syntax/template_elaborated_ident.post.ident=] [=recursive descent syntax/argument_expression_list=]

 | [=recursive descent syntax/variable_updating_statement=]
</div>

<div class='syntax' noexport='true'>
  <dfn for='recursive descent syntax'>global_decl</dfn>:

 | [=recursive descent syntax/attribute=] * `'fn'` [=recursive descent syntax/ident=] `'('` ( [=recursive descent syntax/attribute=] * [=recursive descent syntax/ident=] `':'` [=recursive descent syntax/type_specifier=] ( `','` [=recursive descent syntax/param=] )* `','` ? )? `')'` ( `'->'` [=recursive descent syntax/attribute=] * [=recursive descent syntax/ident=] [=recursive descent syntax/template_elaborated_ident.post.ident=] )? [=recursive descent syntax/attribute=] * `'{'` [=recursive descent syntax/statement=] * `'}'`

 | [=recursive descent syntax/attribute=] * `'var'` ( [=syntax_sym/_template_args_start=] [=recursive descent syntax/expression=] ( `','` [=recursive descent syntax/expression=] )* `','` ? [=syntax_sym/_template_args_end=] )? [=recursive descent syntax/optionally_typed_ident=] ( `'='` [=recursive descent syntax/expression=] )? `';'`

 | [=recursive descent syntax/global_value_decl=] `';'`

 | `';'`

 | `'alias'` [=recursive descent syntax/ident=] `'='` [=recursive descent syntax/ident=] [=recursive descent syntax/template_elaborated_ident.post.ident=] `';'`

 | `'const_assert'` [=recursive descent syntax/expression=] `';'`

 | `'struct'` [=recursive descent syntax/ident=] `'{'` [=recursive descent syntax/attribute=] * [=recursive descent syntax/member_ident=] `':'` [=recursive descent syntax/type_specifier=] ( `','` [=recursive descent syntax/attribute=] * [=recursive descent syntax/member_ident=] `':'` [=recursive descent syntax/type_specifier=] )* `','` ? `'}'`
</div>

<div class='syntax' noexport='true'>
  <dfn for='recursive descent syntax'>global_directive</dfn>:

 | `'diagnostic'` `'('` [=recursive descent syntax/severity_control_name=] `','` [=recursive descent syntax/diagnostic_rule_name=] `','` ? `')'` `';'`

 | `'enable'` [=syntax/ident_pattern_token=] ( `','` [=syntax/ident_pattern_token=] )* `','` ? `';'`

 | `'requires'` [=syntax/ident_pattern_token=] ( `','` [=syntax/ident_pattern_token=] )* `','` ? `';'`
</div>

<div class='syntax' noexport='true'>
  <dfn for='recursive descent syntax'>global_value_decl</dfn>:

 | [=recursive descent syntax/attribute=] * `'override'` [=recursive descent syntax/optionally_typed_ident=] ( `'='` [=recursive descent syntax/expression=] )?

 | `'const'` [=recursive descent syntax/optionally_typed_ident=] `'='` [=recursive descent syntax/expression=]
</div>

<div class='syntax' noexport='true'>
  <dfn for='recursive descent syntax'>hex_float_literal</dfn>:

 | `/0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/`

 | `/0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/`

 | `/0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/`
</div>

<div class='syntax' noexport='true'>
  <dfn for='recursive descent syntax'>ident</dfn>:

 | [=syntax/ident_pattern_token=]
</div>

<div class='syntax' noexport='true'>
  <dfn for='recursive descent syntax'>int_literal</dfn>:

 | [=recursive descent syntax/decimal_int_literal=]

 | [=syntax/hex_int_literal=]
</div>

<div class='syntax' noexport='true'>
  <dfn for='recursive descent syntax'>lhs_expression</dfn>:

 | [=recursive descent syntax/core_lhs_expression=] [=recursive descent syntax/component_or_swizzle_specifier=] ?

 | `'&'` [=recursive descent syntax/lhs_expression=]

 | `'*'` [=recursive descent syntax/lhs_expression=]
</div>

<div class='syntax' noexport='true'>
  <dfn for='recursive descent syntax'>literal</dfn>:

 | [=recursive descent syntax/bool_literal=]

 | [=recursive descent syntax/float_literal=]

 | [=recursive descent syntax/int_literal=]
</div>

<div class='syntax' noexport='true'>
  <dfn for='recursive descent syntax'>member_ident</dfn>:
[=syntax/ident_pattern_token=]
</div>

<div class='syntax' noexport='true'>
  <dfn for='recursive descent syntax'>multiplicative_operator</dfn>:

 | `'%'`

 | `'*'`

 | `'/'`
</div>

<div class='syntax' noexport='true'>
  <dfn for='recursive descent syntax'>optionally_typed_ident</dfn>:

 | [=recursive descent syntax/ident=] ( `':'` [=recursive descent syntax/type_specifier=] )?
</div>

<div class='syntax' noexport='true'>
  <dfn for='recursive descent syntax'>param</dfn>:

 | [=recursive descent syntax/attribute=] * [=recursive descent syntax/ident=] `':'` [=recursive descent syntax/type_specifier=]
</div>

<div class='syntax' noexport='true'>
  <dfn for='recursive descent syntax'>primary_expression</dfn>:

 | [=recursive descent syntax/ident=] [=recursive descent syntax/template_elaborated_ident.post.ident=]

 | [=recursive descent syntax/ident=] [=recursive descent syntax/template_elaborated_ident.post.ident=] `'('` ( [=recursive descent syntax/expression=] ( `','` [=recursive descent syntax/expression=] )* `','` ? )? `')'`

 | [=recursive descent syntax/literal=]

 | `'('` [=recursive descent syntax/expression=] `')'`
</div>

<div class='syntax' noexport='true'>
  <dfn for='recursive descent syntax'>relational_expression.post.unary_expression</dfn>:

 | [=recursive descent syntax/shift_expression.post.unary_expression=]

 | [=recursive descent syntax/shift_expression.post.unary_expression=] [=syntax_sym/greater_than=] [=recursive descent syntax/unary_expression=] [=recursive descent syntax/shift_expression.post.unary_expression=]

 | [=recursive descent syntax/shift_expression.post.unary_expression=] [=syntax_sym/greater_than_equal=] [=recursive descent syntax/unary_expression=] [=recursive descent syntax/shift_expression.post.unary_expression=]

 | [=recursive descent syntax/shift_expression.post.unary_expression=] [=syntax_sym/less_than=] [=recursive descent syntax/unary_expression=] [=recursive descent syntax/shift_expression.post.unary_expression=]

 | [=recursive descent syntax/shift_expression.post.unary_expression=] [=syntax_sym/less_than_equal=] [=recursive descent syntax/unary_expression=] [=recursive descent syntax/shift_expression.post.unary_expression=]

 | [=recursive descent syntax/shift_expression.post.unary_expression=] `'!='` [=recursive descent syntax/unary_expression=] [=recursive descent syntax/shift_expression.post.unary_expression=]

 | [=recursive descent syntax/shift_expression.post.unary_expression=] `'=='` [=recursive descent syntax/unary_expression=] [=recursive descent syntax/shift_expression.post.unary_expression=]
</div>

<div class='syntax' noexport='true'>
  <dfn for='recursive descent syntax'>severity_control_name</dfn>:

 | `'error'`

 | `'info'`

 | `'off'`

 | `'warning'`
</div>

<div class='syntax' noexport='true'>
  <dfn for='recursive descent syntax'>shift_expression.post.unary_expression</dfn>:

 | ( [=recursive descent syntax/multiplicative_operator=] [=recursive descent syntax/unary_expression=] )* ( [=recursive descent syntax/additive_operator=] [=recursive descent syntax/unary_expression=] ( [=recursive descent syntax/multiplicative_operator=] [=recursive descent syntax/unary_expression=] )* )*

 | [=syntax_sym/shift_left=] [=recursive descent syntax/unary_expression=]

 | [=syntax_sym/shift_right=] [=recursive descent syntax/unary_expression=]
</div>

<div class='syntax' noexport='true'>
  <dfn for='recursive descent syntax'>statement</dfn>:

 | [=recursive descent syntax/attribute=] * `'for'` `'('` [=recursive descent syntax/for_init=] ? `';'` [=recursive descent syntax/expression=] ? `';'` [=recursive descent syntax/for_update=] ? `')'` [=recursive descent syntax/compound_statement=]

 | [=recursive descent syntax/attribute=] * `'if'` [=recursive descent syntax/expression=] [=recursive descent syntax/compound_statement=] ( `'else'` `'if'` [=recursive descent syntax/expression=] [=recursive descent syntax/compound_statement=] )* ( `'else'` [=recursive descent syntax/compound_statement=] )?

 | [=recursive descent syntax/attribute=] * `'loop'` [=recursive descent syntax/attribute=] * `'{'` [=recursive descent syntax/statement=] * ( `'continuing'` [=recursive descent syntax/attribute=] * `'{'` [=recursive descent syntax/statement=] * ( `'break'` `'if'` [=recursive descent syntax/expression=] `';'` )? `'}'` )? `'}'`

 | [=recursive descent syntax/attribute=] * `'switch'` [=recursive descent syntax/expression=] [=recursive descent syntax/attribute=] * `'{'` [=recursive descent syntax/switch_clause=] * `'}'`

 | [=recursive descent syntax/attribute=] * `'while'` [=recursive descent syntax/expression=] [=recursive descent syntax/compound_statement=]

 | [=recursive descent syntax/compound_statement=]

 | [=recursive descent syntax/ident=] [=recursive descent syntax/template_elaborated_ident.post.ident=] `'('` ( [=recursive descent syntax/expression=] ( `','` [=recursive descent syntax/expression=] )* `','` ? )? `')'` `';'`

 | [=recursive descent syntax/variable_or_value_statement=] `';'`

 | [=recursive descent syntax/variable_updating_statement=] `';'`

 | [=syntax/break_statement=] `';'`

 | [=syntax/continue_statement=] `';'`

 | `';'`

 | `'const_assert'` [=recursive descent syntax/expression=] `';'`

 | `'discard'` `';'`

 | `'return'` [=recursive descent syntax/expression=] ? `';'`
</div>

<div class='syntax' noexport='true'>
  <dfn for='recursive descent syntax'>switch_clause</dfn>:

 | `'case'` [=recursive descent syntax/case_selector=] ( `','` [=recursive descent syntax/case_selector=] )* `','` ? `':'` ? [=recursive descent syntax/compound_statement=]

 | `'default'` `':'` ? [=recursive descent syntax/compound_statement=]
</div>

<div class='syntax' noexport='true'>
  <dfn for='recursive descent syntax'>swizzle_name</dfn>:

 | `'/[rgba]/'`

 | `'/[rgba][rgba]/'`

 | `'/[rgba][rgba][rgba]/'`

 | `'/[rgba][rgba][rgba][rgba]/'`

 | `'/[xyzw]/'`

 | `'/[xyzw][xyzw]/'`

 | `'/[xyzw][xyzw][xyzw]/'`

 | `'/[xyzw][xyzw][xyzw][xyzw]/'`
</div>

<div class='syntax' noexport='true'>
  <dfn for='recursive descent syntax'>template_arg_expression</dfn>:
[=recursive descent syntax/expression=]
</div>

<div class='syntax' noexport='true'>
  <dfn for='recursive descent syntax'>template_elaborated_ident.post.ident</dfn>:

 | ( [=syntax_sym/_template_args_start=] [=recursive descent syntax/template_arg_expression=] ( `','` [=recursive descent syntax/expression=] )* `','` ? [=syntax_sym/_template_args_end=] )?
</div>

<div class='syntax' noexport='true'>
  <dfn for='recursive descent syntax'>translation_unit</dfn>:

 | [=recursive descent syntax/global_directive=] * [=recursive descent syntax/global_decl=] *
</div>

<div class='syntax' noexport='true'>
  <dfn for='recursive descent syntax'>type_specifier</dfn>:

 | [=recursive descent syntax/ident=] ( [=syntax_sym/_template_args_start=] [=recursive descent syntax/template_arg_expression=] ( `','` [=recursive descent syntax/expression=] )* `','` ? [=syntax_sym/_template_args_end=] )?
</div>

<div class='syntax' noexport='true'>
  <dfn for='recursive descent syntax'>unary_expression</dfn>:

 | [=recursive descent syntax/primary_expression=] [=recursive descent syntax/component_or_swizzle_specifier=] ?

 | `'!'` [=recursive descent syntax/unary_expression=]

 | `'&'` [=recursive descent syntax/unary_expression=]

 | `'*'` [=recursive descent syntax/unary_expression=]

 | `'-'` [=recursive descent syntax/unary_expression=]

 | `'~'` [=recursive descent syntax/unary_expression=]
</div>

<div class='syntax' noexport='true'>
  <dfn for='recursive descent syntax'>variable_decl</dfn>:

 | `'var'` ( [=syntax_sym/_template_args_start=] [=recursive descent syntax/expression=] ( `','` [=recursive descent syntax/expression=] )* `','` ? [=syntax_sym/_template_args_end=] )? [=recursive descent syntax/optionally_typed_ident=]
</div>

<div class='syntax' noexport='true'>
  <dfn for='recursive descent syntax'>variable_or_value_statement</dfn>:

 | [=recursive descent syntax/variable_decl=]

 | [=recursive descent syntax/variable_decl=] `'='` [=recursive descent syntax/expression=]

 | `'const'` [=recursive descent syntax/optionally_typed_ident=] `'='` [=recursive descent syntax/expression=]

 | `'let'` [=recursive descent syntax/optionally_typed_ident=] `'='` [=recursive descent syntax/expression=]
</div>

<div class='syntax' noexport='true'>
  <dfn for='recursive descent syntax'>variable_updating_statement</dfn>:

 | [=recursive descent syntax/lhs_expression=] ( `'='` | [=recursive descent syntax/compound_assignment_operator=] ) [=recursive descent syntax/expression=]

 | [=recursive descent syntax/lhs_expression=] `'++'`

 | [=recursive descent syntax/lhs_expression=] `'--'`

 | `'_'` `'='` [=recursive descent syntax/expression=]
</div>

<div class='syntax' noexport='true'>
  <dfn for='recursive descent syntax'>access_mode</dfn>:

 | `'read'`

 | `'read_write'`

 | `'write'`
</div>

<div class='syntax' noexport='true'>
  <dfn for='recursive descent syntax'>additive_operator</dfn>:

 | `'+'`

 | `'-'`
</div>

<div class='syntax' noexport='true'>
  <dfn for='recursive descent syntax'>address_space</dfn>:

 | `'function'`

 | `'private'`

 | `'storage'`

 | `'uniform'`

 | `'workgroup'`
</div>

<div class='syntax' noexport='true'>
  <dfn for='recursive descent syntax'>argument_expression_list</dfn>:

 | `'('` ( [=recursive descent syntax/expression=] ( `','` [=recursive descent syntax/expression=] )* `','` ? )? `')'`
</div>

<div class='syntax' noexport='true'>
  <dfn for='recursive descent syntax'>assignment_statement/0.1</dfn>:

 | [=recursive descent syntax/compound_assignment_operator=]

 | `'='`
</div>

<div class='syntax' noexport='true'>
  <dfn for='recursive descent syntax'>attribute</dfn>:

 | `'@'` `'align'` `'('` [=recursive descent syntax/expression=] `','` ? `')'`

 | `'@'` `'binding'` `'('` [=recursive descent syntax/expression=] `','` ? `')'`

 | `'@'` `'builtin'` `'('` [=recursive descent syntax/builtin_value_name=] `','` ? `')'`

 | `'@'` `'compute'`

 | `'@'` `'const'`

 | `'@'` `'fragment'`

 | `'@'` `'group'` `'('` [=recursive descent syntax/expression=] `','` ? `')'`

 | `'@'` `'id'` `'('` [=recursive descent syntax/expression=] `','` ? `')'`

 | `'@'` `'interpolate'` `'('` [=recursive descent syntax/interpolation_type_name=] `','` ? `')'`

 | `'@'` `'interpolate'` `'('` [=recursive descent syntax/interpolation_type_name=] `','` [=recursive descent syntax/interpolation_sample_name=] `','` ? `')'`

 | `'@'` `'invariant'`

 | `'@'` `'location'` `'('` [=recursive descent syntax/expression=] `','` ? `')'`

 | `'@'` `'size'` `'('` [=recursive descent syntax/expression=] `','` ? `')'`

 | `'@'` `'vertex'`

 | `'@'` `'workgroup_size'` `'('` [=recursive descent syntax/expression=] `','` ? `')'`

 | `'@'` `'workgroup_size'` `'('` [=recursive descent syntax/expression=] `','` [=recursive descent syntax/expression=] `','` ? `')'`

 | `'@'` `'workgroup_size'` `'('` [=recursive descent syntax/expression=] `','` [=recursive descent syntax/expression=] `','` [=recursive descent syntax/expression=] `','` ? `')'`
</div>

<div class='syntax' noexport='true'>
  <dfn for='recursive descent syntax'>bitwise_expression.post.unary_expression</dfn>:

 | `'&'` [=recursive descent syntax/unary_expression=] ( `'&'` [=recursive descent syntax/unary_expression=] )*

 | `'^'` [=recursive descent syntax/unary_expression=] ( `'^'` [=recursive descent syntax/unary_expression=] )*

 | `'|'` [=recursive descent syntax/unary_expression=] ( `'|'` [=recursive descent syntax/unary_expression=] )*
</div>

<div class='syntax' noexport='true'>
  <dfn for='recursive descent syntax'>bool_literal</dfn>:

 | `'false'`

 | `'true'`
</div>

<div class='syntax' noexport='true'>
  <dfn for='recursive descent syntax'>builtin_value_name</dfn>:

 | `'frag_depth'`

 | `'front_facing'`

 | `'global_invocation_id'`

 | `'instance_index'`

 | `'local_invocation_id'`

 | `'local_invocation_index'`

 | `'num_workgroups'`

 | `'position'`

 | `'sample_index'`

 | `'sample_mask'`

 | `'vertex_index'`

 | `'workgroup_id'`
</div>

<div class='syntax' noexport='true'>
  <dfn for='recursive descent syntax'>callable</dfn>:

 | [=recursive descent syntax/ident=]

 | [=recursive descent syntax/mat_prefix=]

 | [=recursive descent syntax/type_specifier_without_ident=]

 | [=recursive descent syntax/vec_prefix=]

 | `'array'`
</div>

<div class='syntax' noexport='true'>
  <dfn for='recursive descent syntax'>case_selector</dfn>:

 | [=recursive descent syntax/expression=]

 | `'default'`
</div>

<div class='syntax' noexport='true'>
  <dfn for='recursive descent syntax'>component_or_swizzle_specifier</dfn>:

 | `'.'` [=recursive descent syntax/member_ident=] [=recursive descent syntax/component_or_swizzle_specifier=] ?

 | `'.'` [=recursive descent syntax/swizzle_name=] [=recursive descent syntax/component_or_swizzle_specifier=] ?

 | `'['` [=recursive descent syntax/expression=] `']'` [=recursive descent syntax/component_or_swizzle_specifier=] ?
</div>

<div class='syntax' noexport='true'>
  <dfn for='recursive descent syntax'>compound_assignment_operator</dfn>:

 | [=syntax_sym/shift_left_assign=]

 | [=syntax_sym/shift_right_assign=]

 | `'%='`

 | `'&='`

 | `'*='`

 | `'+='`

 | `'-='`

 | `'/='`

 | `'^='`

 | `'|='`
</div>

<div class='syntax' noexport='true'>
  <dfn for='recursive descent syntax'>compound_statement</dfn>:

 | `'{'` [=recursive descent syntax/statement=] * `'}'`
</div>

<div class='syntax' noexport='true'>
  <dfn for='recursive descent syntax'>core_lhs_expression</dfn>:

 | [=recursive descent syntax/ident=]

 | `'('` [=recursive descent syntax/lhs_expression=] `')'`
</div>

<div class='syntax' noexport='true'>
  <dfn for='recursive descent syntax'>decimal_float_literal</dfn>:

 | `/0[fh]/`

 | `/[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/`

 | `/[0-9]+[eE][+-]?[0-9]+[fh]?/`

 | `/[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/`

 | `/[1-9][0-9]*[fh]/`
</div>

<div class='syntax' noexport='true'>
  <dfn for='recursive descent syntax'>decimal_int_literal</dfn>:

 | `/0[iu]?/`

 | `/[1-9][0-9]*[iu]?/`
</div>

<div class='syntax' noexport='true'>
  <dfn for='recursive descent syntax'>depth_texture_type</dfn>:

 | `'texture_depth_2d'`

 | `'texture_depth_2d_array'`

 | `'texture_depth_cube'`

 | `'texture_depth_cube_array'`

 | `'texture_depth_multisampled_2d'`
</div>

<div class='syntax' noexport='true'>
  <dfn for='recursive descent syntax'>element_count_expression</dfn>:

 | [=recursive descent syntax/unary_expression=] ( [=recursive descent syntax/multiplicative_operator=] [=recursive descent syntax/unary_expression=] )* ( [=recursive descent syntax/additive_operator=] [=recursive descent syntax/unary_expression=] ( [=recursive descent syntax/multiplicative_operator=] [=recursive descent syntax/unary_expression=] )* )*

 | [=recursive descent syntax/unary_expression=] [=recursive descent syntax/bitwise_expression.post.unary_expression=]
</div>

<div class='syntax' noexport='true'>
  <dfn for='recursive descent syntax'>expression</dfn>:

 | [=recursive descent syntax/unary_expression=] [=recursive descent syntax/bitwise_expression.post.unary_expression=]

 | [=recursive descent syntax/unary_expression=] [=recursive descent syntax/relational_expression.post.unary_expression=]

 | [=recursive descent syntax/unary_expression=] [=recursive descent syntax/relational_expression.post.unary_expression=] `'&&'` [=recursive descent syntax/unary_expression=] [=recursive descent syntax/relational_expression.post.unary_expression=] ( `'&&'` [=recursive descent syntax/unary_expression=] [=recursive descent syntax/relational_expression.post.unary_expression=] )*

 | [=recursive descent syntax/unary_expression=] [=recursive descent syntax/relational_expression.post.unary_expression=] `'||'` [=recursive descent syntax/unary_expression=] [=recursive descent syntax/relational_expression.post.unary_expression=] ( `'||'` [=recursive descent syntax/unary_expression=] [=recursive descent syntax/relational_expression.post.unary_expression=] )*
</div>

<div class='syntax' noexport='true'>
  <dfn for='recursive descent syntax'>float_literal</dfn>:

 | [=recursive descent syntax/decimal_float_literal=]

 | [=recursive descent syntax/hex_float_literal=]
</div>

<div class='syntax' noexport='true'>
  <dfn for='recursive descent syntax'>for_init</dfn>:

 | [=recursive descent syntax/callable=] [=recursive descent syntax/argument_expression_list=]

 | [=recursive descent syntax/variable_statement=]

 | [=recursive descent syntax/variable_updating_statement=]
</div>

<div class='syntax' noexport='true'>
  <dfn for='recursive descent syntax'>for_update</dfn>:

 | [=recursive descent syntax/callable=] [=recursive descent syntax/argument_expression_list=]

 | [=recursive descent syntax/variable_updating_statement=]
</div>

<div class='syntax' noexport='true'>
  <dfn for='recursive descent syntax'>global_decl</dfn>:

 | [=recursive descent syntax/attribute=] * `'fn'` [=recursive descent syntax/ident=] `'('` ( [=recursive descent syntax/attribute=] * [=recursive descent syntax/ident=] `':'` [=recursive descent syntax/type_specifier=] ( `','` [=recursive descent syntax/param=] )* `','` ? )? `')'` ( `'->'` [=recursive descent syntax/attribute=] * [=recursive descent syntax/type_specifier=] )? `'{'` [=recursive descent syntax/statement=] * `'}'`

 | [=recursive descent syntax/attribute=] * `'override'` [=recursive descent syntax/optionally_typed_ident=] ( `'='` [=recursive descent syntax/expression=] )? `';'`

 | [=recursive descent syntax/attribute=] * `'var'` ( [=syntax_sym/_template_args_start=] [=recursive descent syntax/address_space=] ( `','` [=recursive descent syntax/access_mode=] )? [=syntax_sym/_template_args_end=] )? [=recursive descent syntax/optionally_typed_ident=] ( `'='` [=recursive descent syntax/expression=] )? `';'`

 | `';'`

 | `'alias'` [=recursive descent syntax/ident=] `'='` [=recursive descent syntax/type_specifier=] `';'`

 | `'const'` [=recursive descent syntax/optionally_typed_ident=] `'='` [=recursive descent syntax/expression=] `';'`

 | `'const_assert'` [=recursive descent syntax/expression=] `';'`

 | `'struct'` [=recursive descent syntax/ident=] `'{'` [=recursive descent syntax/attribute=] * [=recursive descent syntax/member_ident=] `':'` [=recursive descent syntax/type_specifier=] ( `','` [=recursive descent syntax/attribute=] * [=recursive descent syntax/member_ident=] `':'` [=recursive descent syntax/type_specifier=] )* `','` ? `'}'`
</div>

<div class='syntax' noexport='true'>
  <dfn for='recursive descent syntax'>hex_float_literal</dfn>:

 | `/0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/`

 | `/0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/`

 | `/0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/`
</div>

<div class='syntax' noexport='true'>
  <dfn for='recursive descent syntax'>ident</dfn>:
[=syntax/ident_pattern_token=]
</div>

<div class='syntax' noexport='true'>
  <dfn for='recursive descent syntax'>int_literal</dfn>:

 | [=recursive descent syntax/decimal_int_literal=]

 | [=syntax/hex_int_literal=]
</div>

<div class='syntax' noexport='true'>
  <dfn for='recursive descent syntax'>interpolation_sample_name</dfn>:

 | `'center'`

 | `'centroid'`

 | `'sample'`
</div>

<div class='syntax' noexport='true'>
  <dfn for='recursive descent syntax'>interpolation_type_name</dfn>:

 | `'flat'`

 | `'linear'`

 | `'perspective'`
</div>

<div class='syntax' noexport='true'>
  <dfn for='recursive descent syntax'>lhs_expression</dfn>:

 | [=recursive descent syntax/core_lhs_expression=] [=recursive descent syntax/component_or_swizzle_specifier=] ?

 | `'&'` [=recursive descent syntax/lhs_expression=]

 | `'*'` [=recursive descent syntax/lhs_expression=]
</div>

<div class='syntax' noexport='true'>
  <dfn for='recursive descent syntax'>literal</dfn>:

 | [=recursive descent syntax/bool_literal=]

 | [=recursive descent syntax/float_literal=]

 | [=recursive descent syntax/int_literal=]
</div>

<div class='syntax' noexport='true'>
  <dfn for='recursive descent syntax'>mat_prefix</dfn>:

 | `'mat2x2'`

 | `'mat2x3'`

 | `'mat2x4'`

 | `'mat3x2'`

 | `'mat3x3'`

 | `'mat3x4'`

 | `'mat4x2'`

 | `'mat4x3'`

 | `'mat4x4'`
</div>

<div class='syntax' noexport='true'>
  <dfn for='recursive descent syntax'>member_ident</dfn>:
[=syntax/ident_pattern_token=]
</div>

<div class='syntax' noexport='true'>
  <dfn for='recursive descent syntax'>multiplicative_operator</dfn>:

 | `'%'`

 | `'*'`

 | `'/'`
</div>

<div class='syntax' noexport='true'>
  <dfn for='recursive descent syntax'>optionally_typed_ident</dfn>:

 | [=recursive descent syntax/ident=] ( `':'` [=recursive descent syntax/type_specifier=] )?
</div>

<div class='syntax' noexport='true'>
  <dfn for='recursive descent syntax'>param</dfn>:

 | [=recursive descent syntax/attribute=] * [=recursive descent syntax/ident=] `':'` [=recursive descent syntax/type_specifier=]
</div>

<div class='syntax' noexport='true'>
  <dfn for='recursive descent syntax'>primary_expression</dfn>:

 | [=recursive descent syntax/callable=] `'('` ( [=recursive descent syntax/expression=] ( `','` [=recursive descent syntax/expression=] )* `','` ? )? `')'`

 | [=recursive descent syntax/ident=]

 | [=recursive descent syntax/literal=]

 | `'('` [=recursive descent syntax/expression=] `')'`

 | `'bitcast'` [=syntax_sym/_template_args_start=] [=recursive descent syntax/type_specifier=] [=syntax_sym/_template_args_end=] `'('` [=recursive descent syntax/expression=] `')'`
</div>

<div class='syntax' noexport='true'>
  <dfn for='recursive descent syntax'>relational_expression.post.unary_expression</dfn>:

 | [=recursive descent syntax/shift_expression.post.unary_expression=]

 | [=recursive descent syntax/shift_expression.post.unary_expression=] [=syntax_sym/greater_than=] [=recursive descent syntax/unary_expression=] [=recursive descent syntax/shift_expression.post.unary_expression=]

 | [=recursive descent syntax/shift_expression.post.unary_expression=] [=syntax_sym/greater_than_equal=] [=recursive descent syntax/unary_expression=] [=recursive descent syntax/shift_expression.post.unary_expression=]

 | [=recursive descent syntax/shift_expression.post.unary_expression=] [=syntax_sym/less_than=] [=recursive descent syntax/unary_expression=] [=recursive descent syntax/shift_expression.post.unary_expression=]

 | [=recursive descent syntax/shift_expression.post.unary_expression=] [=syntax_sym/less_than_equal=] [=recursive descent syntax/unary_expression=] [=recursive descent syntax/shift_expression.post.unary_expression=]

 | [=recursive descent syntax/shift_expression.post.unary_expression=] `'!='` [=recursive descent syntax/unary_expression=] [=recursive descent syntax/shift_expression.post.unary_expression=]

 | [=recursive descent syntax/shift_expression.post.unary_expression=] `'=='` [=recursive descent syntax/unary_expression=] [=recursive descent syntax/shift_expression.post.unary_expression=]
</div>

<div class='syntax' noexport='true'>
  <dfn for='recursive descent syntax'>sampled_texture_type</dfn>:

 | `'texture_1d'`

 | `'texture_2d'`

 | `'texture_2d_array'`

 | `'texture_3d'`

 | `'texture_cube'`

 | `'texture_cube_array'`
</div>

<div class='syntax' noexport='true'>
  <dfn for='recursive descent syntax'>sampler_type</dfn>:

 | `'sampler'`

 | `'sampler_comparison'`
</div>

<div class='syntax' noexport='true'>
  <dfn for='recursive descent syntax'>shift_expression.post.unary_expression</dfn>:

 | ( [=recursive descent syntax/multiplicative_operator=] [=recursive descent syntax/unary_expression=] )* ( [=recursive descent syntax/additive_operator=] [=recursive descent syntax/unary_expression=] ( [=recursive descent syntax/multiplicative_operator=] [=recursive descent syntax/unary_expression=] )* )*

 | [=syntax_sym/shift_left=] [=recursive descent syntax/unary_expression=]

 | [=syntax_sym/shift_right=] [=recursive descent syntax/unary_expression=]
</div>

<div class='syntax' noexport='true'>
  <dfn for='recursive descent syntax'>statement</dfn>:

 | [=recursive descent syntax/callable=] `'('` ( [=recursive descent syntax/expression=] ( `','` [=recursive descent syntax/expression=] )* `','` ? )? `')'` `';'`

 | [=recursive descent syntax/compound_statement=]

 | [=recursive descent syntax/variable_statement=] `';'`

 | [=recursive descent syntax/variable_updating_statement=] `';'`

 | [=syntax/break_statement=] `';'`

 | [=syntax/continue_statement=] `';'`

 | `';'`

 | `'const_assert'` [=recursive descent syntax/expression=] `';'`

 | `'discard'` `';'`

 | `'for'` `'('` [=recursive descent syntax/for_init=] ? `';'` [=recursive descent syntax/expression=] ? `';'` [=recursive descent syntax/for_update=] ? `')'` [=recursive descent syntax/compound_statement=]

 | `'if'` [=recursive descent syntax/expression=] [=recursive descent syntax/compound_statement=] ( `'else'` `'if'` [=recursive descent syntax/expression=] [=recursive descent syntax/compound_statement=] )* ( `'else'` [=recursive descent syntax/compound_statement=] )?

 | `'loop'` `'{'` [=recursive descent syntax/statement=] * ( `'continuing'` `'{'` [=recursive descent syntax/statement=] * ( `'break'` `'if'` [=recursive descent syntax/expression=] `';'` )? `'}'` )? `'}'`

 | `'return'` [=recursive descent syntax/expression=] ? `';'`

 | `'switch'` [=recursive descent syntax/expression=] `'{'` [=recursive descent syntax/switch_body=] * `'}'`

 | `'while'` [=recursive descent syntax/expression=] [=recursive descent syntax/compound_statement=]
</div>

<div class='syntax' noexport='true'>
  <dfn for='recursive descent syntax'>storage_texture_type</dfn>:

 | `'texture_storage_1d'`

 | `'texture_storage_2d'`

 | `'texture_storage_2d_array'`

 | `'texture_storage_3d'`
</div>

<div class='syntax' noexport='true'>
  <dfn for='recursive descent syntax'>switch_body</dfn>:

 | `'case'` [=recursive descent syntax/case_selector=] ( `','` [=recursive descent syntax/case_selector=] )* `','` ? `':'` ? [=recursive descent syntax/compound_statement=]

 | `'default'` `':'` ? [=recursive descent syntax/compound_statement=]
</div>

<div class='syntax' noexport='true'>
  <dfn for='recursive descent syntax'>swizzle_name</dfn>:

 | `'/[rgba]/'`

 | `'/[rgba][rgba]/'`

 | `'/[rgba][rgba][rgba]/'`

 | `'/[rgba][rgba][rgba][rgba]/'`

 | `'/[xyzw]/'`

 | `'/[xyzw][xyzw]/'`

 | `'/[xyzw][xyzw][xyzw]/'`

 | `'/[xyzw][xyzw][xyzw][xyzw]/'`
</div>

<div class='syntax' noexport='true'>
  <dfn for='recursive descent syntax'>texel_format</dfn>:

 | `'bgra8unorm'`

 | `'r32float'`

 | `'r32sint'`

 | `'r32uint'`

 | `'rg32float'`

 | `'rg32sint'`

 | `'rg32uint'`

 | `'rgba16float'`

 | `'rgba16sint'`

 | `'rgba16uint'`

 | `'rgba32float'`

 | `'rgba32sint'`

 | `'rgba32uint'`

 | `'rgba8sint'`

 | `'rgba8snorm'`

 | `'rgba8uint'`

 | `'rgba8unorm'`
</div>

<div class='syntax' noexport='true'>
  <dfn for='recursive descent syntax'>texture_and_sampler_types</dfn>:

 | [=recursive descent syntax/depth_texture_type=]

 | [=recursive descent syntax/sampled_texture_type=] [=syntax_sym/_template_args_start=] [=recursive descent syntax/type_specifier=] [=syntax_sym/_template_args_end=]

 | [=recursive descent syntax/sampler_type=]

 | [=recursive descent syntax/storage_texture_type=] [=syntax_sym/_template_args_start=] [=recursive descent syntax/texel_format=] `','` [=recursive descent syntax/access_mode=] [=syntax_sym/_template_args_end=]

 | [=syntax/multisampled_texture_type=] [=syntax_sym/_template_args_start=] [=recursive descent syntax/type_specifier=] [=syntax_sym/_template_args_end=]
</div>

<div class='syntax' noexport='true'>
  <dfn for='recursive descent syntax'>translation_unit</dfn>:

 | ( `'enable'` [=syntax/extension_name=] `';'` )* [=recursive descent syntax/global_decl=] *
</div>

<div class='syntax' noexport='true'>
  <dfn for='recursive descent syntax'>type_specifier</dfn>:

 | [=recursive descent syntax/ident=]

 | [=recursive descent syntax/type_specifier_without_ident=]
</div>

<div class='syntax' noexport='true'>
  <dfn for='recursive descent syntax'>type_specifier_without_ident</dfn>:

 | [=recursive descent syntax/mat_prefix=] [=syntax_sym/_template_args_start=] [=recursive descent syntax/type_specifier=] [=syntax_sym/_template_args_end=]

 | [=recursive descent syntax/texture_and_sampler_types=]

 | [=recursive descent syntax/vec_prefix=] [=syntax_sym/_template_args_start=] [=recursive descent syntax/type_specifier=] [=syntax_sym/_template_args_end=]

 | `'array'` [=syntax_sym/_template_args_start=] [=recursive descent syntax/type_specifier=] ( `','` [=recursive descent syntax/element_count_expression=] )? [=syntax_sym/_template_args_end=]

 | `'atomic'` [=syntax_sym/_template_args_start=] [=recursive descent syntax/type_specifier=] [=syntax_sym/_template_args_end=]

 | `'bool'`

 | `'f16'`

 | `'f32'`

 | `'i32'`

 | `'ptr'` [=syntax_sym/_template_args_start=] [=recursive descent syntax/address_space=] `','` [=recursive descent syntax/type_specifier=] ( `','` [=recursive descent syntax/access_mode=] )? [=syntax_sym/_template_args_end=]

 | `'u32'`
</div>

<div class='syntax' noexport='true'>
  <dfn for='recursive descent syntax'>unary_expression</dfn>:

 | [=recursive descent syntax/primary_expression=] [=recursive descent syntax/component_or_swizzle_specifier=] ?

 | `'!'` [=recursive descent syntax/unary_expression=]

 | `'&'` [=recursive descent syntax/unary_expression=]

 | `'*'` [=recursive descent syntax/unary_expression=]

 | `'-'` [=recursive descent syntax/unary_expression=]

 | `'~'` [=recursive descent syntax/unary_expression=]
</div>

<div class='syntax' noexport='true'>
  <dfn for='recursive descent syntax'>variable_decl</dfn>:

 | `'var'` ( [=syntax_sym/_template_args_start=] [=recursive descent syntax/address_space=] ( `','` [=recursive descent syntax/access_mode=] )? [=syntax_sym/_template_args_end=] )? [=recursive descent syntax/optionally_typed_ident=]
</div>

<div class='syntax' noexport='true'>
  <dfn for='recursive descent syntax'>variable_statement</dfn>:

 | [=recursive descent syntax/variable_decl=]

 | [=recursive descent syntax/variable_decl=] `'='` [=recursive descent syntax/expression=]

 | `'const'` [=recursive descent syntax/optionally_typed_ident=] `'='` [=recursive descent syntax/expression=]

 | `'let'` [=recursive descent syntax/optionally_typed_ident=] `'='` [=recursive descent syntax/expression=]
</div>

<div class='syntax' noexport='true'>
  <dfn for='recursive descent syntax'>variable_updating_statement</dfn>:

 | [=recursive descent syntax/lhs_expression=] ( `'='` | [=recursive descent syntax/compound_assignment_operator=] ) [=recursive descent syntax/expression=]

 | [=recursive descent syntax/lhs_expression=] `'++'`

 | [=recursive descent syntax/lhs_expression=] `'--'`

 | `'_'` `'='` [=recursive descent syntax/expression=]
</div>

<div class='syntax' noexport='true'>
  <dfn for='recursive descent syntax'>vec_prefix</dfn>:

 | `'vec2'`

 | `'vec3'`

 | `'vec4'`
</div>

// This file is not directly compatible with existing BNF parsers. Instead, it
// uses a dialect for a concise reading experience, such as pattern literals
// for tokens and generalizing RegEx operations that reduce the need for empty
// alternatives. For details on interpreting this dialect, see 1.2. Syntax
// Notation in WebGPU Shading Language (WGSL) Specification.

translation_unit :
  global_directive * global_decl *
;

global_directive :
  diagnostic_directive
| enable_directive
| requires_directive
;

global_decl :
  ';'
| global_variable_decl ';'
| global_value_decl ';'
| type_alias_decl ';'
| struct_decl
| function_decl
| const_assert_statement ';'
;

bool_literal :
  'true'
| 'false'
;

int_literal :
  decimal_int_literal
| hex_int_literal
;

decimal_int_literal :
  /0[iu]?/
| /[1-9][0-9]*[iu]?/
;

hex_int_literal :
  /0[xX][0-9a-fA-F]+[iu]?/
;

float_literal :
  decimal_float_literal
| hex_float_literal
;

decimal_float_literal :
  /0[fh]/
| /[1-9][0-9]*[fh]/
| /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/
| /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/
| /[0-9]+[eE][+-]?[0-9]+[fh]?/
;

hex_float_literal :
  /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/
| /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/
| /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/
;

diagnostic_directive :
  'diagnostic' diagnostic_control ';'
;

literal :
  int_literal
| float_literal
| bool_literal
;

ident :
  ident_pattern_token _disambiguate_template
;

member_ident :
  ident_pattern_token
;

diagnostic_name_token :
  ident_pattern_token
;

diagnostic_rule_name :
  diagnostic_name_token
| diagnostic_name_token '.' diagnostic_name_token
;

template_list :
  _template_args_start template_arg_comma_list _template_args_end
;

template_arg_comma_list :
  template_arg_expression ( ',' template_arg_expression ) * ',' ?
;

template_arg_expression :
  expression
;

align_attr :
  '@' 'align' '(' expression ',' ? ')'
;

binding_attr :
  '@' 'binding' '(' expression ',' ? ')'
;

blend_src_attr :
  '@' 'blend_src' '(' expression ',' ? ')'
;

builtin_attr :
  '@' 'builtin' '(' builtin_value_name ',' ? ')'
;

builtin_value_name :
  ident_pattern_token
;

const_attr :
  '@' 'const'
;

diagnostic_attr :
  '@' 'diagnostic' diagnostic_control
;

group_attr :
  '@' 'group' '(' expression ',' ? ')'
;

id_attr :
  '@' 'id' '(' expression ',' ? ')'
;

interpolate_attr :
  '@' 'interpolate' '(' interpolate_type_name ',' ? ')'
| '@' 'interpolate' '(' interpolate_type_name ',' interpolate_sampling_name ',' ? ')'
;

interpolate_type_name :
  ident_pattern_token
;

interpolate_sampling_name :
  ident_pattern_token
;

invariant_attr :
  '@' 'invariant'
;

location_attr :
  '@' 'location' '(' expression ',' ? ')'
;

must_use_attr :
  '@' 'must_use'
;

size_attr :
  '@' 'size' '(' expression ',' ? ')'
;

workgroup_size_attr :
  '@' 'workgroup_size' '(' expression ',' ? ')'
| '@' 'workgroup_size' '(' expression ',' expression ',' ? ')'
| '@' 'workgroup_size' '(' expression ',' expression ',' expression ',' ? ')'
;

vertex_attr :
  '@' 'vertex'
;

fragment_attr :
  '@' 'fragment'
;

compute_attr :
  '@' 'compute'
;

attribute :
  '@' ident_pattern_token argument_expression_list ?
| align_attr
| binding_attr
| blend_src_attr
| builtin_attr
| const_attr
| diagnostic_attr
| group_attr
| id_attr
| interpolate_attr
| invariant_attr
| location_attr
| must_use_attr
| size_attr
| workgroup_size_attr
| vertex_attr
| fragment_attr
| compute_attr
;

diagnostic_control :
  '(' severity_control_name ',' diagnostic_rule_name ',' ? ')'
;

struct_decl :
  'struct' ident struct_body_decl
;

struct_body_decl :
  '{' struct_member ( ',' struct_member ) * ',' ? '}'
;

struct_member :
  attribute * member_ident ':' type_specifier
;

type_alias_decl :
  'alias' ident '=' type_specifier
;

type_specifier :
  template_elaborated_ident
;

template_elaborated_ident :
  ident _disambiguate_template template_list ?
;

variable_or_value_statement :
  variable_decl
| variable_decl '=' expression
| 'let' optionally_typed_ident '=' expression
| 'const' optionally_typed_ident '=' expression
;

variable_decl :
  'var' _disambiguate_template template_list ? optionally_typed_ident
;

optionally_typed_ident :
  ident ( ':' type_specifier ) ?
;

global_variable_decl :
  attribute * variable_decl ( '=' expression ) ?
;

global_value_decl :
  'const' optionally_typed_ident '=' expression
| attribute * 'override' optionally_typed_ident ( '=' expression ) ?
;

primary_expression :
  template_elaborated_ident
| call_expression
| literal
| paren_expression
;

call_expression :
  call_phrase
;

call_phrase :
  template_elaborated_ident argument_expression_list
;

paren_expression :
  '(' expression ')'
;

argument_expression_list :
  '(' expression_comma_list ? ')'
;

expression_comma_list :
  expression ( ',' expression ) * ',' ?
;

component_or_swizzle_specifier :
  '[' expression ']' component_or_swizzle_specifier ?
| '.' member_ident component_or_swizzle_specifier ?
| '.' swizzle_name component_or_swizzle_specifier ?
;

unary_expression :
  singular_expression
| '-' unary_expression
| '!' unary_expression
| '~' unary_expression
| '*' unary_expression
| '&' unary_expression
;

singular_expression :
  primary_expression component_or_swizzle_specifier ?
;

lhs_expression :
  core_lhs_expression component_or_swizzle_specifier ?
| '*' lhs_expression
| '&' lhs_expression
;

core_lhs_expression :
  ident _disambiguate_template
| '(' lhs_expression ')'
;

multiplicative_expression :
  unary_expression
| multiplicative_expression multiplicative_operator unary_expression
;

multiplicative_operator :
  '*'
| '/'
| '%'
;

additive_expression :
  multiplicative_expression
| additive_expression additive_operator multiplicative_expression
;

additive_operator :
  '+'
| '-'
;

shift_expression :
  additive_expression
| unary_expression _shift_left unary_expression
| unary_expression _shift_right unary_expression
;

relational_expression :
  shift_expression
| shift_expression _less_than shift_expression
| shift_expression _greater_than shift_expression
| shift_expression _less_than_equal shift_expression
| shift_expression _greater_than_equal shift_expression
| shift_expression '==' shift_expression
| shift_expression '!=' shift_expression
;

short_circuit_and_expression :
  relational_expression
| short_circuit_and_expression '&&' relational_expression
;

short_circuit_or_expression :
  relational_expression
| short_circuit_or_expression '||' relational_expression
;

binary_or_expression :
  unary_expression
| binary_or_expression '|' unary_expression
;

binary_and_expression :
  unary_expression
| binary_and_expression '&' unary_expression
;

binary_xor_expression :
  unary_expression
| binary_xor_expression '^' unary_expression
;

bitwise_expression :
  binary_and_expression '&' unary_expression
| binary_or_expression '|' unary_expression
| binary_xor_expression '^' unary_expression
;

expression :
  relational_expression
| short_circuit_or_expression '||' relational_expression
| short_circuit_and_expression '&&' relational_expression
| bitwise_expression
;

compound_statement :
  attribute * '{' statement * '}'
;

assignment_statement :
  lhs_expression ( '=' | compound_assignment_operator ) expression
| '_' '=' expression
;

compound_assignment_operator :
  '+='
| '-='
| '*='
| '/='
| '%='
| '&='
| '|='
| '^='
| _shift_right_assign
| _shift_left_assign
;

increment_statement :
  lhs_expression '++'
;

decrement_statement :
  lhs_expression '--'
;

if_statement :
  attribute * if_clause else_if_clause * else_clause ?
;

if_clause :
  'if' expression compound_statement
;

else_if_clause :
  'else' 'if' expression compound_statement
;

else_clause :
  'else' compound_statement
;

switch_statement :
  attribute * 'switch' expression switch_body
;

switch_body :
  attribute * '{' switch_clause + '}'
;

switch_clause :
  case_clause
| default_alone_clause
;

case_clause :
  'case' case_selectors ':' ? compound_statement
;

default_alone_clause :
  'default' ':' ? compound_statement
;

case_selectors :
  case_selector ( ',' case_selector ) * ',' ?
;

case_selector :
  'default'
| expression
;

loop_statement :
  attribute * 'loop' attribute * '{' statement * continuing_statement ? '}'
;

for_statement :
  attribute * 'for' '(' for_header ')' compound_statement
;

for_header :
  for_init ? ';' expression ? ';' for_update ?
;

for_init :
  variable_or_value_statement
| variable_updating_statement
| func_call_statement
;

for_update :
  variable_updating_statement
| func_call_statement
;

while_statement :
  attribute * 'while' expression compound_statement
;

break_statement :
  'break'
;

break_if_statement :
  'break' 'if' expression ';'
;

continue_statement :
  'continue'
;

continuing_statement :
  'continuing' continuing_compound_statement
;

continuing_compound_statement :
  attribute * '{' statement * break_if_statement ? '}'
;

return_statement :
  'return' expression ?
;

func_call_statement :
  call_phrase
;

const_assert_statement :
  'const_assert' expression
;

statement :
  ';'
| return_statement ';'
| if_statement
| switch_statement
| loop_statement
| for_statement
| while_statement
| func_call_statement ';'
| variable_or_value_statement ';'
| break_statement ';'
| continue_statement ';'
| 'discard' ';'
| variable_updating_statement ';'
| compound_statement
| const_assert_statement ';'
;

variable_updating_statement :
  assignment_statement
| increment_statement
| decrement_statement
;

function_decl :
  attribute * function_header compound_statement
;

function_header :
  'fn' ident '(' param_list ? ')' ( '->' attribute * template_elaborated_ident ) ?
;

param_list :
  param ( ',' param ) * ',' ?
;

param :
  attribute * ident ':' type_specifier
;

enable_directive :
  'enable' enable_extension_list ';'
;

enable_extension_list :
  enable_extension_name ( ',' enable_extension_name ) * ',' ?
;

requires_directive :
  'requires' software_extension_list ';'
;

software_extension_list :
  software_extension_name ( ',' software_extension_name ) * ',' ?
;

enable_extension_name :
  ident_pattern_token
;

software_extension_name :
  ident_pattern_token
;

ident_pattern_token :
  /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/u
;

severity_control_name :
  ident_pattern_token
;

swizzle_name :
  /[rgba]/
| /[rgba][rgba]/
| /[rgba][rgba][rgba]/
| /[rgba][rgba][rgba][rgba]/
| /[xyzw]/
| /[xyzw][xyzw]/
| /[xyzw][xyzw][xyzw]/
| /[xyzw][xyzw][xyzw][xyzw]/
;

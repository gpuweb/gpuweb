4c892d052 spec/index.bs        (Brandon Jones     2022-01-07 15:30:20 -0800 14340) 
78e3abd78 spec/index.bs        (Dzmitry Malyshau  2021-04-08 15:38:05 -0400 14341) # Detailed Operations # {#detailed-operations}
2f9a39ea3 spec/index.bs        (Corentin Wallez   2019-11-04 23:22:12 +0100 14342) 
78e3abd78 spec/index.bs        (Dzmitry Malyshau  2021-04-08 15:38:05 -0400 14343) This section describes the details of various GPU operations.
82346de2e spec/index.bs        (Dzmitry Malyshau  2020-03-12 21:26:44 -0400 14344) 
658413818 spec/index.bs        (Kai Ninomiya      2022-10-07 13:35:48 -0700 14345) Issue: This section is incomplete.
658413818 spec/index.bs        (Kai Ninomiya      2022-10-07 13:35:48 -0700 14346) 
78e3abd78 spec/index.bs        (Dzmitry Malyshau  2021-04-08 15:38:05 -0400 14347) ## Transfer ## {#transfer-operations}
26462a78a spec/index.bs        (Brandon Jones     2020-08-06 11:57:28 -0700 14348) 
b9d4153ab spec/index.bs        (Kai Ninomiya      2023-10-13 13:29:03 -0700 14349) <p class="note editorial"><span class=marker>Editorial note:</span> describe the transfers at the high level
26462a78a spec/index.bs        (Brandon Jones     2020-08-06 11:57:28 -0700 14350) 
78e3abd78 spec/index.bs        (Dzmitry Malyshau  2021-04-08 15:38:05 -0400 14351) ## Computing ## {#computing-operations}
7134349f8 spec/index.bs        (Dzmitry Malyshau  2020-05-07 12:45:59 -0400 14352) 
0e35195cb spec/index.bs        (Dzmitry Malyshau  2021-04-08 16:00:07 -0400 14353) Computing operations provide direct access to GPU's programmable hardware.
701ef4b84 spec/index.bs        (Brandon Jones     2022-12-08 16:16:17 -0800 14354) Compute shaders do not have shader stage inputs or outputs, their results are
0e35195cb spec/index.bs        (Dzmitry Malyshau  2021-04-08 16:00:07 -0400 14355) side effects from writing data into storage bindings bound as
0e35195cb spec/index.bs        (Dzmitry Malyshau  2021-04-08 16:00:07 -0400 14356) {{GPUBufferBindingType/"storage"|GPUBufferBindingType."storage"}} and {{GPUStorageTextureBindingLayout}}.
0e35195cb spec/index.bs        (Dzmitry Malyshau  2021-04-08 16:00:07 -0400 14357) These operations are encoded within {{GPUComputePassEncoder}} as:
02d3149a5 spec/index.bs        (Kai Ninomiya      2022-06-29 17:54:53 -0700 14358) 
02d3149a5 spec/index.bs        (Kai Ninomiya      2022-06-29 17:54:53 -0700 14359) - {{GPUComputePassEncoder/dispatchWorkgroups()}}
02d3149a5 spec/index.bs        (Kai Ninomiya      2022-06-29 17:54:53 -0700 14360) - {{GPUComputePassEncoder/dispatchWorkgroupsIndirect()}}
0e35195cb spec/index.bs        (Dzmitry Malyshau  2021-04-08 16:00:07 -0400 14361) 
b9d4153ab spec/index.bs        (Kai Ninomiya      2023-10-13 13:29:03 -0700 14362) <p class="note editorial"><span class=marker>Editorial note:</span> describe the computing algorithm
b681c2af5 spec/index.bs        (Brandon Jones     2020-09-14 17:40:58 -0700 14363) 
2a614beca spec/index.bs        (David Neto        2022-07-20 00:34:39 -0400 14364) The [=device=] may become [=lose the device|lost=] if
9d897a4bb spec/index.bs        (Kai Ninomiya      2023-01-18 14:53:48 -0800 14365) [=shader execution end|shader execution does not end=]
2a614beca spec/index.bs        (David Neto        2022-07-20 00:34:39 -0400 14366) in a reasonable amount of time, as determined by the user agent.
2a614beca spec/index.bs        (David Neto        2022-07-20 00:34:39 -0400 14367) 
78e3abd78 spec/index.bs        (Dzmitry Malyshau  2021-04-08 15:38:05 -0400 14368) ## Rendering ## {#rendering-operations}
c325725d5 spec/index.bs        (Dean Jackson      2019-04-08 11:11:25 -0700 14369) 
0e35195cb spec/index.bs        (Dzmitry Malyshau  2021-04-08 16:00:07 -0400 14370) Rendering is done by a set of GPU operations that are executed within {{GPURenderPassEncoder}},
78e3abd78 spec/index.bs        (Dzmitry Malyshau  2021-04-08 15:38:05 -0400 14371) and result in modifications of the texture data, viewed by the render pass attachments.
0e35195cb spec/index.bs        (Dzmitry Malyshau  2021-04-08 16:00:07 -0400 14372) These operations are encoded with:
02d3149a5 spec/index.bs        (Kai Ninomiya      2022-06-29 17:54:53 -0700 14373) 
02d3149a5 spec/index.bs        (Kai Ninomiya      2022-06-29 17:54:53 -0700 14374) - {{GPURenderCommandsMixin/draw()}}
02d3149a5 spec/index.bs        (Kai Ninomiya      2022-06-29 17:54:53 -0700 14375) - {{GPURenderCommandsMixin/drawIndexed()}},
02d3149a5 spec/index.bs        (Kai Ninomiya      2022-06-29 17:54:53 -0700 14376) - {{GPURenderCommandsMixin/drawIndirect()}}
02d3149a5 spec/index.bs        (Kai Ninomiya      2022-06-29 17:54:53 -0700 14377) - {{GPURenderCommandsMixin/drawIndexedIndirect()}}.
ecb1bf060 spec/index.bs        (Brandon Jones     2020-08-04 07:04:04 -0700 14378) 
78e3abd78 spec/index.bs        (Dzmitry Malyshau  2021-04-08 15:38:05 -0400 14379) Note: rendering is the traditional use of GPUs, and is supported by multiple fixed-function
78e3abd78 spec/index.bs        (Dzmitry Malyshau  2021-04-08 15:38:05 -0400 14380) blocks in hardware.
ecb1bf060 spec/index.bs        (Brandon Jones     2020-08-04 07:04:04 -0700 14381) 
78e3abd78 spec/index.bs        (Dzmitry Malyshau  2021-04-08 15:38:05 -0400 14382) The main rendering algorithm:
ecb1bf060 spec/index.bs        (Brandon Jones     2020-08-04 07:04:04 -0700 14383) 
1d11de7e1 spec/index.bs        (Brandon Jones     2024-05-07 09:48:51 -0700 14384) <div algorithm data-timeline=queue>
78e3abd78 spec/index.bs        (Dzmitry Malyshau  2021-04-08 15:38:05 -0400 14385)     <dfn abstract-op>render</dfn>(descriptor, drawCall, state)
02454410d spec/index.bs        (Hao Li            2020-03-31 17:05:00 +0800 14386) 
78e3abd78 spec/index.bs        (Dzmitry Malyshau  2021-04-08 15:38:05 -0400 14387)         **Arguments:**
02d3149a5 spec/index.bs        (Kai Ninomiya      2022-06-29 17:54:53 -0700 14388) 
02d3149a5 spec/index.bs        (Kai Ninomiya      2022-06-29 17:54:53 -0700 14389)         - |descriptor|: Description of the current {{GPURenderPipeline}}.
02d3149a5 spec/index.bs        (Kai Ninomiya      2022-06-29 17:54:53 -0700 14390)         - |drawCall|: The draw call parameters.
02d3149a5 spec/index.bs        (Kai Ninomiya      2022-06-29 17:54:53 -0700 14391)         - |state|: [=RenderState=] of the {{GPURenderCommandsMixin}} where the draw call is issued.
02454410d spec/index.bs        (Hao Li            2020-03-31 17:05:00 +0800 14392) 
78e3abd78 spec/index.bs        (Dzmitry Malyshau  2021-04-08 15:38:05 -0400 14393)         1. **Resolve indices**. See [[#index-resolution]].
02454410d spec/index.bs        (Hao Li            2020-03-31 17:05:00 +0800 14394) 
78e3abd78 spec/index.bs        (Dzmitry Malyshau  2021-04-08 15:38:05 -0400 14395)             Let |vertexList| be the result of [$resolve indices$](|drawCall|, |state|).
78e7c93e4 spec/index.bs        (Hao Li            2020-11-24 06:53:52 +0800 14396) 
78e3abd78 spec/index.bs        (Dzmitry Malyshau  2021-04-08 15:38:05 -0400 14397)         1. **Process vertices**. See [[#vertex-processing]].
78e7c93e4 spec/index.bs        (Hao Li            2020-11-24 06:53:52 +0800 14398) 
78e3abd78 spec/index.bs        (Dzmitry Malyshau  2021-04-08 15:38:05 -0400 14399)             Execute [$process vertices$](|vertexList|, |drawCall|, |descriptor|.{{GPURenderPipelineDescriptor/vertex}}, |state|).
78e7c93e4 spec/index.bs        (Hao Li            2020-11-24 06:53:52 +0800 14400) 
78e3abd78 spec/index.bs        (Dzmitry Malyshau  2021-04-08 15:38:05 -0400 14401)         1. **Assemble primitives**. See [[#primitive-assembly]].
02454410d spec/index.bs        (Hao Li            2020-03-31 17:05:00 +0800 14402) 
78e3abd78 spec/index.bs        (Dzmitry Malyshau  2021-04-08 15:38:05 -0400 14403)             Execute [$assemble primitives$](|vertexList|, |drawCall|, |descriptor|.{{GPURenderPipelineDescriptor/primitive}}).
78e7c93e4 spec/index.bs        (Hao Li            2020-11-24 06:53:52 +0800 14404) 
78e3abd78 spec/index.bs        (Dzmitry Malyshau  2021-04-08 15:38:05 -0400 14405)         1. **Clip primitives**. See [[#primitive-clipping]].
02454410d spec/index.bs        (Hao Li            2020-03-31 17:05:00 +0800 14406) 
8ea3aea0d spec/index.bs        (Dzmitry Malyshau  2021-12-01 09:17:32 -0500 14407)             Let |primitiveList| be the result of this stage.
8ea3aea0d spec/index.bs        (Dzmitry Malyshau  2021-12-01 09:17:32 -0500 14408) 
8ea3aea0d spec/index.bs        (Dzmitry Malyshau  2021-12-01 09:17:32 -0500 14409)         1. **Rasterize**. See [[#rasterization]].
8ea3aea0d spec/index.bs        (Dzmitry Malyshau  2021-12-01 09:17:32 -0500 14410) 
8ea3aea0d spec/index.bs        (Dzmitry Malyshau  2021-12-01 09:17:32 -0500 14411)             Let |rasterizationList| be the result of [$rasterize$](|primitiveList|, |state|).
8ea3aea0d spec/index.bs        (Dzmitry Malyshau  2021-12-01 09:17:32 -0500 14412) 
8ea3aea0d spec/index.bs        (Dzmitry Malyshau  2021-12-01 09:17:32 -0500 14413)         1. **Process fragments**. See [[#fragment-processing]].
8ea3aea0d spec/index.bs        (Dzmitry Malyshau  2021-12-01 09:17:32 -0500 14414) 
8ea3aea0d spec/index.bs        (Dzmitry Malyshau  2021-12-01 09:17:32 -0500 14415)             Gather a list of |fragments|, resulting from executing
8ea3aea0d spec/index.bs        (Dzmitry Malyshau  2021-12-01 09:17:32 -0500 14416)             [$process fragment$](|rasterPoint|, |descriptor|.{{GPURenderPipelineDescriptor/fragment}}, |state|)
8ea3aea0d spec/index.bs        (Dzmitry Malyshau  2021-12-01 09:17:32 -0500 14417)             for each |rasterPoint| in |rasterizationList|.
8ea3aea0d spec/index.bs        (Dzmitry Malyshau  2021-12-01 09:17:32 -0500 14418) 
8ea3aea0d spec/index.bs        (Dzmitry Malyshau  2021-12-01 09:17:32 -0500 14419)         1. **Process depth/stencil**.
8ea3aea0d spec/index.bs        (Dzmitry Malyshau  2021-12-01 09:17:32 -0500 14420) 
b9d4153ab spec/index.bs        (Kai Ninomiya      2023-10-13 13:29:03 -0700 14421)             <p class="note editorial"><span class=marker>Editorial note:</span> fill out the section, using |fragments|
8ea3aea0d spec/index.bs        (Dzmitry Malyshau  2021-12-01 09:17:32 -0500 14422) 
8ea3aea0d spec/index.bs        (Dzmitry Malyshau  2021-12-01 09:17:32 -0500 14423)         1. **Write pixels**.
d5e25c98e spec/index.bs        (Hao Li            2020-05-09 02:13:53 +0800 14424) 
b9d4153ab spec/index.bs        (Kai Ninomiya      2023-10-13 13:29:03 -0700 14425)             <p class="note editorial"><span class=marker>Editorial note:</span> fill out the section
78e3abd78 spec/index.bs        (Dzmitry Malyshau  2021-04-08 15:38:05 -0400 14426) </div>
c66dabc6d spec/index.bs        (Kai Ninomiya      2020-07-01 15:55:44 -0700 14427) 
78e3abd78 spec/index.bs        (Dzmitry Malyshau  2021-04-08 15:38:05 -0400 14428) ### Index Resolution ### {#index-resolution}
d5e25c98e spec/index.bs        (Hao Li            2020-05-09 02:13:53 +0800 14429) 
78e3abd78 spec/index.bs        (Dzmitry Malyshau  2021-04-08 15:38:05 -0400 14430) At the first stage of rendering, the pipeline builds
78e3abd78 spec/index.bs        (Dzmitry Malyshau  2021-04-08 15:38:05 -0400 14431) a list of vertices to process for each instance.
ecb1bf060 spec/index.bs        (Brandon Jones     2020-08-04 07:04:04 -0700 14432) 
1d11de7e1 spec/index.bs        (Brandon Jones     2024-05-07 09:48:51 -0700 14433) <div algorithm data-timeline=queue>
78e3abd78 spec/index.bs        (Dzmitry Malyshau  2021-04-08 15:38:05 -0400 14434)     <dfn abstract-op>resolve indices</dfn>(drawCall, state)
ecb1bf060 spec/index.bs        (Brandon Jones     2020-08-04 07:04:04 -0700 14435) 
6f2040f0e spec/index.bs        (Kai Ninomiya      2021-07-21 13:35:52 -0700 14436)     **Arguments:**
02d3149a5 spec/index.bs        (Kai Ninomiya      2022-06-29 17:54:53 -0700 14437) 
6f2040f0e spec/index.bs        (Kai Ninomiya      2021-07-21 13:35:52 -0700 14438)     - |drawCall|: The draw call parameters.
a185b503b spec/index.bs        (Brandon Jones     2023-01-04 10:38:13 -0800 14439)     - |state|: The snapshot of the {{GPURenderCommandsMixin}} state at the time of the draw call.
6f2040f0e spec/index.bs        (Kai Ninomiya      2021-07-21 13:35:52 -0700 14440) 
6f2040f0e spec/index.bs        (Kai Ninomiya      2021-07-21 13:35:52 -0700 14441)     **Returns:** list of integer indices.
6f2040f0e spec/index.bs        (Kai Ninomiya      2021-07-21 13:35:52 -0700 14442) 
6f2040f0e spec/index.bs        (Kai Ninomiya      2021-07-21 13:35:52 -0700 14443)     1. Let |vertexIndexList| be an empty list of indices.
6f2040f0e spec/index.bs        (Kai Ninomiya      2021-07-21 13:35:52 -0700 14444)     1. If |drawCall| is an indexed draw call:
6f2040f0e spec/index.bs        (Kai Ninomiya      2021-07-21 13:35:52 -0700 14445)         1. Initialize the |vertexIndexList| with |drawCall|.indexCount integers.
6f2040f0e spec/index.bs        (Kai Ninomiya      2021-07-21 13:35:52 -0700 14446)         1. For |i| in range 0 .. |drawCall|.indexCount (non-inclusive):
6f2040f0e spec/index.bs        (Kai Ninomiya      2021-07-21 13:35:52 -0700 14447)             1. Let |relativeVertexIndex| be [$fetch index$](|i| + |drawCall|.`firstIndex`,
a185b503b spec/index.bs        (Brandon Jones     2023-01-04 10:38:13 -0800 14448)                 |state|.{{GPURenderCommandsMixin/[[index_buffer]]}}).
6f2040f0e spec/index.bs        (Kai Ninomiya      2021-07-21 13:35:52 -0700 14449)             1. If |relativeVertexIndex| has the special value `"out of bounds"`,
6f2040f0e spec/index.bs        (Kai Ninomiya      2021-07-21 13:35:52 -0700 14450)                 stop and return the empty list.
6f2040f0e spec/index.bs        (Kai Ninomiya      2021-07-21 13:35:52 -0700 14451) 
6f2040f0e spec/index.bs        (Kai Ninomiya      2021-07-21 13:35:52 -0700 14452)                 Note: Implementations may choose to display a warning when this occurs,
6f2040f0e spec/index.bs        (Kai Ninomiya      2021-07-21 13:35:52 -0700 14453)                 especially when it is easy to detect (like in non-indirect indexed draw calls).
6f2040f0e spec/index.bs        (Kai Ninomiya      2021-07-21 13:35:52 -0700 14454)             1. Append |drawCall|.`baseVertex` + |relativeVertexIndex| to the |vertexIndexList|.
6f2040f0e spec/index.bs        (Kai Ninomiya      2021-07-21 13:35:52 -0700 14455)     1. Otherwise:
6f2040f0e spec/index.bs        (Kai Ninomiya      2021-07-21 13:35:52 -0700 14456)         1. Initialize the |vertexIndexList| with |drawCall|.vertexCount integers.
6f2040f0e spec/index.bs        (Kai Ninomiya      2021-07-21 13:35:52 -0700 14457)         1. Set each |vertexIndexList| item |i| to the value |drawCall|.firstVertex + |i|.
6f2040f0e spec/index.bs        (Kai Ninomiya      2021-07-21 13:35:52 -0700 14458)     1. Return |vertexIndexList|.
6f2040f0e spec/index.bs        (Kai Ninomiya      2021-07-21 13:35:52 -0700 14459) 
6f2040f0e spec/index.bs        (Kai Ninomiya      2021-07-21 13:35:52 -0700 14460)     Note: in case of indirect draw calls, the `indexCount`, `vertexCount`,
6f2040f0e spec/index.bs        (Kai Ninomiya      2021-07-21 13:35:52 -0700 14461)     and other properties of |drawCall| are read from the indirect buffer
6f2040f0e spec/index.bs        (Kai Ninomiya      2021-07-21 13:35:52 -0700 14462)     instead of the draw command itself.
6f2040f0e spec/index.bs        (Kai Ninomiya      2021-07-21 13:35:52 -0700 14463) 
b9d4153ab spec/index.bs        (Kai Ninomiya      2023-10-13 13:29:03 -0700 14464)     <p class="note editorial"><span class=marker>Editorial note:</span> specify indirect commands better.
78e3abd78 spec/index.bs        (Dzmitry Malyshau  2021-04-08 15:38:05 -0400 14465) </div>
ecb1bf060 spec/index.bs        (Brandon Jones     2020-08-04 07:04:04 -0700 14466) 
1d11de7e1 spec/index.bs        (Brandon Jones     2024-05-07 09:48:51 -0700 14467) <div algorithm data-timeline=queue>
78e3abd78 spec/index.bs        (Dzmitry Malyshau  2021-04-08 15:38:05 -0400 14468)     <dfn abstract-op>fetch index</dfn>(i, buffer, offset, format)
78e7c93e4 spec/index.bs        (Hao Li            2020-11-24 06:53:52 +0800 14469) 
6f2040f0e spec/index.bs        (Kai Ninomiya      2021-07-21 13:35:52 -0700 14470)     **Arguments:**
02d3149a5 spec/index.bs        (Kai Ninomiya      2022-06-29 17:54:53 -0700 14471) 
6f2040f0e spec/index.bs        (Kai Ninomiya      2021-07-21 13:35:52 -0700 14472)     - |i|: Index of a vertex index to fetch.
a185b503b spec/index.bs        (Brandon Jones     2023-01-04 10:38:13 -0800 14473)     - |state|: The snapshot of the {{GPURenderCommandsMixin}} state at the time of the draw call.
ecb1bf060 spec/index.bs        (Brandon Jones     2020-08-04 07:04:04 -0700 14474) 
6f2040f0e spec/index.bs        (Kai Ninomiya      2021-07-21 13:35:52 -0700 14475)     **Returns:** unsigned integer or `"out of bounds"`
6f2040f0e spec/index.bs        (Kai Ninomiya      2021-07-21 13:35:52 -0700 14476) 
a185b503b spec/index.bs        (Brandon Jones     2023-01-04 10:38:13 -0800 14477)     1. Let |indexSize| be defined by the |state|.{{GPURenderCommandsMixin/[[index_format]]}}:
02d3149a5 spec/index.bs        (Kai Ninomiya      2022-06-29 17:54:53 -0700 14478) 
02d3149a5 spec/index.bs        (Kai Ninomiya      2022-06-29 17:54:53 -0700 14479)         <dl class=switch>
78e3abd78 spec/index.bs        (Dzmitry Malyshau  2021-04-08 15:38:05 -0400 14480)             : {{GPUIndexFormat/"uint16"}}
78e3abd78 spec/index.bs        (Dzmitry Malyshau  2021-04-08 15:38:05 -0400 14481)             :: 2
78e3abd78 spec/index.bs        (Dzmitry Malyshau  2021-04-08 15:38:05 -0400 14482)             : {{GPUIndexFormat/"uint32"}}
78e3abd78 spec/index.bs        (Dzmitry Malyshau  2021-04-08 15:38:05 -0400 14483)             :: 4
78e3abd78 spec/index.bs        (Dzmitry Malyshau  2021-04-08 15:38:05 -0400 14484)         </dl>
a185b503b spec/index.bs        (Brandon Jones     2023-01-04 10:38:13 -0800 14485)     1. If |state|.{{GPURenderCommandsMixin/[[index_buffer_offset]]}} +
a185b503b spec/index.bs        (Brandon Jones     2023-01-04 10:38:13 -0800 14486)         |i + 1| &times; |indexSize| &gt; |state|.{{GPURenderCommandsMixin/[[index_buffer_size]]}},
6f2040f0e spec/index.bs        (Kai Ninomiya      2021-07-21 13:35:52 -0700 14487)         return the special value `"out of bounds"`.
a185b503b spec/index.bs        (Brandon Jones     2023-01-04 10:38:13 -0800 14488)     1. Interpret the data in |state|.{{GPURenderCommandsMixin/[[index_buffer]]}}, starting at offset
a185b503b spec/index.bs        (Brandon Jones     2023-01-04 10:38:13 -0800 14489)         |state|.{{GPURenderCommandsMixin/[[index_buffer_offset]]}} + |i| &times; |indexSize|,
6f2040f0e spec/index.bs        (Kai Ninomiya      2021-07-21 13:35:52 -0700 14490)         of size |indexSize| bytes, as an unsigned integer and return it.
78e3abd78 spec/index.bs        (Dzmitry Malyshau  2021-04-08 15:38:05 -0400 14491) </div>
ecb1bf060 spec/index.bs        (Brandon Jones     2020-08-04 07:04:04 -0700 14492) 
78e3abd78 spec/index.bs        (Dzmitry Malyshau  2021-04-08 15:38:05 -0400 14493) ### Vertex Processing ### {#vertex-processing}
ecb1bf060 spec/index.bs        (Brandon Jones     2020-08-04 07:04:04 -0700 14494) 
78e3abd78 spec/index.bs        (Dzmitry Malyshau  2021-04-08 15:38:05 -0400 14495) Vertex processing stage is a programmable stage of the render [=pipeline=] that
78e3abd78 spec/index.bs        (Dzmitry Malyshau  2021-04-08 15:38:05 -0400 14496) processes the vertex attribute data, and produces
36aeace52 spec/index.bs        (Yunchao He        2021-04-22 17:57:56 -0700 14497) clip space positions for [[#primitive-clipping]], as well as other data for the
36aeace52 spec/index.bs        (Yunchao He        2021-04-22 17:57:56 -0700 14498) [[#fragment-processing]].
ecb1bf060 spec/index.bs        (Brandon Jones     2020-08-04 07:04:04 -0700 14499) 
1d11de7e1 spec/index.bs        (Brandon Jones     2024-05-07 09:48:51 -0700 14500) <div algorithm data-timeline=queue>
78e3abd78 spec/index.bs        (Dzmitry Malyshau  2021-04-08 15:38:05 -0400 14501)     <dfn abstract-op>process vertices</dfn>(vertexIndexList, drawCall, desc, state)
78e3abd78 spec/index.bs        (Dzmitry Malyshau  2021-04-08 15:38:05 -0400 14502) 
6f2040f0e spec/index.bs        (Kai Ninomiya      2021-07-21 13:35:52 -0700 14503)     **Arguments:**
02d3149a5 spec/index.bs        (Kai Ninomiya      2022-06-29 17:54:53 -0700 14504) 
6f2040f0e spec/index.bs        (Kai Ninomiya      2021-07-21 13:35:52 -0700 14505)     - |vertexIndexList|: List of vertex indices to process (mutable, passed by reference).
6f2040f0e spec/index.bs        (Kai Ninomiya      2021-07-21 13:35:52 -0700 14506)     - |drawCall|: The draw call parameters.
6f2040f0e spec/index.bs        (Kai Ninomiya      2021-07-21 13:35:52 -0700 14507)     - |desc|: The descriptor of type {{GPUVertexState}}.
a185b503b spec/index.bs        (Brandon Jones     2023-01-04 10:38:13 -0800 14508)     - |state|: The snapshot of the {{GPURenderCommandsMixin}} state at the time of the draw call.
6f2040f0e spec/index.bs        (Kai Ninomiya      2021-07-21 13:35:52 -0700 14509) 
6f2040f0e spec/index.bs        (Kai Ninomiya      2021-07-21 13:35:52 -0700 14510)     Each vertex |vertexIndex| in the |vertexIndexList|,
6f2040f0e spec/index.bs        (Kai Ninomiya      2021-07-21 13:35:52 -0700 14511)     in each instance of index |rawInstanceIndex|, is processed independently.
6f2040f0e spec/index.bs        (Kai Ninomiya      2021-07-21 13:35:52 -0700 14512)     The |rawInstanceIndex| is in range from 0 to |drawCall|.instanceCount - 1, inclusive.
6f2040f0e spec/index.bs        (Kai Ninomiya      2021-07-21 13:35:52 -0700 14513)     This processing happens in parallel, and any side effects, such as
6f2040f0e spec/index.bs        (Kai Ninomiya      2021-07-21 13:35:52 -0700 14514)     writes into {{GPUBufferBindingType/"storage"|GPUBufferBindingType."storage"}} bindings,
6f2040f0e spec/index.bs        (Kai Ninomiya      2021-07-21 13:35:52 -0700 14515)     may happen in any order.
02d3149a5 spec/index.bs        (Kai Ninomiya      2022-06-29 17:54:53 -0700 14516) 
6f2040f0e spec/index.bs        (Kai Ninomiya      2021-07-21 13:35:52 -0700 14517)     1. Let |instanceIndex| be |rawInstanceIndex| + |drawCall|.firstInstance.
6f2040f0e spec/index.bs        (Kai Ninomiya      2021-07-21 13:35:52 -0700 14518)     1. For each non-`null` |vertexBufferLayout| in the list of |desc|.{{GPUVertexState/buffers}}:
6f2040f0e spec/index.bs        (Kai Ninomiya      2021-07-21 13:35:52 -0700 14519)         1. Let |i| be the index of the buffer layout in this list.
6f2040f0e spec/index.bs        (Kai Ninomiya      2021-07-21 13:35:52 -0700 14520)         1. Let |vertexBuffer|, |vertexBufferOffset|, and |vertexBufferBindingSize| be the
a185b503b spec/index.bs        (Brandon Jones     2023-01-04 10:38:13 -0800 14521)             buffer, offset, and size at slot |i| of |state|.{{GPURenderCommandsMixin/[[vertex_buffers]]}}.
6f2040f0e spec/index.bs        (Kai Ninomiya      2021-07-21 13:35:52 -0700 14522)         1. Let |vertexElementIndex| be dependent on |vertexBufferLayout|.{{GPUVertexBufferLayout/stepMode}}:
02d3149a5 spec/index.bs        (Kai Ninomiya      2022-06-29 17:54:53 -0700 14523) 
02d3149a5 spec/index.bs        (Kai Ninomiya      2022-06-29 17:54:53 -0700 14524)             <dl class=switch>
6f2040f0e spec/index.bs        (Kai Ninomiya      2021-07-21 13:35:52 -0700 14525)                 : {{GPUVertexStepMode/"vertex"}}
6f2040f0e spec/index.bs        (Kai Ninomiya      2021-07-21 13:35:52 -0700 14526)                 :: |vertexIndex|
6f2040f0e spec/index.bs        (Kai Ninomiya      2021-07-21 13:35:52 -0700 14527)                 : {{GPUVertexStepMode/"instance"}}
6f2040f0e spec/index.bs        (Kai Ninomiya      2021-07-21 13:35:52 -0700 14528)                 :: |instanceIndex|
6f2040f0e spec/index.bs        (Kai Ninomiya      2021-07-21 13:35:52 -0700 14529)             </dl>
6f2040f0e spec/index.bs        (Kai Ninomiya      2021-07-21 13:35:52 -0700 14530)         1. For each |attributeDesc| in |vertexBufferLayout|.{{GPUVertexBufferLayout/attributes}}:
6f2040f0e spec/index.bs        (Kai Ninomiya      2021-07-21 13:35:52 -0700 14531)             1. Let |attributeOffset| be |vertexBufferOffset| +
6f2040f0e spec/index.bs        (Kai Ninomiya      2021-07-21 13:35:52 -0700 14532)                 |vertexElementIndex| * |vertexBufferLayout|.{{GPUVertexBufferLayout/arrayStride}} +
6f2040f0e spec/index.bs        (Kai Ninomiya      2021-07-21 13:35:52 -0700 14533)                 |attributeDesc|.{{GPUVertexAttribute/offset}}.
6f2040f0e spec/index.bs        (Kai Ninomiya      2021-07-21 13:35:52 -0700 14534)             1. Load the attribute |data| of format |attributeDesc|.{{GPUVertexAttribute/format}}
6f2040f0e spec/index.bs        (Kai Ninomiya      2021-07-21 13:35:52 -0700 14535)                 from |vertexBuffer| starting at offset |attributeOffset|.
6f2040f0e spec/index.bs        (Kai Ninomiya      2021-07-21 13:35:52 -0700 14536)                 The components are loaded in the order `x`, `y`, `z`, `w` from buffer memory.
6f2040f0e spec/index.bs        (Kai Ninomiya      2021-07-21 13:35:52 -0700 14537) 
6f2040f0e spec/index.bs        (Kai Ninomiya      2021-07-21 13:35:52 -0700 14538)                 If this results in an out-of-bounds access, the resulting value is determined
6f2040f0e spec/index.bs        (Kai Ninomiya      2021-07-21 13:35:52 -0700 14539)                 according to WGSL's [=invalid memory reference=] behavior.
6f2040f0e spec/index.bs        (Kai Ninomiya      2021-07-21 13:35:52 -0700 14540)             1. **Optionally (implementation-defined):**
6f2040f0e spec/index.bs        (Kai Ninomiya      2021-07-21 13:35:52 -0700 14541)                 If |attributeOffset| + sizeof(|attributeDesc|.{{GPUVertexAttribute/format}}) &gt;
6f2040f0e spec/index.bs        (Kai Ninomiya      2021-07-21 13:35:52 -0700 14542)                 |vertexBufferOffset| + |vertexBufferBindingSize|,
6f2040f0e spec/index.bs        (Kai Ninomiya      2021-07-21 13:35:52 -0700 14543)                 [=list/empty=] |vertexIndexList| and stop, cancelling the draw call.
6f2040f0e spec/index.bs        (Kai Ninomiya      2021-07-21 13:35:52 -0700 14544) 
6f2040f0e spec/index.bs        (Kai Ninomiya      2021-07-21 13:35:52 -0700 14545)                 Note: This allows implementations to detect out-of-bounds values in the index buffer
6f2040f0e spec/index.bs        (Kai Ninomiya      2021-07-21 13:35:52 -0700 14546)                 before issuing a draw call, instead of using [=invalid memory reference=] behavior.
6f2040f0e spec/index.bs        (Kai Ninomiya      2021-07-21 13:35:52 -0700 14547)             1. Convert the |data| into a shader-visible format, according to [=channel formats=] rules.
02d3149a5 spec/index.bs        (Kai Ninomiya      2022-06-29 17:54:53 -0700 14548) 
02d3149a5 spec/index.bs        (Kai Ninomiya      2022-06-29 17:54:53 -0700 14549)                 <div class=example>
6f2040f0e spec/index.bs        (Kai Ninomiya      2021-07-21 13:35:52 -0700 14550)                     An attribute of type {{GPUVertexFormat/"snorm8x2"}} and byte values of `[0x70, 0xD0]`
8ea3aea0d spec/index.bs        (Dzmitry Malyshau  2021-12-01 09:17:32 -0500 14551)                     will be converted to `vec2<f32>(0.88, -0.38)` in WGSL.
6f2040f0e spec/index.bs        (Kai Ninomiya      2021-07-21 13:35:52 -0700 14552)                 </div>
6f2040f0e spec/index.bs        (Kai Ninomiya      2021-07-21 13:35:52 -0700 14553)             1. Adjust the |data| size to the shader type:
6f2040f0e spec/index.bs        (Kai Ninomiya      2021-07-21 13:35:52 -0700 14554)                 - if both are scalar, or both are vectors of the same dimensionality, no adjustment is needed.
6f2040f0e spec/index.bs        (Kai Ninomiya      2021-07-21 13:35:52 -0700 14555)                 - if |data| is vector but the shader type is scalar, then only the first component is extracted.
6f2040f0e spec/index.bs        (Kai Ninomiya      2021-07-21 13:35:52 -0700 14556)                 - if both are vectors, and |data| has a higher dimension, the extra components are dropped.
02d3149a5 spec/index.bs        (Kai Ninomiya      2022-06-29 17:54:53 -0700 14557) 
02d3149a5 spec/index.bs        (Kai Ninomiya      2022-06-29 17:54:53 -0700 14558)                     <div class=example>
6f2040f0e spec/index.bs        (Kai Ninomiya      2021-07-21 13:35:52 -0700 14559)                         An attribute of type {{GPUVertexFormat/"float32x3"}} and value `vec3<f32>(1.0, 2.0, 3.0)`
6f2040f0e spec/index.bs        (Kai Ninomiya      2021-07-21 13:35:52 -0700 14560)                         will exposed to the shader as `vec2<f32>(1.0, 2.0)` if a 2-component vector is expected.
78e3abd78 spec/index.bs        (Dzmitry Malyshau  2021-04-08 15:38:05 -0400 14561)                     </div>
6f2040f0e spec/index.bs        (Kai Ninomiya      2021-07-21 13:35:52 -0700 14562)                 - if the shader type is a vector of higher dimensionality, or the |data| is a scalar,
6f2040f0e spec/index.bs        (Kai Ninomiya      2021-07-21 13:35:52 -0700 14563)                     then the missing components are filled from `vec4<*>(0, 0, 0, 1)` value.
02d3149a5 spec/index.bs        (Kai Ninomiya      2022-06-29 17:54:53 -0700 14564) 
02d3149a5 spec/index.bs        (Kai Ninomiya      2022-06-29 17:54:53 -0700 14565)                     <div class=example>
6f2040f0e spec/index.bs        (Kai Ninomiya      2021-07-21 13:35:52 -0700 14566)                         An attribute of type {{GPUVertexFormat/"sint32"}} and value `5` will be exposed
6f2040f0e spec/index.bs        (Kai Ninomiya      2021-07-21 13:35:52 -0700 14567)                         to the shader as `vec4<i32>(5, 0, 0, 1)` if a 4-component vector is expected.
6f2040f0e spec/index.bs        (Kai Ninomiya      2021-07-21 13:35:52 -0700 14568)                     </div>
6f2040f0e spec/index.bs        (Kai Ninomiya      2021-07-21 13:35:52 -0700 14569)             1. Bind the |data| to vertex shader input
6f2040f0e spec/index.bs        (Kai Ninomiya      2021-07-21 13:35:52 -0700 14570)                 location |attributeDesc|.{{GPUVertexAttribute/shaderLocation}}.
a185b503b spec/index.bs        (Brandon Jones     2023-01-04 10:38:13 -0800 14571)     1. For each {{GPUBindGroup}} group at |index| in |state|.{{GPUBindingCommandsMixin/[[bind_groups]]}}:
6f2040f0e spec/index.bs        (Kai Ninomiya      2021-07-21 13:35:52 -0700 14572)         1. For each resource {{GPUBindingResource}} in the bind group:
6f2040f0e spec/index.bs        (Kai Ninomiya      2021-07-21 13:35:52 -0700 14573)             1. Let |entry| be the corresponding {{GPUBindGroupLayoutEntry}} for this resource.
50b468a4e spec/index.bs        (Jim Blandy        2022-05-31 15:31:20 -0700 14574)             1. If |entry|.{{GPUBindGroupLayoutEntry/visibility}} includes {{GPUShaderStage/VERTEX}}:
6f2040f0e spec/index.bs        (Kai Ninomiya      2021-07-21 13:35:52 -0700 14575)                 - Bind the resource to the shader under group |index| and binding {{GPUBindGroupLayoutEntry/binding|GPUBindGroupLayoutEntry.binding}}.
6f2040f0e spec/index.bs        (Kai Ninomiya      2021-07-21 13:35:52 -0700 14576)     1. Set the shader [=builtins=]:
6f2040f0e spec/index.bs        (Kai Ninomiya      2021-07-21 13:35:52 -0700 14577)         - Set the `vertex_index` builtin, if any, to |vertexIndex|.
6f2040f0e spec/index.bs        (Kai Ninomiya      2021-07-21 13:35:52 -0700 14578)         - Set the `instance_index` builtin, if any, to |instanceIndex|.
8ea3aea0d spec/index.bs        (Dzmitry Malyshau  2021-12-01 09:17:32 -0500 14579)     1. Invoke the vertex shader entry point described by |desc|.
6f2040f0e spec/index.bs        (Kai Ninomiya      2021-07-21 13:35:52 -0700 14580) 
6f2040f0e spec/index.bs        (Kai Ninomiya      2021-07-21 13:35:52 -0700 14581)         Note: The target platform caches the results of vertex shader invocations.
6f2040f0e spec/index.bs        (Kai Ninomiya      2021-07-21 13:35:52 -0700 14582)         There is no guarantee that any |vertexIndex| that repeats more than once will
6f2040f0e spec/index.bs        (Kai Ninomiya      2021-07-21 13:35:52 -0700 14583)         result in multiple invocations. Similarly, there is no guarantee that a single |vertexIndex|
6f2040f0e spec/index.bs        (Kai Ninomiya      2021-07-21 13:35:52 -0700 14584)         will only be processed once.
2a614beca spec/index.bs        (David Neto        2022-07-20 00:34:39 -0400 14585) 
2a614beca spec/index.bs        (David Neto        2022-07-20 00:34:39 -0400 14586)         The [=device=] may become [=lose the device|lost=] if
9d897a4bb spec/index.bs        (Kai Ninomiya      2023-01-18 14:53:48 -0800 14587)         [=shader execution end|shader execution does not end=]
2a614beca spec/index.bs        (David Neto        2022-07-20 00:34:39 -0400 14588)         in a reasonable amount of time, as determined by the user agent.
78e3abd78 spec/index.bs        (Dzmitry Malyshau  2021-04-08 15:38:05 -0400 14589) </div>
ecb1bf060 spec/index.bs        (Brandon Jones     2020-08-04 07:04:04 -0700 14590) 
78e3abd78 spec/index.bs        (Dzmitry Malyshau  2021-04-08 15:38:05 -0400 14591) ### Primitive Assembly ### {#primitive-assembly}
02454410d spec/index.bs        (Hao Li            2020-03-31 17:05:00 +0800 14592) 
78e3abd78 spec/index.bs        (Dzmitry Malyshau  2021-04-08 15:38:05 -0400 14593) Primitives are assembled by a fixed-function stage of GPUs.
02454410d spec/index.bs        (Hao Li            2020-03-31 17:05:00 +0800 14594) 
1d11de7e1 spec/index.bs        (Brandon Jones     2024-05-07 09:48:51 -0700 14595) <div algorithm data-timeline=queue>
78e3abd78 spec/index.bs        (Dzmitry Malyshau  2021-04-08 15:38:05 -0400 14596)     <dfn abstract-op>assemble primitives</dfn>(vertexIndexList, drawCall, desc)
024b426b7 spec/index.bs        (Hao Li            2021-03-11 15:13:38 +0800 14597) 
8ea3aea0d spec/index.bs        (Dzmitry Malyshau  2021-12-01 09:17:32 -0500 14598)     **Arguments:**
02d3149a5 spec/index.bs        (Kai Ninomiya      2022-06-29 17:54:53 -0700 14599) 
02d3149a5 spec/index.bs        (Kai Ninomiya      2022-06-29 17:54:53 -0700 14600)     - |vertexIndexList|: List of vertex indices to process.
02d3149a5 spec/index.bs        (Kai Ninomiya      2022-06-29 17:54:53 -0700 14601)     - |drawCall|: The draw call parameters.
02d3149a5 spec/index.bs        (Kai Ninomiya      2022-06-29 17:54:53 -0700 14602)     - |desc|: The descriptor of type {{GPUPrimitiveState}}.
024b426b7 spec/index.bs        (Hao Li            2021-03-11 15:13:38 +0800 14603) 
8ea3aea0d spec/index.bs        (Dzmitry Malyshau  2021-12-01 09:17:32 -0500 14604)     For each instance, the primitives get assembled from the vertices that have been
8ea3aea0d spec/index.bs        (Dzmitry Malyshau  2021-12-01 09:17:32 -0500 14605)     processed by the shaders, based on the |vertexIndexList|.
024b426b7 spec/index.bs        (Hao Li            2021-03-11 15:13:38 +0800 14606) 
32b2a8270 spec/index.bs        (Corentin Wallez   2021-12-07 00:30:34 +0100 14607)     1. First, if the primitive topology is a strip, (which means that
32b2a8270 spec/index.bs        (Corentin Wallez   2021-12-07 00:30:34 +0100 14608)         |desc|.{{GPUPrimitiveState/stripIndexFormat}} is not undefined)
32b2a8270 spec/index.bs        (Corentin Wallez   2021-12-07 00:30:34 +0100 14609)         and the |drawCall| is indexed, the |vertexIndexList| is split into
32b2a8270 spec/index.bs        (Corentin Wallez   2021-12-07 00:30:34 +0100 14610)         sub-lists using the maximum value of |desc|.{{GPUPrimitiveState/stripIndexFormat}}
32b2a8270 spec/index.bs        (Corentin Wallez   2021-12-07 00:30:34 +0100 14611)         as a separator.
d5e25c98e spec/index.bs        (Hao Li            2020-05-09 02:13:53 +0800 14612) 
8ea3aea0d spec/index.bs        (Dzmitry Malyshau  2021-12-01 09:17:32 -0500 14613)         Example: a |vertexIndexList| with values `[1, 2, 65535, 4, 5, 6]` of type {{GPUIndexFormat/"uint16"}}
8ea3aea0d spec/index.bs        (Dzmitry Malyshau  2021-12-01 09:17:32 -0500 14614)         will be split in sub-lists `[1, 2]` and `[4, 5, 6]`.
d5e25c98e spec/index.bs        (Hao Li            2020-05-09 02:13:53 +0800 14615) 
8ea3aea0d spec/index.bs        (Dzmitry Malyshau  2021-12-01 09:17:32 -0500 14616)     1. For each of the sub-lists |vl|, primitive generation is done according to the
8ea3aea0d spec/index.bs        (Dzmitry Malyshau  2021-12-01 09:17:32 -0500 14617)         |desc|.{{GPUPrimitiveState/topology}}:
02d3149a5 spec/index.bs        (Kai Ninomiya      2022-06-29 17:54:53 -0700 14618) 
02d3149a5 spec/index.bs        (Kai Ninomiya      2022-06-29 17:54:53 -0700 14619)         <dl class=switch>
8ea3aea0d spec/index.bs        (Dzmitry Malyshau  2021-12-01 09:17:32 -0500 14620)             : {{GPUPrimitiveTopology/"line-list"}}
8ea3aea0d spec/index.bs        (Dzmitry Malyshau  2021-12-01 09:17:32 -0500 14621)             ::
8ea3aea0d spec/index.bs        (Dzmitry Malyshau  2021-12-01 09:17:32 -0500 14622)                 Line primitives are composed from (|vl|.0, |vl|.1),
8ea3aea0d spec/index.bs        (Dzmitry Malyshau  2021-12-01 09:17:32 -0500 14623)                 then (|vl|.2, |vl|.3), then (|vl|.4 to |vl|.5), etc.
8ea3aea0d spec/index.bs        (Dzmitry Malyshau  2021-12-01 09:17:32 -0500 14624)                 Each subsequent primitive takes 2 vertices.
45142605a spec/index.bs        (Hao Li            2020-06-10 08:02:10 +0800 14625) 
8ea3aea0d spec/index.bs        (Dzmitry Malyshau  2021-12-01 09:17:32 -0500 14626)             : {{GPUPrimitiveTopology/"line-strip"}}
8ea3aea0d spec/index.bs        (Dzmitry Malyshau  2021-12-01 09:17:32 -0500 14627)             ::
8ea3aea0d spec/index.bs        (Dzmitry Malyshau  2021-12-01 09:17:32 -0500 14628)                 Line primitives are composed from (|vl|.0, |vl|.1),
8ea3aea0d spec/index.bs        (Dzmitry Malyshau  2021-12-01 09:17:32 -0500 14629)                 then (|vl|.1, |vl|.2), then (|vl|.2, |vl|.3), etc.
8ea3aea0d spec/index.bs        (Dzmitry Malyshau  2021-12-01 09:17:32 -0500 14630)                 Each subsequent primitive takes 1 vertex.
45142605a spec/index.bs        (Hao Li            2020-06-10 08:02:10 +0800 14631) 
8ea3aea0d spec/index.bs        (Dzmitry Malyshau  2021-12-01 09:17:32 -0500 14632)             : {{GPUPrimitiveTopology/"triangle-list"}}
8ea3aea0d spec/index.bs        (Dzmitry Malyshau  2021-12-01 09:17:32 -0500 14633)             ::
8ea3aea0d spec/index.bs        (Dzmitry Malyshau  2021-12-01 09:17:32 -0500 14634)                 Triangle primitives are composed from (|vl|.0, |vl|.1, |vl|.2),
8ea3aea0d spec/index.bs        (Dzmitry Malyshau  2021-12-01 09:17:32 -0500 14635)                 then (|vl|.3, |vl|.4, |vl|.5), then (|vl|.6, |vl|.7, |vl|.8), etc.
8ea3aea0d spec/index.bs        (Dzmitry Malyshau  2021-12-01 09:17:32 -0500 14636)                 Each subsequent primitive takes 3 vertices.
45142605a spec/index.bs        (Hao Li            2020-06-10 08:02:10 +0800 14637) 
8ea3aea0d spec/index.bs        (Dzmitry Malyshau  2021-12-01 09:17:32 -0500 14638)             : {{GPUPrimitiveTopology/"triangle-strip"}}
8ea3aea0d spec/index.bs        (Dzmitry Malyshau  2021-12-01 09:17:32 -0500 14639)             ::
8ea3aea0d spec/index.bs        (Dzmitry Malyshau  2021-12-01 09:17:32 -0500 14640)                 Triangle primitives are composed from (|vl|.0, |vl|.1, |vl|.2),
8ea3aea0d spec/index.bs        (Dzmitry Malyshau  2021-12-01 09:17:32 -0500 14641)                 then (|vl|.2, |vl|.1, |vl|.3), then (|vl|.2, |vl|.3, |vl|.4),
8ea3aea0d spec/index.bs        (Dzmitry Malyshau  2021-12-01 09:17:32 -0500 14642)                 then (|vl|.4, |vl|.3, |vl|.5), etc.
8ea3aea0d spec/index.bs        (Dzmitry Malyshau  2021-12-01 09:17:32 -0500 14643)                 Each subsequent primitive takes 1 vertices.
8ea3aea0d spec/index.bs        (Dzmitry Malyshau  2021-12-01 09:17:32 -0500 14644)         </dl>
45142605a spec/index.bs        (Hao Li            2020-06-10 08:02:10 +0800 14645) 
b9d4153ab spec/index.bs        (Kai Ninomiya      2023-10-13 13:29:03 -0700 14646)         <p class="note editorial"><span class=marker>Editorial note:</span> should this be defined more formally?
45142605a spec/index.bs        (Hao Li            2020-06-10 08:02:10 +0800 14647) 
8ea3aea0d spec/index.bs        (Dzmitry Malyshau  2021-12-01 09:17:32 -0500 14648)         Any incomplete primitives are dropped.
78e3abd78 spec/index.bs        (Dzmitry Malyshau  2021-04-08 15:38:05 -0400 14649) </div>
0268a8de8 spec/index.bs        (Hao Li            2020-06-02 05:05:07 +0800 14650) 
78e3abd78 spec/index.bs        (Dzmitry Malyshau  2021-04-08 15:38:05 -0400 14651) ### Primitive Clipping ### {#primitive-clipping}
d5e25c98e spec/index.bs        (Hao Li            2020-05-09 02:13:53 +0800 14652) 
cab730c37 spec/index.bs        (David Neto        2023-05-26 12:16:35 -0400 14653) Vertex shaders have to produce a built-in [=position builtin|position=] (of type `vec4<f32>`),
eaafdefc9 spec/index.bs        (David Neto        2023-11-03 14:33:40 -0400 14654) which denotes the <dfn dfn>clip position</dfn> of a vertex in [=clip space coordinates=].
02454410d spec/index.bs        (Hao Li            2020-03-31 17:05:00 +0800 14655) 
78e3abd78 spec/index.bs        (Dzmitry Malyshau  2021-04-08 15:38:05 -0400 14656) Primitives are clipped to the <dfn dfn>clip volume</dfn>, which, for any [=clip position=] |p|
78e3abd78 spec/index.bs        (Dzmitry Malyshau  2021-04-08 15:38:05 -0400 14657) inside a primitive, is defined by the following inequalities:
02d3149a5 spec/index.bs        (Kai Ninomiya      2022-06-29 17:54:53 -0700 14658) 
02d3149a5 spec/index.bs        (Kai Ninomiya      2022-06-29 17:54:53 -0700 14659) - &minus;|p|.w &le; |p|.x &le; |p|.w
02d3149a5 spec/index.bs        (Kai Ninomiya      2022-06-29 17:54:53 -0700 14660) - &minus;|p|.w &le; |p|.y &le; |p|.w
02d3149a5 spec/index.bs        (Kai Ninomiya      2022-06-29 17:54:53 -0700 14661) - 0 &le; |p|.z &le; |p|.w (<dfn dfn>depth clipping</dfn>)
b1db1f72c spec/index.bs        (Dario Segura      2021-03-11 15:26:23 -0500 14662) 
adb07b1d8 spec/index.bs        (Jiawei Shao       2024-05-30 07:16:51 +0800 14663) When the {{GPUFeatureName/"clip-distances"}} feature is enabled, this [=clip volume=] can
adb07b1d8 spec/index.bs        (Jiawei Shao       2024-05-30 07:16:51 +0800 14664) be further restricted by user-defined half-spaces by declaring [=builtin/clip_distances=] in the
adb07b1d8 spec/index.bs        (Jiawei Shao       2024-05-30 07:16:51 +0800 14665) output of vertex stage. Each value in the [=builtin/clip_distances=] array will be linearly
adb07b1d8 spec/index.bs        (Jiawei Shao       2024-05-30 07:16:51 +0800 14666) interpolated across the primitive, and the portion of the primitive with interpolated distances less
adb07b1d8 spec/index.bs        (Jiawei Shao       2024-05-30 07:16:51 +0800 14667) than 0 will be clipped.
adb07b1d8 spec/index.bs        (Jiawei Shao       2024-05-30 07:16:51 +0800 14668) 
00751e047 spec/index.bs        (Kai Ninomiya      2021-11-01 14:44:57 -0700 14669) If |descriptor|.{{GPURenderPipelineDescriptor/primitive}}.{{GPUPrimitiveState/unclippedDepth}} is `true`,
00751e047 spec/index.bs        (Kai Ninomiya      2021-11-01 14:44:57 -0700 14670) [=depth clipping=] is not applied: the [=clip volume=] is not bounded in the z dimension.
b1db1f72c spec/index.bs        (Dario Segura      2021-03-11 15:26:23 -0500 14671) 
78e3abd78 spec/index.bs        (Dzmitry Malyshau  2021-04-08 15:38:05 -0400 14672) A primitive passes through this stage unchanged if every one of its edges
78e3abd78 spec/index.bs        (Dzmitry Malyshau  2021-04-08 15:38:05 -0400 14673) lie entirely inside the [=clip volume=].
78e3abd78 spec/index.bs        (Dzmitry Malyshau  2021-04-08 15:38:05 -0400 14674) If the edges of a primitives intersect the boundary of the [=clip volume=],
78e3abd78 spec/index.bs        (Dzmitry Malyshau  2021-04-08 15:38:05 -0400 14675) the intersecting edges are reconnected by new edges that lie along the boundary of the [=clip volume=].
78e3abd78 spec/index.bs        (Dzmitry Malyshau  2021-04-08 15:38:05 -0400 14676) For triangular primitives (|descriptor|.{{GPURenderPipelineDescriptor/primitive}}.{{GPUPrimitiveState/topology}} is
78e3abd78 spec/index.bs        (Dzmitry Malyshau  2021-04-08 15:38:05 -0400 14677) {{GPUPrimitiveTopology/"triangle-list"}} or {{GPUPrimitiveTopology/"triangle-strip"}}), this reconnection
78e3abd78 spec/index.bs        (Dzmitry Malyshau  2021-04-08 15:38:05 -0400 14678) may result in introduction of new vertices into the polygon, internally.
b1db1f72c spec/index.bs        (Dario Segura      2021-03-11 15:26:23 -0500 14679) 
78e3abd78 spec/index.bs        (Dzmitry Malyshau  2021-04-08 15:38:05 -0400 14680) If a primitive intersects an edge of the [=clip volume=]’s boundary,
78e3abd78 spec/index.bs        (Dzmitry Malyshau  2021-04-08 15:38:05 -0400 14681) the clipped polygon must include a point on this boundary edge.
b1db1f72c spec/index.bs        (Dario Segura      2021-03-11 15:26:23 -0500 14682) 
78e3abd78 spec/index.bs        (Dzmitry Malyshau  2021-04-08 15:38:05 -0400 14683) If the vertex shader outputs other floating-point values (scalars and vectors), qualified with
78e3abd78 spec/index.bs        (Dzmitry Malyshau  2021-04-08 15:38:05 -0400 14684) "perspective" interpolation, they also get clipped.
78e3abd78 spec/index.bs        (Dzmitry Malyshau  2021-04-08 15:38:05 -0400 14685) The output values associated with a vertex that lies within the clip volume are unaffected by clipping.
78e3abd78 spec/index.bs        (Dzmitry Malyshau  2021-04-08 15:38:05 -0400 14686) If a primitive is clipped, however, the output values assigned to vertices produced by clipping are clipped.
cd872445c design/sketch.webidl (François Beaufort 2019-04-02 18:34:31 +0200 14687) 
78e3abd78 spec/index.bs        (Dzmitry Malyshau  2021-04-08 15:38:05 -0400 14688) Considering an edge between vertices |a| and |b| that got clipped, resulting in the vertex |c|,
78e3abd78 spec/index.bs        (Dzmitry Malyshau  2021-04-08 15:38:05 -0400 14689) let's define |t| to be the ratio between the edge vertices:
78e3abd78 spec/index.bs        (Dzmitry Malyshau  2021-04-08 15:38:05 -0400 14690) |c|.p = |t| &times; |a|.p &plus; (1 &minus; |t|) &times; |b|.p,
78e3abd78 spec/index.bs        (Dzmitry Malyshau  2021-04-08 15:38:05 -0400 14691) where |x|.p is the output [=clip position=] of a vertex |x|.
523386022 design/sketch.webidl (Corentin Wallez   2018-02-13 18:00:21 -0500 14692) 
78e3abd78 spec/index.bs        (Dzmitry Malyshau  2021-04-08 15:38:05 -0400 14693) For each vertex output value "v" with a corresponding fragment input,
78e3abd78 spec/index.bs        (Dzmitry Malyshau  2021-04-08 15:38:05 -0400 14694) |a|.v and |b|.v would be the outputs for |a| and |b| vertices respectively.
78e3abd78 spec/index.bs        (Dzmitry Malyshau  2021-04-08 15:38:05 -0400 14695) The clipped shader output |c|.v is produced based on the interpolation qualifier:
02d3149a5 spec/index.bs        (Kai Ninomiya      2022-06-29 17:54:53 -0700 14696) <dl class=switch>
78e3abd78 spec/index.bs        (Dzmitry Malyshau  2021-04-08 15:38:05 -0400 14697)     : "flat"
78e3abd78 spec/index.bs        (Dzmitry Malyshau  2021-04-08 15:38:05 -0400 14698)     ::
78e3abd78 spec/index.bs        (Dzmitry Malyshau  2021-04-08 15:38:05 -0400 14699)         Flat interpolation is unaffected, and is based on <dfn dfn>provoking vertex</dfn>,
78e3abd78 spec/index.bs        (Dzmitry Malyshau  2021-04-08 15:38:05 -0400 14700)         which is the first vertex in the primitive. The output value is the same
78e3abd78 spec/index.bs        (Dzmitry Malyshau  2021-04-08 15:38:05 -0400 14701)         for the whole primitive, and matches the vertex output of the [=provoking vertex=]:
78e3abd78 spec/index.bs        (Dzmitry Malyshau  2021-04-08 15:38:05 -0400 14702)         |c|.v = [=provoking vertex=].v
8cc98b6f1 spec/index.bs        (Brandon Jones     2021-02-05 17:56:14 -0800 14703) 
78e3abd78 spec/index.bs        (Dzmitry Malyshau  2021-04-08 15:38:05 -0400 14704)     : "linear"
8cc98b6f1 spec/index.bs        (Brandon Jones     2021-02-05 17:56:14 -0800 14705)     ::
78e3abd78 spec/index.bs        (Dzmitry Malyshau  2021-04-08 15:38:05 -0400 14706)         The interpolation ratio gets adjusted against the perspective coordinates of the
78e3abd78 spec/index.bs        (Dzmitry Malyshau  2021-04-08 15:38:05 -0400 14707)         [=clip position=]s, so that the result of interpolation is linear in screen space.
8cc98b6f1 spec/index.bs        (Brandon Jones     2021-02-05 17:56:14 -0800 14708) 
b9d4153ab spec/index.bs        (Kai Ninomiya      2023-10-13 13:29:03 -0700 14709)         <p class="note editorial"><span class=marker>Editorial note:</span> provide more specifics here, if possible
f5b056726 spec/index.bs        (Brandon Jones     2020-11-30 15:31:16 -0800 14710) 
78e3abd78 spec/index.bs        (Dzmitry Malyshau  2021-04-08 15:38:05 -0400 14711)     : "perspective"
ecb1bf060 spec/index.bs        (Brandon Jones     2020-08-04 07:04:04 -0700 14712)     ::
78e3abd78 spec/index.bs        (Dzmitry Malyshau  2021-04-08 15:38:05 -0400 14713)         The value is linearly interpolated in clip space, producing perspective-correct values:
ecb1bf060 spec/index.bs        (Brandon Jones     2020-08-04 07:04:04 -0700 14714) 
78e3abd78 spec/index.bs        (Dzmitry Malyshau  2021-04-08 15:38:05 -0400 14715)         |c|.v = |t| &times; |a|.v &plus; (1 &minus; |t|) &times; |b|.v
78e3abd78 spec/index.bs        (Dzmitry Malyshau  2021-04-08 15:38:05 -0400 14716) </dl>
ecb1bf060 spec/index.bs        (Brandon Jones     2020-08-04 07:04:04 -0700 14717) 
b9d4153ab spec/index.bs        (Kai Ninomiya      2023-10-13 13:29:03 -0700 14718) <p class="note editorial"><span class=marker>Editorial note:</span> link to interpolation qualifiers in WGSL
ecb1bf060 spec/index.bs        (Brandon Jones     2020-08-04 07:04:04 -0700 14719) 
8ea3aea0d spec/index.bs        (Dzmitry Malyshau  2021-12-01 09:17:32 -0500 14720) The result of primitive clipping is a new set of primitives, which are contained
8ea3aea0d spec/index.bs        (Dzmitry Malyshau  2021-12-01 09:17:32 -0500 14721) within the [=clip volume=].
8ea3aea0d spec/index.bs        (Dzmitry Malyshau  2021-12-01 09:17:32 -0500 14722) 
78e3abd78 spec/index.bs        (Dzmitry Malyshau  2021-04-08 15:38:05 -0400 14723) ### Rasterization ### {#rasterization}
ecb1bf060 spec/index.bs        (Brandon Jones     2020-08-04 07:04:04 -0700 14724) 
78e3abd78 spec/index.bs        (Dzmitry Malyshau  2021-04-08 15:38:05 -0400 14725) Rasterization is the hardware processing stage that maps the generated primitives
78e3abd78 spec/index.bs        (Dzmitry Malyshau  2021-04-08 15:38:05 -0400 14726) to the 2-dimensional rendering area of the <dfn dfn>framebuffer</dfn> -
78e3abd78 spec/index.bs        (Dzmitry Malyshau  2021-04-08 15:38:05 -0400 14727) the set of render attachments in the current {{GPURenderPassEncoder}}.
78e3abd78 spec/index.bs        (Dzmitry Malyshau  2021-04-08 15:38:05 -0400 14728) This rendering area is split into an even grid of pixels.
f5b056726 spec/index.bs        (Brandon Jones     2020-11-30 15:31:16 -0800 14729) 
78e3abd78 spec/index.bs        (Dzmitry Malyshau  2021-04-08 15:38:05 -0400 14730) The [=framebuffer=] coordinates start from the top-left corner of the render targets.
e607dd0e1 spec/index.bs        (David Neto        2023-05-23 17:49:05 -0400 14731) Each unit corresponds exactly to one pixel. See [[#coordinate-systems]] for more information.
ecb1bf060 spec/index.bs        (Brandon Jones     2020-08-04 07:04:04 -0700 14732) 
b53d15d0a spec/index.bs        (Kai Ninomiya      2023-04-18 16:58:39 -0700 14733) Rasterization determines the set of pixels affected by a primitive. In case of multi-sampling,
b53d15d0a spec/index.bs        (Kai Ninomiya      2023-04-18 16:58:39 -0700 14734) each pixel is further split into
b53d15d0a spec/index.bs        (Kai Ninomiya      2023-04-18 16:58:39 -0700 14735) |descriptor|.{{GPURenderPipelineDescriptor/multisample}}.{{GPUMultisampleState/count}} samples.
b53d15d0a spec/index.bs        (Kai Ninomiya      2023-04-18 16:58:39 -0700 14736) The <dfn dfn noexport>standard sample patterns</dfn> are as follows,
b53d15d0a spec/index.bs        (Kai Ninomiya      2023-04-18 16:58:39 -0700 14737) with positions in framebuffer coordinates relative to the top-left corner of the pixel,
b53d15d0a spec/index.bs        (Kai Ninomiya      2023-04-18 16:58:39 -0700 14738) such that the pixel ranges from (0, 0) to (1, 1):
b53d15d0a spec/index.bs        (Kai Ninomiya      2023-04-18 16:58:39 -0700 14739) 
b53d15d0a spec/index.bs        (Kai Ninomiya      2023-04-18 16:58:39 -0700 14740) <table class=data>
b53d15d0a spec/index.bs        (Kai Ninomiya      2023-04-18 16:58:39 -0700 14741)     <thead>
b53d15d0a spec/index.bs        (Kai Ninomiya      2023-04-18 16:58:39 -0700 14742)         <tr><th>{{GPURenderPipelineDescriptor/multisample}}.{{GPUMultisampleState/count}}<th>Sample positions
b53d15d0a spec/index.bs        (Kai Ninomiya      2023-04-18 16:58:39 -0700 14743)     <tbody>
b53d15d0a spec/index.bs        (Kai Ninomiya      2023-04-18 16:58:39 -0700 14744)         <tr><td>1<td>
b53d15d0a spec/index.bs        (Kai Ninomiya      2023-04-18 16:58:39 -0700 14745)             Sample 0: (0.5, 0.5)
b53d15d0a spec/index.bs        (Kai Ninomiya      2023-04-18 16:58:39 -0700 14746)         <tr><td>4<td>
b53d15d0a spec/index.bs        (Kai Ninomiya      2023-04-18 16:58:39 -0700 14747)             Sample 0: (0.375, 0.125)<br>
b53d15d0a spec/index.bs        (Kai Ninomiya      2023-04-18 16:58:39 -0700 14748)             Sample 1: (0.875, 0.375)<br>
b53d15d0a spec/index.bs        (Kai Ninomiya      2023-04-18 16:58:39 -0700 14749)             Sample 2: (0.125, 0.625)<br>
b53d15d0a spec/index.bs        (Kai Ninomiya      2023-04-18 16:58:39 -0700 14750)             Sample 3: (0.625, 0.875)
b53d15d0a spec/index.bs        (Kai Ninomiya      2023-04-18 16:58:39 -0700 14751) </table>
b53d15d0a spec/index.bs        (Kai Ninomiya      2023-04-18 16:58:39 -0700 14752) 
7b63ba7bd spec/index.bs        (Brandon Jones     2024-06-07 15:46:31 -0700 14753) Implementations must use the [=standard sample pattern=] for the given
7b63ba7bd spec/index.bs        (Brandon Jones     2024-06-07 15:46:31 -0700 14754) {{GPURenderPipelineDescriptor/multisample}}.{{GPUMultisampleState/count}} when performing rasterization.
7b63ba7bd spec/index.bs        (Brandon Jones     2024-06-07 15:46:31 -0700 14755) 
8ea3aea0d spec/index.bs        (Dzmitry Malyshau  2021-12-01 09:17:32 -0500 14756) Let's define a <dfn dfn>FragmentDestination</dfn> to contain:
8ea3aea0d spec/index.bs        (Dzmitry Malyshau  2021-12-01 09:17:32 -0500 14757) <dl dfn-for=FragmentDestination>
8ea3aea0d spec/index.bs        (Dzmitry Malyshau  2021-12-01 09:17:32 -0500 14758)     : <dfn dfn>position</dfn>
e607dd0e1 spec/index.bs        (David Neto        2023-05-23 17:49:05 -0400 14759)     :: the 2D pixel position using [=framebuffer coordinates=]
8ea3aea0d spec/index.bs        (Dzmitry Malyshau  2021-12-01 09:17:32 -0500 14760)     : <dfn dfn>sampleIndex</dfn>
8ea3aea0d spec/index.bs        (Dzmitry Malyshau  2021-12-01 09:17:32 -0500 14761)     :: an integer in case [[#sample-frequency-shading]] is active,
8ea3aea0d spec/index.bs        (Dzmitry Malyshau  2021-12-01 09:17:32 -0500 14762)         or `null` otherwise
8ea3aea0d spec/index.bs        (Dzmitry Malyshau  2021-12-01 09:17:32 -0500 14763) </dl>
ecb1bf060 spec/index.bs        (Brandon Jones     2020-08-04 07:04:04 -0700 14764) 
e607dd0e1 spec/index.bs        (David Neto        2023-05-23 17:49:05 -0400 14765) We'll also use a notion of [=NDC|normalized device coordinates=], or NDC.
8ea3aea0d spec/index.bs        (Dzmitry Malyshau  2021-12-01 09:17:32 -0500 14766) In this coordinate system, the viewport bounds range in X and Y from -1 to 1, and in Z from 0 to 1.
8ea3aea0d spec/index.bs        (Dzmitry Malyshau  2021-12-01 09:17:32 -0500 14767) 
8ea3aea0d spec/index.bs        (Dzmitry Malyshau  2021-12-01 09:17:32 -0500 14768) Rasterization produces a list of <dfn dfn>RasterizationPoint</dfn>s, each containing the following data:
8ea3aea0d spec/index.bs        (Dzmitry Malyshau  2021-12-01 09:17:32 -0500 14769) <dl dfn-for=RasterizationPoint>
8ea3aea0d spec/index.bs        (Dzmitry Malyshau  2021-12-01 09:17:32 -0500 14770)     : <dfn dfn>destination</dfn>
8ea3aea0d spec/index.bs        (Dzmitry Malyshau  2021-12-01 09:17:32 -0500 14771)     :: refers to [=FragmentDestination=]
8ea3aea0d spec/index.bs        (Dzmitry Malyshau  2021-12-01 09:17:32 -0500 14772)     : <dfn dfn>coverageMask</dfn>
8ea3aea0d spec/index.bs        (Dzmitry Malyshau  2021-12-01 09:17:32 -0500 14773)     :: refers to multisample coverage mask (see [[#sample-masking]])
8ea3aea0d spec/index.bs        (Dzmitry Malyshau  2021-12-01 09:17:32 -0500 14774)     : <dfn dfn>frontFacing</dfn>
8ea3aea0d spec/index.bs        (Dzmitry Malyshau  2021-12-01 09:17:32 -0500 14775)     :: is true if it's a point on the front face of a primitive
8ea3aea0d spec/index.bs        (Dzmitry Malyshau  2021-12-01 09:17:32 -0500 14776)     : <dfn dfn>perspectiveDivisor</dfn>
8ea3aea0d spec/index.bs        (Dzmitry Malyshau  2021-12-01 09:17:32 -0500 14777)     :: refers to interpolated 1.0 &divide; W across the primitive
8ea3aea0d spec/index.bs        (Dzmitry Malyshau  2021-12-01 09:17:32 -0500 14778)     : <dfn dfn>depth</dfn>
e607dd0e1 spec/index.bs        (David Neto        2023-05-23 17:49:05 -0400 14779)     :: refers to the depth in [=viewport coordinates=],
b97a29ebc spec/index.bs        (David Neto        2023-04-18 17:37:45 -0400 14780)         i.e. between the {{RenderState/[[viewport]]}} `minDepth` and `maxDepth`.
8ea3aea0d spec/index.bs        (Dzmitry Malyshau  2021-12-01 09:17:32 -0500 14781)     : <dfn dfn>primitiveVertices</dfn>
8ea3aea0d spec/index.bs        (Dzmitry Malyshau  2021-12-01 09:17:32 -0500 14782)     :: refers to the list of vertex outputs forming the primitive
8ea3aea0d spec/index.bs        (Dzmitry Malyshau  2021-12-01 09:17:32 -0500 14783)     : <dfn dfn>barycentricCoordinates</dfn>
dafb8db32 spec/index.bs        (Dzmitry Malyshau  2021-12-03 13:10:34 -0500 14784)     :: refers to [[#barycentric-coordinates]]
8ea3aea0d spec/index.bs        (Dzmitry Malyshau  2021-12-01 09:17:32 -0500 14785) </dl>
ecb1bf060 spec/index.bs        (Brandon Jones     2020-08-04 07:04:04 -0700 14786) 
b9d4153ab spec/index.bs        (Kai Ninomiya      2023-10-13 13:29:03 -0700 14787) <p class="note editorial"><span class=marker>Editorial note:</span> define the depth computation algorithm
b1db1f72c spec/index.bs        (Dario Segura      2021-03-11 15:26:23 -0500 14788) 
1d11de7e1 spec/index.bs        (Brandon Jones     2024-05-07 09:48:51 -0700 14789) <div algorithm data-timeline=queue>
8ea3aea0d spec/index.bs        (Dzmitry Malyshau  2021-12-01 09:17:32 -0500 14790)     <dfn abstract-op>rasterize</dfn>(primitiveList, state)
f5b056726 spec/index.bs        (Brandon Jones     2020-11-30 15:31:16 -0800 14791) 
8ea3aea0d spec/index.bs        (Dzmitry Malyshau  2021-12-01 09:17:32 -0500 14792)     **Arguments:**
02d3149a5 spec/index.bs        (Kai Ninomiya      2022-06-29 17:54:53 -0700 14793) 
8ea3aea0d spec/index.bs        (Dzmitry Malyshau  2021-12-01 09:17:32 -0500 14794)     - |primitiveList|: List of primitives to rasterize.
8ea3aea0d spec/index.bs        (Dzmitry Malyshau  2021-12-01 09:17:32 -0500 14795)     - |state|: The active [=RenderState=].
523386022 design/sketch.webidl (Corentin Wallez   2018-02-13 18:00:21 -0500 14796) 
8ea3aea0d spec/index.bs        (Dzmitry Malyshau  2021-12-01 09:17:32 -0500 14797)     **Returns:** list of [=RasterizationPoint=].
b1db1f72c spec/index.bs        (Dario Segura      2021-03-11 15:26:23 -0500 14798) 
8ea3aea0d spec/index.bs        (Dzmitry Malyshau  2021-12-01 09:17:32 -0500 14799)     Each primitive in |primitiveList| is processed independently.
8ea3aea0d spec/index.bs        (Dzmitry Malyshau  2021-12-01 09:17:32 -0500 14800)     However, the order of primitives affects later stages, such as depth/stencil operations and pixel writes.
c325725d5 spec/index.bs        (Dean Jackson      2019-04-08 11:11:25 -0700 14801) 
8ea3aea0d spec/index.bs        (Dzmitry Malyshau  2021-12-01 09:17:32 -0500 14802)     1. First, the clipped vertices are transformed into [=NDC=] - normalized device coordinates.
e607dd0e1 spec/index.bs        (David Neto        2023-05-23 17:49:05 -0400 14803)         Given the output position |p|, the [=NDC=] position and perspective divisor are:
8ea3aea0d spec/index.bs        (Dzmitry Malyshau  2021-12-01 09:17:32 -0500 14804) 
8ea3aea0d spec/index.bs        (Dzmitry Malyshau  2021-12-01 09:17:32 -0500 14805)         ndc(|p|) = vector(|p|.x &divide; |p|.w, |p|.y &divide; |p|.w, |p|.z &divide; |p|.w)
8ea3aea0d spec/index.bs        (Dzmitry Malyshau  2021-12-01 09:17:32 -0500 14806) 
e607dd0e1 spec/index.bs        (David Neto        2023-05-23 17:49:05 -0400 14807)         divisor(|p|) = 1.0 &divide; |p|.w
e607dd0e1 spec/index.bs        (David Neto        2023-05-23 17:49:05 -0400 14808) 
a185b503b spec/index.bs        (Brandon Jones     2023-01-04 10:38:13 -0800 14809)     1. Let |vp| be |state|.{{RenderState/[[viewport]]}}.
e607dd0e1 spec/index.bs        (David Neto        2023-05-23 17:49:05 -0400 14810)         Map the [=NDC=] position |n| into [=viewport coordinates=]:
b97a29ebc spec/index.bs        (David Neto        2023-04-18 17:37:45 -0400 14811)         * Compute [=framebuffer=] coordinates from the render target offset and size:
8ea3aea0d spec/index.bs        (Dzmitry Malyshau  2021-12-01 09:17:32 -0500 14812) 
494eb33a5 spec/index.bs        (Brandon Jones     2024-05-17 16:27:47 -0700 14813)             framebufferCoords(|n|) = vector(|vp|.`x` &plus; 0.5 &times; (|n|.x &plus; 1) &times; |vp|.`width`, |vp|.`y` &plus; 0.5 &times; (&minus;|n|.y &plus; 1) &times; |vp|.`height`)
8ea3aea0d spec/index.bs        (Dzmitry Malyshau  2021-12-01 09:17:32 -0500 14814) 
b97a29ebc spec/index.bs        (David Neto        2023-04-18 17:37:45 -0400 14815)         * Compute depth by linearly mapping [0,1] to the viewport depth range:
b97a29ebc spec/index.bs        (David Neto        2023-04-18 17:37:45 -0400 14816) 
b97a29ebc spec/index.bs        (David Neto        2023-04-18 17:37:45 -0400 14817)             depth(|n|) = |vp|.`minDepth` &plus; |n|.`z` &times; ( |vp|.`maxDepth` - |vp|.`minDepth` )
8ea3aea0d spec/index.bs        (Dzmitry Malyshau  2021-12-01 09:17:32 -0500 14818) 
8ea3aea0d spec/index.bs        (Dzmitry Malyshau  2021-12-01 09:17:32 -0500 14819)     1. Let |rasterizationPoints| be an empty list.
8ea3aea0d spec/index.bs        (Dzmitry Malyshau  2021-12-01 09:17:32 -0500 14820) 
b9d4153ab spec/index.bs        (Kai Ninomiya      2023-10-13 13:29:03 -0700 14821)         <p class="note editorial"><span class=marker>Editorial note:</span> specify that each rasterization point gets assigned an interpolated `divisor(p)`,
b97a29ebc spec/index.bs        (David Neto        2023-04-18 17:37:45 -0400 14822)         `framebufferCoords(n)`, `depth(n)`, as well as the other attributes.
8ea3aea0d spec/index.bs        (Dzmitry Malyshau  2021-12-01 09:17:32 -0500 14823) 
8ea3aea0d spec/index.bs        (Dzmitry Malyshau  2021-12-01 09:17:32 -0500 14824)     1. Proceed with a specific rasterization algorithm,
8ea3aea0d spec/index.bs        (Dzmitry Malyshau  2021-12-01 09:17:32 -0500 14825)         depending on {{GPURenderPipelineDescriptor/primitive}}.{{GPUPrimitiveState/topology}}:
02d3149a5 spec/index.bs        (Kai Ninomiya      2022-06-29 17:54:53 -0700 14826) 
02d3149a5 spec/index.bs        (Kai Ninomiya      2022-06-29 17:54:53 -0700 14827)         <dl class=switch>
8ea3aea0d spec/index.bs        (Dzmitry Malyshau  2021-12-01 09:17:32 -0500 14828)             : {{GPUPrimitiveTopology/"point-list"}}
8ea3aea0d spec/index.bs        (Dzmitry Malyshau  2021-12-01 09:17:32 -0500 14829)             :: The point, if not filtered by [[#primitive-clipping]], goes into [[#point-rasterization]].
8ea3aea0d spec/index.bs        (Dzmitry Malyshau  2021-12-01 09:17:32 -0500 14830)             : {{GPUPrimitiveTopology/"line-list"}} or {{GPUPrimitiveTopology/"line-strip"}}
8ea3aea0d spec/index.bs        (Dzmitry Malyshau  2021-12-01 09:17:32 -0500 14831)             :: The line cut by [[#primitive-clipping]] goes into [[#line-rasterization]].
8ea3aea0d spec/index.bs        (Dzmitry Malyshau  2021-12-01 09:17:32 -0500 14832)             : {{GPUPrimitiveTopology/"triangle-list"}} or {{GPUPrimitiveTopology/"triangle-strip"}}
8ea3aea0d spec/index.bs        (Dzmitry Malyshau  2021-12-01 09:17:32 -0500 14833)             :: The polygon produced in [[#primitive-clipping]] goes into [[#polygon-rasterization]].
8ea3aea0d spec/index.bs        (Dzmitry Malyshau  2021-12-01 09:17:32 -0500 14834)         </dl>
8ea3aea0d spec/index.bs        (Dzmitry Malyshau  2021-12-01 09:17:32 -0500 14835) 
8ea3aea0d spec/index.bs        (Dzmitry Malyshau  2021-12-01 09:17:32 -0500 14836)     1. Remove all the points |rp| from |rasterizationPoints| that have
8ea3aea0d spec/index.bs        (Dzmitry Malyshau  2021-12-01 09:17:32 -0500 14837)         |rp|.[=RasterizationPoint/destination=].[=FragmentDestination/position=]
a185b503b spec/index.bs        (Brandon Jones     2023-01-04 10:38:13 -0800 14838)         outside of |state|.{{RenderState/[[scissorRect]]}}.
8ea3aea0d spec/index.bs        (Dzmitry Malyshau  2021-12-01 09:17:32 -0500 14839) 
8ea3aea0d spec/index.bs        (Dzmitry Malyshau  2021-12-01 09:17:32 -0500 14840)     1. Return |rasterizationPoints|.
8ea3aea0d spec/index.bs        (Dzmitry Malyshau  2021-12-01 09:17:32 -0500 14841) </div>
8cc98b6f1 spec/index.bs        (Brandon Jones     2021-02-05 17:56:14 -0800 14842) 
78e3abd78 spec/index.bs        (Dzmitry Malyshau  2021-04-08 15:38:05 -0400 14843) #### Point Rasterization #### {#point-rasterization}
8cc98b6f1 spec/index.bs        (Brandon Jones     2021-02-05 17:56:14 -0800 14844) 
8ea3aea0d spec/index.bs        (Dzmitry Malyshau  2021-12-01 09:17:32 -0500 14845) A single [=FragmentDestination=] is selected within the pixel containing the
78e3abd78 spec/index.bs        (Dzmitry Malyshau  2021-04-08 15:38:05 -0400 14846) [=framebuffer=] coordinates of the point.
8cc98b6f1 spec/index.bs        (Brandon Jones     2021-02-05 17:56:14 -0800 14847) 
78e3abd78 spec/index.bs        (Dzmitry Malyshau  2021-04-08 15:38:05 -0400 14848) The coverage mask depends on multi-sampling mode:
02d3149a5 spec/index.bs        (Kai Ninomiya      2022-06-29 17:54:53 -0700 14849) <dl class=switch>
78e3abd78 spec/index.bs        (Dzmitry Malyshau  2021-04-08 15:38:05 -0400 14850)     : sample-frequency
78e3abd78 spec/index.bs        (Dzmitry Malyshau  2021-04-08 15:38:05 -0400 14851)     :: coverageMask = 1 &Lt; `sampleIndex`
78e3abd78 spec/index.bs        (Dzmitry Malyshau  2021-04-08 15:38:05 -0400 14852)     : pixel-frequency multi-sampling
78e3abd78 spec/index.bs        (Dzmitry Malyshau  2021-04-08 15:38:05 -0400 14853)     :: coverageMask = 1 &Lt; |descriptor|.{{GPURenderPipelineDescriptor/multisample}}.{{GPUMultisampleState/count}} &minus; 1
78e3abd78 spec/index.bs        (Dzmitry Malyshau  2021-04-08 15:38:05 -0400 14854)     : no multi-sampling
78e3abd78 spec/index.bs        (Dzmitry Malyshau  2021-04-08 15:38:05 -0400 14855)     :: coverageMask = 1
8cc98b6f1 spec/index.bs        (Brandon Jones     2021-02-05 17:56:14 -0800 14856) </dl>
c4b3bca57 spec/index.bs        (Jeff Gilbert      2020-03-23 14:49:28 -0700 14857) 
78e3abd78 spec/index.bs        (Dzmitry Malyshau  2021-04-08 15:38:05 -0400 14858) #### Line Rasterization #### {#line-rasterization}
ecb1bf060 spec/index.bs        (Brandon Jones     2020-08-04 07:04:04 -0700 14859) 
b9d4153ab spec/index.bs        (Kai Ninomiya      2023-10-13 13:29:03 -0700 14860) <p class="note editorial"><span class=marker>Editorial note:</span> fill out this section
ecb1bf060 spec/index.bs        (Brandon Jones     2020-08-04 07:04:04 -0700 14861) 
dafb8db32 spec/index.bs        (Dzmitry Malyshau  2021-12-03 13:10:34 -0500 14862) #### Barycentric coordinates #### {#barycentric-coordinates}
dafb8db32 spec/index.bs        (Dzmitry Malyshau  2021-12-03 13:10:34 -0500 14863) 
dafb8db32 spec/index.bs        (Dzmitry Malyshau  2021-12-03 13:10:34 -0500 14864) Barycentric coordinates is a list of |n| numbers |b|<sub>|i|</sub>,
dafb8db32 spec/index.bs        (Dzmitry Malyshau  2021-12-03 13:10:34 -0500 14865) defined for a point |p| inside a convex polygon with |n| vertices |v|<sub>|i|</sub> in [=framebuffer=] space.
dafb8db32 spec/index.bs        (Dzmitry Malyshau  2021-12-03 13:10:34 -0500 14866) Each |b|<sub>|i|</sub> is in range 0 to 1, inclusive, and represents the proximity to vertex |v|<sub>|i|</sub>.
dafb8db32 spec/index.bs        (Dzmitry Malyshau  2021-12-03 13:10:34 -0500 14867) Their sum is always constant:
dafb8db32 spec/index.bs        (Dzmitry Malyshau  2021-12-03 13:10:34 -0500 14868) 
dafb8db32 spec/index.bs        (Dzmitry Malyshau  2021-12-03 13:10:34 -0500 14869) &sum; (|b|<sub>|i|</sub>) = 1
dafb8db32 spec/index.bs        (Dzmitry Malyshau  2021-12-03 13:10:34 -0500 14870) 
dafb8db32 spec/index.bs        (Dzmitry Malyshau  2021-12-03 13:10:34 -0500 14871) These coordinates uniquely specify any point |p| within the polygon (or on its boundary) as:
dafb8db32 spec/index.bs        (Dzmitry Malyshau  2021-12-03 13:10:34 -0500 14872) 
dafb8db32 spec/index.bs        (Dzmitry Malyshau  2021-12-03 13:10:34 -0500 14873) |p| = &sum; (|b|<sub>|i|</sub> &times; |p|<sub>|i|</sub>)
dafb8db32 spec/index.bs        (Dzmitry Malyshau  2021-12-03 13:10:34 -0500 14874) 
dafb8db32 spec/index.bs        (Dzmitry Malyshau  2021-12-03 13:10:34 -0500 14875) For a polygon with 3 vertices - a triangle,
dafb8db32 spec/index.bs        (Dzmitry Malyshau  2021-12-03 13:10:34 -0500 14876) barycentric coordinates of any point |p| can be computed as follows:
dafb8db32 spec/index.bs        (Dzmitry Malyshau  2021-12-03 13:10:34 -0500 14877) 
dafb8db32 spec/index.bs        (Dzmitry Malyshau  2021-12-03 13:10:34 -0500 14878) |A|<sub>polygon</sub> = A(|v|<sub>|1|</sub>, |v|<sub>|2|</sub>, |v|<sub>|3|</sub>)
dafb8db32 spec/index.bs        (Dzmitry Malyshau  2021-12-03 13:10:34 -0500 14879) |b|<sub>|1|</sub> = A(|p|, |b|<sub>|2|</sub>, |b|<sub>|3|</sub>) &divide; |A|<sub>polygon</sub>
dafb8db32 spec/index.bs        (Dzmitry Malyshau  2021-12-03 13:10:34 -0500 14880) |b|<sub>|2|</sub> = A(|b|<sub>|1|</sub>, |p|, |b|<sub>|3|</sub>) &divide; |A|<sub>polygon</sub>
dafb8db32 spec/index.bs        (Dzmitry Malyshau  2021-12-03 13:10:34 -0500 14881) |b|<sub>|3|</sub> = A(|b|<sub>|1|</sub>, |b|<sub>|2|</sub>, |p|) &divide; |A|<sub>polygon</sub>
dafb8db32 spec/index.bs        (Dzmitry Malyshau  2021-12-03 13:10:34 -0500 14882) 
dafb8db32 spec/index.bs        (Dzmitry Malyshau  2021-12-03 13:10:34 -0500 14883) Where A(list of points) is the area of the polygon with the given set of vertices.
dafb8db32 spec/index.bs        (Dzmitry Malyshau  2021-12-03 13:10:34 -0500 14884) 
dafb8db32 spec/index.bs        (Dzmitry Malyshau  2021-12-03 13:10:34 -0500 14885) For polygons with more than 3 vertices, the exact algorithm is implementation-dependent.
dafb8db32 spec/index.bs        (Dzmitry Malyshau  2021-12-03 13:10:34 -0500 14886) One of the possible implementations is to triangulate the polygon and compute the barycentrics
dafb8db32 spec/index.bs        (Dzmitry Malyshau  2021-12-03 13:10:34 -0500 14887) of a point based on the triangle it falls into.
dafb8db32 spec/index.bs        (Dzmitry Malyshau  2021-12-03 13:10:34 -0500 14888) 
78e3abd78 spec/index.bs        (Dzmitry Malyshau  2021-04-08 15:38:05 -0400 14889) #### Polygon Rasterization #### {#polygon-rasterization}
ecb1bf060 spec/index.bs        (Brandon Jones     2020-08-04 07:04:04 -0700 14890) 
dafb8db32 spec/index.bs        (Dzmitry Malyshau  2021-12-03 13:10:34 -0500 14891) A polygon is <dfn dfn>front-facing</dfn> if it's oriented towards the projection.
dafb8db32 spec/index.bs        (Dzmitry Malyshau  2021-12-03 13:10:34 -0500 14892) Otherwise, the polygon is <dfn dfn>back-facing</dfn>.
8cc98b6f1 spec/index.bs        (Brandon Jones     2021-02-05 17:56:14 -0800 14893) 
1d11de7e1 spec/index.bs        (Brandon Jones     2024-05-07 09:48:51 -0700 14894) <div algorithm data-timeline=queue>
dafb8db32 spec/index.bs        (Dzmitry Malyshau  2021-12-03 13:10:34 -0500 14895)     <dfn abstract-op>rasterize polygon</dfn>()
d00a99c53 spec/index.bs        (Kai Ninomiya      2020-03-25 16:24:32 -0700 14896) 
dafb8db32 spec/index.bs        (Dzmitry Malyshau  2021-12-03 13:10:34 -0500 14897)     **Arguments:**
8cc98b6f1 spec/index.bs        (Brandon Jones     2021-02-05 17:56:14 -0800 14898) 
dafb8db32 spec/index.bs        (Dzmitry Malyshau  2021-12-03 13:10:34 -0500 14899)     **Returns:** list of [=RasterizationPoint=].
8cc98b6f1 spec/index.bs        (Brandon Jones     2021-02-05 17:56:14 -0800 14900) 
dafb8db32 spec/index.bs        (Dzmitry Malyshau  2021-12-03 13:10:34 -0500 14901)     1. Let |rasterizationPoints| be an empty list.
dafb8db32 spec/index.bs        (Dzmitry Malyshau  2021-12-03 13:10:34 -0500 14902)     1. Let |v|(|i|) be the [=framebuffer=] coordinates for the clipped vertex number |i| (starting with 1)
dafb8db32 spec/index.bs        (Dzmitry Malyshau  2021-12-03 13:10:34 -0500 14903)         in a rasterized polygon of |n| vertices.
8cc98b6f1 spec/index.bs        (Brandon Jones     2021-02-05 17:56:14 -0800 14904) 
dafb8db32 spec/index.bs        (Dzmitry Malyshau  2021-12-03 13:10:34 -0500 14905)         Note: this section uses the term "polygon" instead of a "triangle",
dafb8db32 spec/index.bs        (Dzmitry Malyshau  2021-12-03 13:10:34 -0500 14906)         since [[#primitive-clipping]] stage may have introduced additional vertices.
dafb8db32 spec/index.bs        (Dzmitry Malyshau  2021-12-03 13:10:34 -0500 14907)         This is non-observable by the application.
8cc98b6f1 spec/index.bs        (Brandon Jones     2021-02-05 17:56:14 -0800 14908) 
dafb8db32 spec/index.bs        (Dzmitry Malyshau  2021-12-03 13:10:34 -0500 14909)     1. Determine if the polygon is front-facing,
dafb8db32 spec/index.bs        (Dzmitry Malyshau  2021-12-03 13:10:34 -0500 14910)         which depends on the sign of the |area| occupied by the polygon in [=framebuffer=] coordinates:
8cc98b6f1 spec/index.bs        (Brandon Jones     2021-02-05 17:56:14 -0800 14911) 
dafb8db32 spec/index.bs        (Dzmitry Malyshau  2021-12-03 13:10:34 -0500 14912)         |area| = 0.5 &times; ((|v|<sub>1</sub>.x &times; |v|<sub>|n|</sub>.y &minus; |v|<sub>|n|</sub>.x &times; |v|<sub>1</sub>.y) &plus; &sum; (|v|<sub>|i|&plus;1</sub>.x &times; |v|<sub>|i|</sub>.y &minus; |v|<sub>|i|</sub>.x &times; |v|<sub>|i|&plus;1</sub>.y))
e4082ced8 design/sketch.webidl (Kai Ninomiya      2019-03-25 20:41:06 +0100 14913) 
dafb8db32 spec/index.bs        (Dzmitry Malyshau  2021-12-03 13:10:34 -0500 14914)         The sign of |area| is interpreted based on the {{GPURenderPipelineDescriptor/primitive}}.{{GPUPrimitiveState/frontFace}}:
02d3149a5 spec/index.bs        (Kai Ninomiya      2022-06-29 17:54:53 -0700 14915) 
02d3149a5 spec/index.bs        (Kai Ninomiya      2022-06-29 17:54:53 -0700 14916)         <dl class=switch>
dafb8db32 spec/index.bs        (Dzmitry Malyshau  2021-12-03 13:10:34 -0500 14917)             : {{GPUFrontFace/"ccw"}}
dafb8db32 spec/index.bs        (Dzmitry Malyshau  2021-12-03 13:10:34 -0500 14918)             :: |area| &gt; 0 is considered [=front-facing=], otherwise [=back-facing=]
dafb8db32 spec/index.bs        (Dzmitry Malyshau  2021-12-03 13:10:34 -0500 14919)             : {{GPUFrontFace/"cw"}}
dafb8db32 spec/index.bs        (Dzmitry Malyshau  2021-12-03 13:10:34 -0500 14920)             :: |area| &lt; 0 is considered [=front-facing=], otherwise [=back-facing=]
dafb8db32 spec/index.bs        (Dzmitry Malyshau  2021-12-03 13:10:34 -0500 14921)         </dl>
9d8a450c5 design/sketch.webidl (Kai Ninomiya      2019-03-28 13:51:28 +0100 14922) 
dafb8db32 spec/index.bs        (Dzmitry Malyshau  2021-12-03 13:10:34 -0500 14923)     1. Cull based on {{GPURenderPipelineDescriptor/primitive}}.{{GPUPrimitiveState/cullMode}}:
02d3149a5 spec/index.bs        (Kai Ninomiya      2022-06-29 17:54:53 -0700 14924) 
02d3149a5 spec/index.bs        (Kai Ninomiya      2022-06-29 17:54:53 -0700 14925)         <dl class=switch>
dafb8db32 spec/index.bs        (Dzmitry Malyshau  2021-12-03 13:10:34 -0500 14926)             : {{GPUCullMode/"none"}}
dafb8db32 spec/index.bs        (Dzmitry Malyshau  2021-12-03 13:10:34 -0500 14927)             :: All polygons pass this test.
dafb8db32 spec/index.bs        (Dzmitry Malyshau  2021-12-03 13:10:34 -0500 14928)             : {{GPUCullMode/"front"}}
dafb8db32 spec/index.bs        (Dzmitry Malyshau  2021-12-03 13:10:34 -0500 14929)             :: The [=front-facing=] polygons are discarded,
dafb8db32 spec/index.bs        (Dzmitry Malyshau  2021-12-03 13:10:34 -0500 14930)                 and do not process in later stages of the render pipeline.
dafb8db32 spec/index.bs        (Dzmitry Malyshau  2021-12-03 13:10:34 -0500 14931)             : {{GPUCullMode/"back"}}
dafb8db32 spec/index.bs        (Dzmitry Malyshau  2021-12-03 13:10:34 -0500 14932)             :: The [=back-facing=] polygons are discarded.
dafb8db32 spec/index.bs        (Dzmitry Malyshau  2021-12-03 13:10:34 -0500 14933)         </dl>
dafb8db32 spec/index.bs        (Dzmitry Malyshau  2021-12-03 13:10:34 -0500 14934) 
dafb8db32 spec/index.bs        (Dzmitry Malyshau  2021-12-03 13:10:34 -0500 14935)     1. Determine a set of [=fragments=] inside the polygon in [=framebuffer=] space -
dafb8db32 spec/index.bs        (Dzmitry Malyshau  2021-12-03 13:10:34 -0500 14936)         these are locations scheduled for the per-fragment operations.
dafb8db32 spec/index.bs        (Dzmitry Malyshau  2021-12-03 13:10:34 -0500 14937)         This operation is known as "point sampling".
dafb8db32 spec/index.bs        (Dzmitry Malyshau  2021-12-03 13:10:34 -0500 14938)         The logic is based on |descriptor|.{{GPURenderPipelineDescriptor/multisample}}:
02d3149a5 spec/index.bs        (Kai Ninomiya      2022-06-29 17:54:53 -0700 14939) 
02d3149a5 spec/index.bs        (Kai Ninomiya      2022-06-29 17:54:53 -0700 14940)         <dl class=switch>
dafb8db32 spec/index.bs        (Dzmitry Malyshau  2021-12-03 13:10:34 -0500 14941)             : disabled
dafb8db32 spec/index.bs        (Dzmitry Malyshau  2021-12-03 13:10:34 -0500 14942)             :: [=Fragment=]s are associated with pixel centers. That is, all the points with coordinates |C|, where
dafb8db32 spec/index.bs        (Dzmitry Malyshau  2021-12-03 13:10:34 -0500 14943)                 fract(|C|) = vector2(0.5, 0.5) in the [=framebuffer=] space, enclosed into the polygon, are included.
dafb8db32 spec/index.bs        (Dzmitry Malyshau  2021-12-03 13:10:34 -0500 14944)                 If a pixel center is on the edge of the polygon, whether or not it's included is not defined.
dafb8db32 spec/index.bs        (Dzmitry Malyshau  2021-12-03 13:10:34 -0500 14945) 
dafb8db32 spec/index.bs        (Dzmitry Malyshau  2021-12-03 13:10:34 -0500 14946)                 Note: this becomes a subject of precision for the rasterizer.
dafb8db32 spec/index.bs        (Dzmitry Malyshau  2021-12-03 13:10:34 -0500 14947) 
dafb8db32 spec/index.bs        (Dzmitry Malyshau  2021-12-03 13:10:34 -0500 14948)             : enabled
dafb8db32 spec/index.bs        (Dzmitry Malyshau  2021-12-03 13:10:34 -0500 14949)             :: Each pixel is associated with |descriptor|.{{GPURenderPipelineDescriptor/multisample}}.{{GPUMultisampleState/count}}
dafb8db32 spec/index.bs        (Dzmitry Malyshau  2021-12-03 13:10:34 -0500 14950)                 locations, which are implementation-defined.
dafb8db32 spec/index.bs        (Dzmitry Malyshau  2021-12-03 13:10:34 -0500 14951)                 The locations are ordered, and the list is the same for each pixel of the [=framebuffer=].
dafb8db32 spec/index.bs        (Dzmitry Malyshau  2021-12-03 13:10:34 -0500 14952)                 Each location corresponds to one fragment in the multisampled [=framebuffer=].
dafb8db32 spec/index.bs        (Dzmitry Malyshau  2021-12-03 13:10:34 -0500 14953) 
dafb8db32 spec/index.bs        (Dzmitry Malyshau  2021-12-03 13:10:34 -0500 14954)                 The rasterizer builds a mask of locations being hit inside each pixel and provides is as "sample-mask"
dafb8db32 spec/index.bs        (Dzmitry Malyshau  2021-12-03 13:10:34 -0500 14955)                 built-in to the fragment shader.
dafb8db32 spec/index.bs        (Dzmitry Malyshau  2021-12-03 13:10:34 -0500 14956)         </dl>
dafb8db32 spec/index.bs        (Dzmitry Malyshau  2021-12-03 13:10:34 -0500 14957) 
dafb8db32 spec/index.bs        (Dzmitry Malyshau  2021-12-03 13:10:34 -0500 14958)     1. For each produced fragment of type [=FragmentDestination=]:
4a3524f11 spec/index.bs        (Kai Ninomiya      2021-12-29 16:43:06 -0800 14959) 
e254d407e spec/index.bs        (Mehmet Oguz Derin 2022-01-18 06:33:25 +0300 14960)         1. Let |rp| be a new [=RasterizationPoint=] object
dafb8db32 spec/index.bs        (Dzmitry Malyshau  2021-12-03 13:10:34 -0500 14961)         1. Compute the list |b| as [[#barycentric-coordinates]] of that fragment.
dafb8db32 spec/index.bs        (Dzmitry Malyshau  2021-12-03 13:10:34 -0500 14962)             Set |rp|.[=RasterizationPoint/barycentricCoordinates=] to |b|.
dafb8db32 spec/index.bs        (Dzmitry Malyshau  2021-12-03 13:10:34 -0500 14963) 
dafb8db32 spec/index.bs        (Dzmitry Malyshau  2021-12-03 13:10:34 -0500 14964)         1. Let |d|<sub>|i|</sub> be the depth value of |v|<sub>|i|</sub>.
dafb8db32 spec/index.bs        (Dzmitry Malyshau  2021-12-03 13:10:34 -0500 14965) 
b9d4153ab spec/index.bs        (Kai Ninomiya      2023-10-13 13:29:03 -0700 14966)             <p class="note editorial"><span class=marker>Editorial note:</span> define how this value is constructed.
dafb8db32 spec/index.bs        (Dzmitry Malyshau  2021-12-03 13:10:34 -0500 14967)         1. Set |rp|.[=RasterizationPoint/depth=] to &sum; (|b|<sub>|i|</sub> &times; |d|<sub>|i|</sub>)
dafb8db32 spec/index.bs        (Dzmitry Malyshau  2021-12-03 13:10:34 -0500 14968)         1. Append |rp| to |rasterizationPoints|.
dafb8db32 spec/index.bs        (Dzmitry Malyshau  2021-12-03 13:10:34 -0500 14969) 
dafb8db32 spec/index.bs        (Dzmitry Malyshau  2021-12-03 13:10:34 -0500 14970)     1. Return |rasterizationPoints|.
dafb8db32 spec/index.bs        (Dzmitry Malyshau  2021-12-03 13:10:34 -0500 14971) </div>
2ea89ce9e spec/index.bs        (Kai Ninomiya      2021-01-15 10:38:29 -0800 14972) 
78e3abd78 spec/index.bs        (Dzmitry Malyshau  2021-04-08 15:38:05 -0400 14973) ### Fragment Processing ### {#fragment-processing}
9d8a450c5 design/sketch.webidl (Kai Ninomiya      2019-03-28 13:51:28 +0100 14974) 
8ea3aea0d spec/index.bs        (Dzmitry Malyshau  2021-12-01 09:17:32 -0500 14975) The fragment processing stage is a programmable stage of the render [=pipeline=] that
8ea3aea0d spec/index.bs        (Dzmitry Malyshau  2021-12-01 09:17:32 -0500 14976) computes the fragment data (often a color) to be written into render targets.
8ea3aea0d spec/index.bs        (Dzmitry Malyshau  2021-12-01 09:17:32 -0500 14977) 
8ea3aea0d spec/index.bs        (Dzmitry Malyshau  2021-12-01 09:17:32 -0500 14978) This stage produces a <dfn dfn>Fragment</dfn> for each [=RasterizationPoint=]:
8ea3aea0d spec/index.bs        (Dzmitry Malyshau  2021-12-01 09:17:32 -0500 14979) <div algorithm="Fragment accessors" dfn-for=Fragment>
8ea3aea0d spec/index.bs        (Dzmitry Malyshau  2021-12-01 09:17:32 -0500 14980)     - <dfn dfn>destination</dfn> refers to [=FragmentDestination=].
8ea3aea0d spec/index.bs        (Dzmitry Malyshau  2021-12-01 09:17:32 -0500 14981)     - <dfn dfn>coverageMask</dfn> refers to multisample coverage mask (see [[#sample-masking]]).
e607dd0e1 spec/index.bs        (David Neto        2023-05-23 17:49:05 -0400 14982)     - <dfn dfn>depth</dfn> refers to the depth in [=viewport coordinates=],
b97a29ebc spec/index.bs        (David Neto        2023-04-18 17:37:45 -0400 14983)         i.e. between the {{RenderState/[[viewport]]}} `minDepth` and `maxDepth`.
8ea3aea0d spec/index.bs        (Dzmitry Malyshau  2021-12-01 09:17:32 -0500 14984)     - <dfn dfn>colors</dfn> refers to the list of color values,
8ea3aea0d spec/index.bs        (Dzmitry Malyshau  2021-12-01 09:17:32 -0500 14985)         one for each target in {{GPURenderPassDescriptor/colorAttachments}}.
8ea3aea0d spec/index.bs        (Dzmitry Malyshau  2021-12-01 09:17:32 -0500 14986) </div>
8ea3aea0d spec/index.bs        (Dzmitry Malyshau  2021-12-01 09:17:32 -0500 14987) 
1d11de7e1 spec/index.bs        (Brandon Jones     2024-05-07 09:48:51 -0700 14988) <div algorithm data-timeline=queue>
8ea3aea0d spec/index.bs        (Dzmitry Malyshau  2021-12-01 09:17:32 -0500 14989)     <dfn abstract-op>process fragment</dfn>(rp, desc, state)
8ea3aea0d spec/index.bs        (Dzmitry Malyshau  2021-12-01 09:17:32 -0500 14990) 
8ea3aea0d spec/index.bs        (Dzmitry Malyshau  2021-12-01 09:17:32 -0500 14991)     **Arguments:**
02d3149a5 spec/index.bs        (Kai Ninomiya      2022-06-29 17:54:53 -0700 14992) 
8ea3aea0d spec/index.bs        (Dzmitry Malyshau  2021-12-01 09:17:32 -0500 14993)     - |rp|: The [=RasterizationPoint=], produced by [[#rasterization]].
8ea3aea0d spec/index.bs        (Dzmitry Malyshau  2021-12-01 09:17:32 -0500 14994)     - |desc|: The descriptor of type {{GPUFragmentState}}.
8ea3aea0d spec/index.bs        (Dzmitry Malyshau  2021-12-01 09:17:32 -0500 14995)     - |state|: The active [=RenderState=].
8ea3aea0d spec/index.bs        (Dzmitry Malyshau  2021-12-01 09:17:32 -0500 14996) 
8ea3aea0d spec/index.bs        (Dzmitry Malyshau  2021-12-01 09:17:32 -0500 14997)     **Returns:** [=Fragment=] or `null`.
8ea3aea0d spec/index.bs        (Dzmitry Malyshau  2021-12-01 09:17:32 -0500 14998) 
8ea3aea0d spec/index.bs        (Dzmitry Malyshau  2021-12-01 09:17:32 -0500 14999)     1. Let |fragment| be a new [=Fragment=] object.
8ea3aea0d spec/index.bs        (Dzmitry Malyshau  2021-12-01 09:17:32 -0500 15000)     1. Set |fragment|.[=Fragment/destination=] to |rp|.[=RasterizationPoint/destination=].
8ea3aea0d spec/index.bs        (Dzmitry Malyshau  2021-12-01 09:17:32 -0500 15001)     1. Set |fragment|.[=Fragment/coverageMask=] to |rp|.[=RasterizationPoint/coverageMask=].
8ea3aea0d spec/index.bs        (Dzmitry Malyshau  2021-12-01 09:17:32 -0500 15002)     1. Set |fragment|.[=Fragment/depth=] to |rp|.[=RasterizationPoint/depth=].
8ea3aea0d spec/index.bs        (Dzmitry Malyshau  2021-12-01 09:17:32 -0500 15003)     1. If |desc| is not `null`:
8ea3aea0d spec/index.bs        (Dzmitry Malyshau  2021-12-01 09:17:32 -0500 15004)         1. Set the shader input [=builtins=]. For each non-composite argument of the entry point,
e125043a5 spec/index.bs        (Mehmet Oguz Derin 2021-12-08 00:14:36 +0300 15005)             annotated as a [=builtin=], set its value based on the annotation:
02d3149a5 spec/index.bs        (Kai Ninomiya      2022-06-29 17:54:53 -0700 15006) 
02d3149a5 spec/index.bs        (Kai Ninomiya      2022-06-29 17:54:53 -0700 15007)             <dl class=switch>
8ea3aea0d spec/index.bs        (Dzmitry Malyshau  2021-12-01 09:17:32 -0500 15008)                 : `position`
8ea3aea0d spec/index.bs        (Dzmitry Malyshau  2021-12-01 09:17:32 -0500 15009)                 :: `vec4<f32>`(|rp|.[=RasterizationPoint/destination=].[=FragmentDestination/position=], |rp|.[=RasterizationPoint/depth=], |rp|.[=RasterizationPoint/perspectiveDivisor=])
8ea3aea0d spec/index.bs        (Dzmitry Malyshau  2021-12-01 09:17:32 -0500 15010) 
8ea3aea0d spec/index.bs        (Dzmitry Malyshau  2021-12-01 09:17:32 -0500 15011)                 : `front_facing`
8ea3aea0d spec/index.bs        (Dzmitry Malyshau  2021-12-01 09:17:32 -0500 15012)                 :: |rp|.[=RasterizationPoint/frontFacing=]
8ea3aea0d spec/index.bs        (Dzmitry Malyshau  2021-12-01 09:17:32 -0500 15013) 
8ea3aea0d spec/index.bs        (Dzmitry Malyshau  2021-12-01 09:17:32 -0500 15014)                 : `sample_index`
8ea3aea0d spec/index.bs        (Dzmitry Malyshau  2021-12-01 09:17:32 -0500 15015)                 :: |rp|.[=RasterizationPoint/destination=].[=FragmentDestination/sampleIndex=]
8ea3aea0d spec/index.bs        (Dzmitry Malyshau  2021-12-01 09:17:32 -0500 15016) 
8ea3aea0d spec/index.bs        (Dzmitry Malyshau  2021-12-01 09:17:32 -0500 15017)                 : `sample_mask`
8ea3aea0d spec/index.bs        (Dzmitry Malyshau  2021-12-01 09:17:32 -0500 15018)                 :: |rp|.[=RasterizationPoint/coverageMask=]
8ea3aea0d spec/index.bs        (Dzmitry Malyshau  2021-12-01 09:17:32 -0500 15019)             </dl>
701ef4b84 spec/index.bs        (Brandon Jones     2022-12-08 16:16:17 -0800 15020)         1. For each user-specified [=shader stage input=] of the fragment stage:
8ea3aea0d spec/index.bs        (Dzmitry Malyshau  2021-12-01 09:17:32 -0500 15021)             1. Let |value| be the interpolated fragment input,
8ea3aea0d spec/index.bs        (Dzmitry Malyshau  2021-12-01 09:17:32 -0500 15022)                 based on |rp|.[=RasterizationPoint/barycentricCoordinates=], |rp|.[=RasterizationPoint/primitiveVertices=],
8ea3aea0d spec/index.bs        (Dzmitry Malyshau  2021-12-01 09:17:32 -0500 15023)                 and the [=interpolation=] qualifier on the input.
8ea3aea0d spec/index.bs        (Dzmitry Malyshau  2021-12-01 09:17:32 -0500 15024) 
b9d4153ab spec/index.bs        (Kai Ninomiya      2023-10-13 13:29:03 -0700 15025)                 <p class="note editorial"><span class=marker>Editorial note:</span> describe the exact equations.
8ea3aea0d spec/index.bs        (Dzmitry Malyshau  2021-12-01 09:17:32 -0500 15026)             1. Set the corresponding fragment shader [=location=] input to |value|.
8ea3aea0d spec/index.bs        (Dzmitry Malyshau  2021-12-01 09:17:32 -0500 15027)         1. Invoke the fragment shader entry point described by |desc|.
2a614beca spec/index.bs        (David Neto        2022-07-20 00:34:39 -0400 15028) 
2a614beca spec/index.bs        (David Neto        2022-07-20 00:34:39 -0400 15029)             The [=device=] may become [=lose the device|lost=] if
9d897a4bb spec/index.bs        (Kai Ninomiya      2023-01-18 14:53:48 -0800 15030)             [=shader execution end|shader execution does not end=]
2a614beca spec/index.bs        (David Neto        2022-07-20 00:34:39 -0400 15031)             in a reasonable amount of time, as determined by the user agent.
2a614beca spec/index.bs        (David Neto        2022-07-20 00:34:39 -0400 15032) 
8ea3aea0d spec/index.bs        (Dzmitry Malyshau  2021-12-01 09:17:32 -0500 15033)         1. If the fragment issued `discard`, return `null`.
701ef4b84 spec/index.bs        (Brandon Jones     2022-12-08 16:16:17 -0800 15034)         1. Set |fragment|.[=Fragment/colors=] to the user-specified [=shader stage output=] values from the shader.
8ea3aea0d spec/index.bs        (Dzmitry Malyshau  2021-12-01 09:17:32 -0500 15035)         1. Take the shader output [=builtins=]:
8ea3aea0d spec/index.bs        (Dzmitry Malyshau  2021-12-01 09:17:32 -0500 15036)             1. If `frag_depth` [=builtin=] is produced by the shader as |value|:
a185b503b spec/index.bs        (Brandon Jones     2023-01-04 10:38:13 -0800 15037)                 1. Let |vp| be |state|.{{RenderState/[[viewport]]}}.
8ea3aea0d spec/index.bs        (Dzmitry Malyshau  2021-12-01 09:17:32 -0500 15038)                 1. Set |fragment|.[=Fragment/depth=] to clamp(|value|, |vp|.`minDepth`, |vp|.`maxDepth`).
8ea3aea0d spec/index.bs        (Dzmitry Malyshau  2021-12-01 09:17:32 -0500 15039)         1. If `sample_mask` [=builtin=] is produced by the shader as |value|:
8ea3aea0d spec/index.bs        (Dzmitry Malyshau  2021-12-01 09:17:32 -0500 15040)             1. Set |fragment|.[=Fragment/coverageMask=] to |fragment|.[=Fragment/coverageMask=] &and; |value|.
4a3524f11 spec/index.bs        (Kai Ninomiya      2021-12-29 16:43:06 -0800 15041) 
8ea3aea0d spec/index.bs        (Dzmitry Malyshau  2021-12-01 09:17:32 -0500 15042)         Otherwise we are in [[#no-color-output]] mode, and |fragment|.[=Fragment/colors=] is empty.
8ea3aea0d spec/index.bs        (Dzmitry Malyshau  2021-12-01 09:17:32 -0500 15043)     1. Return |fragment|.
8ea3aea0d spec/index.bs        (Dzmitry Malyshau  2021-12-01 09:17:32 -0500 15044) </div>
8ea3aea0d spec/index.bs        (Dzmitry Malyshau  2021-12-01 09:17:32 -0500 15045) 
8ea3aea0d spec/index.bs        (Dzmitry Malyshau  2021-12-01 09:17:32 -0500 15046) Processing of fragments happens in parallel, while any side effects,
8ea3aea0d spec/index.bs        (Dzmitry Malyshau  2021-12-01 09:17:32 -0500 15047) such as writes into {{GPUBufferBindingType/"storage"|GPUBufferBindingType."storage"}} bindings,
8ea3aea0d spec/index.bs        (Dzmitry Malyshau  2021-12-01 09:17:32 -0500 15048) may happen in any order.
9d8a450c5 design/sketch.webidl (Kai Ninomiya      2019-03-28 13:51:28 +0100 15049) 
00751e047 spec/index.bs        (Kai Ninomiya      2021-11-01 14:44:57 -0700 15050) ### Output Merging ### {#output-merging}
00751e047 spec/index.bs        (Kai Ninomiya      2021-11-01 14:44:57 -0700 15051) 
b9d4153ab spec/index.bs        (Kai Ninomiya      2023-10-13 13:29:03 -0700 15052) <p class="note editorial"><span class=marker>Editorial note:</span> fill out this section
00751e047 spec/index.bs        (Kai Ninomiya      2021-11-01 14:44:57 -0700 15053) 
00751e047 spec/index.bs        (Kai Ninomiya      2021-11-01 14:44:57 -0700 15054) The depth input to this stage, if any, is clamped to the current
a185b503b spec/index.bs        (Brandon Jones     2023-01-04 10:38:13 -0800 15055) {{RenderState/[[viewport]]}} depth range
00751e047 spec/index.bs        (Kai Ninomiya      2021-11-01 14:44:57 -0700 15056) (regardless of whether the fragment shader stage writes the `frag_depth` builtin).
00751e047 spec/index.bs        (Kai Ninomiya      2021-11-01 14:44:57 -0700 15057) 
78e3abd78 spec/index.bs        (Dzmitry Malyshau  2021-04-08 15:38:05 -0400 15058) ### No Color Output ### {#no-color-output}
c6db5225e spec/index.bs        (Kai Ninomiya      2019-07-12 13:58:25 -0700 15059) 
78e3abd78 spec/index.bs        (Dzmitry Malyshau  2021-04-08 15:38:05 -0400 15060) In no-color-output mode, [=pipeline=] does not produce any color attachment outputs.
31f5fcadc design/sketch.webidl (Kai Ninomiya      2019-03-11 12:18:37 -0700 15061) 
78e3abd78 spec/index.bs        (Dzmitry Malyshau  2021-04-08 15:38:05 -0400 15062) The [=pipeline=] still performs rasterization and produces depth values
78e3abd78 spec/index.bs        (Dzmitry Malyshau  2021-04-08 15:38:05 -0400 15063) based on the vertex position output. The depth testing and stencil operations can still be used.
31f5fcadc design/sketch.webidl (Kai Ninomiya      2019-03-11 12:18:37 -0700 15064) 
78e3abd78 spec/index.bs        (Dzmitry Malyshau  2021-04-08 15:38:05 -0400 15065) ### Alpha to Coverage ### {#alpha-to-coverage}
31f5fcadc design/sketch.webidl (Kai Ninomiya      2019-03-11 12:18:37 -0700 15066) 
78e3abd78 spec/index.bs        (Dzmitry Malyshau  2021-04-08 15:38:05 -0400 15067) In alpha-to-coverage mode, an additional <dfn dfn>alpha-to-coverage mask</dfn>
78e3abd78 spec/index.bs        (Dzmitry Malyshau  2021-04-08 15:38:05 -0400 15068) of MSAA samples is generated based on the |alpha| component of the
94f49488b spec/index.bs        (Kai Ninomiya      2023-03-27 21:43:24 -0700 15069) fragment shader output value at `@location(0)`.
31f5fcadc design/sketch.webidl (Kai Ninomiya      2019-03-11 12:18:37 -0700 15070) 
78e3abd78 spec/index.bs        (Dzmitry Malyshau  2021-04-08 15:38:05 -0400 15071) The algorithm of producing the extra mask is platform-dependent and can vary for different pixels.
78e3abd78 spec/index.bs        (Dzmitry Malyshau  2021-04-08 15:38:05 -0400 15072) It guarantees that:
02d3149a5 spec/index.bs        (Kai Ninomiya      2022-06-29 17:54:53 -0700 15073) 
0a9738877 spec/index.bs        (Kai Ninomiya      2022-06-29 20:05:16 -0700 15074) - if |alpha| &le; 0.0, the result is 0x0
0a9738877 spec/index.bs        (Kai Ninomiya      2022-06-29 20:05:16 -0700 15075) - if |alpha| &ge; 1.0, the result is 0xFFFFFFFF
02d3149a5 spec/index.bs        (Kai Ninomiya      2022-06-29 17:54:53 -0700 15076) - if |alpha| is greater than some other |alpha1|,
78e3abd78 spec/index.bs        (Dzmitry Malyshau  2021-04-08 15:38:05 -0400 15077)     then the produced sample mask has at least as many bits set to 1 as the mask for |alpha1|
31f5fcadc design/sketch.webidl (Kai Ninomiya      2019-03-11 12:18:37 -0700 15078) 
78e3abd78 spec/index.bs        (Dzmitry Malyshau  2021-04-08 15:38:05 -0400 15079) ### Sample frequency shading ### {#sample-frequency-shading}
31f5fcadc design/sketch.webidl (Kai Ninomiya      2019-03-11 12:18:37 -0700 15080) 
b9d4153ab spec/index.bs        (Kai Ninomiya      2023-10-13 13:29:03 -0700 15081) <p class="note editorial"><span class=marker>Editorial note:</span> fill out the section
9f3f3b6dc spec/index.bs        (Kai Ninomiya      2020-09-08 06:23:22 -0700 15082) 
78e3abd78 spec/index.bs        (Dzmitry Malyshau  2021-04-08 15:38:05 -0400 15083) ### Sample Masking ### {#sample-masking}
9f3f3b6dc spec/index.bs        (Kai Ninomiya      2020-09-08 06:23:22 -0700 15084) 
78e3abd78 spec/index.bs        (Dzmitry Malyshau  2021-04-08 15:38:05 -0400 15085) The <dfn dfn>final sample mask</dfn> for a pixel is computed as:
78e3abd78 spec/index.bs        (Dzmitry Malyshau  2021-04-08 15:38:05 -0400 15086) [=rasterization mask=] & {{GPUMultisampleState/mask}} & [=shader-output mask=].
9f3f3b6dc spec/index.bs        (Kai Ninomiya      2020-09-08 06:23:22 -0700 15087) 
78e3abd78 spec/index.bs        (Dzmitry Malyshau  2021-04-08 15:38:05 -0400 15088) Only the lower {{GPUMultisampleState/count}} bits of the mask are considered.
c6db5225e spec/index.bs        (Kai Ninomiya      2019-07-12 13:58:25 -0700 15089) 
78e3abd78 spec/index.bs        (Dzmitry Malyshau  2021-04-08 15:38:05 -0400 15090) If the least-significant bit at position |N| of the [=final sample mask=] has value of "0",
78e3abd78 spec/index.bs        (Dzmitry Malyshau  2021-04-08 15:38:05 -0400 15091) the sample color outputs (corresponding to sample |N|) to all attachments of the fragment shader are discarded.
78e3abd78 spec/index.bs        (Dzmitry Malyshau  2021-04-08 15:38:05 -0400 15092) Also, no depth test or stencil operations are executed on the relevant samples of the depth-stencil attachment.
31f5fcadc design/sketch.webidl (Kai Ninomiya      2019-03-11 12:18:37 -0700 15093) 
78e3abd78 spec/index.bs        (Dzmitry Malyshau  2021-04-08 15:38:05 -0400 15094) Note: the color output for sample |N| is produced by the fragment shader execution
78e3abd78 spec/index.bs        (Dzmitry Malyshau  2021-04-08 15:38:05 -0400 15095) with SV_SampleIndex == |N| for the current pixel.
78e3abd78 spec/index.bs        (Dzmitry Malyshau  2021-04-08 15:38:05 -0400 15096) If the fragment shader doesn't use this semantics, it's only executed once per pixel.
31f5fcadc design/sketch.webidl (Kai Ninomiya      2019-03-11 12:18:37 -0700 15097) 
78e3abd78 spec/index.bs        (Dzmitry Malyshau  2021-04-08 15:38:05 -0400 15098) The <dfn dfn>rasterization mask</dfn> is produced by the rasterization stage,
e125043a5 spec/index.bs        (Mehmet Oguz Derin 2021-12-08 00:14:36 +0300 15099) based on the shape of the rasterized polygon. The samples included in the shape get the relevant
78e3abd78 spec/index.bs        (Dzmitry Malyshau  2021-04-08 15:38:05 -0400 15100) bits 1 in the mask.
31f5fcadc design/sketch.webidl (Kai Ninomiya      2019-03-11 12:18:37 -0700 15101) 
866606158 spec/index.bs        (Dzmitry Malyshau  2021-07-07 14:12:35 -0400 15102) The <dfn dfn>shader-output mask</dfn> takes the output value of "sample_mask" [=builtin=] in the fragment shader.
866606158 spec/index.bs        (Dzmitry Malyshau  2021-07-07 14:12:35 -0400 15103) If the builtin is not output from the fragment shader, and {{GPUMultisampleState/alphaToCoverageEnabled}}
78e3abd78 spec/index.bs        (Dzmitry Malyshau  2021-04-08 15:38:05 -0400 15104) is enabled, the [=shader-output mask=] becomes the [=alpha-to-coverage mask=]. Otherwise, it defaults to 0xFFFFFFFF.
dd21edb30 spec/index.bs        (Corentin Wallez   2019-09-05 20:38:01 +0200 15105) 
